{"ast":null,"code":"var _jsxFileName = \"/Users/vineettallavajhala/workspace/Servicechain.io/packages/react-app/src/components/Wallet.jsx\";\nimport React, { useState } from \"react\";\nimport { WalletOutlined, QrcodeOutlined, SendOutlined, KeyOutlined } from \"@ant-design/icons\";\nimport { Tooltip, Spin, Modal, Button, Typography } from \"antd\";\nimport QR from \"qrcode.react\";\nimport { parseEther } from \"@ethersproject/units\";\nimport { useUserAddress } from \"eth-hooks\";\nimport { Transactor } from \"../helpers\";\nimport Address from \"./Address\";\nimport Balance from \"./Balance\";\nimport AddressInput from \"./AddressInput\";\nimport EtherInput from \"./EtherInput\";\nimport { ethers } from \"ethers\";\nconst {\n  Text,\n  Paragraph\n} = Typography;\n/*\n\n  Wallet UI for sending, receiving, and extracting the burner wallet\n\n  <Wallet\n    address={address}\n    provider={userProvider}\n    ensProvider={mainnetProvider}\n    price={price}\n  />\n\n*/\n\nexport default function Wallet(props) {\n  const signerAddress = useUserAddress(props.provider);\n  const selectedAddress = props.address || signerAddress;\n  const [open, setOpen] = useState();\n  const [qr, setQr] = useState();\n  const [amount, setAmount] = useState();\n  const [toAddress, setToAddress] = useState();\n  const [pk, setPK] = useState();\n  const providerSend = props.provider ? /*#__PURE__*/React.createElement(Tooltip, {\n    title: \"Wallet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(WalletOutlined, {\n    onClick: () => {\n      setOpen(!open);\n    },\n    rotate: -90,\n    style: {\n      padding: 7,\n      color: props.color ? props.color : \"#1890ff\",\n      cursor: \"pointer\",\n      fontSize: 28,\n      verticalAlign: \"middle\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  })) : \"\";\n  let display;\n  let receiveButton;\n  let privateKeyButton;\n\n  if (qr) {\n    display = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Text, {\n      copyable: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }\n    }, selectedAddress)), /*#__PURE__*/React.createElement(QR, {\n      value: selectedAddress,\n      size: \"450\",\n      level: \"H\",\n      includeMargin: true,\n      renderAs: \"svg\",\n      imageSettings: {\n        excavate: false\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }));\n    receiveButton = /*#__PURE__*/React.createElement(Button, {\n      key: \"hide\",\n      onClick: () => {\n        setQr(\"\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(QrcodeOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }), \" Hide\");\n    privateKeyButton = /*#__PURE__*/React.createElement(Button, {\n      key: \"hide\",\n      onClick: () => {\n        setPK(selectedAddress);\n        setQr(\"\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(KeyOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 8\n      }\n    }), \" Private Key\");\n  } else if (pk) {\n    let pk = localStorage.getItem(\"metaPrivateKey\");\n    let wallet = new ethers.Wallet(pk);\n\n    if (wallet.address != selectedAddress) {\n      display = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 8\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 10\n        }\n      }, \"*injected account*, private key unknown\"));\n    } else {\n      display = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 8\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 10\n        }\n      }, \"Private Key:\"), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 10\n        }\n      }, /*#__PURE__*/React.createElement(Text, {\n        copyable: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }\n      }, pk)), /*#__PURE__*/React.createElement(\"hr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"i\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 10\n        }\n      }, \"Point your camera phone at qr code to open in \", /*#__PURE__*/React.createElement(\"a\", {\n        target: \"_blank\",\n        href: \"https://xdai.io/\" + pk,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 59\n        }\n      }, \"burner wallet\"), \":\"), /*#__PURE__*/React.createElement(QR, {\n        value: \"https://xdai.io/\" + pk,\n        size: \"450\",\n        level: \"H\",\n        includeMargin: true,\n        renderAs: \"svg\",\n        imageSettings: {\n          excavate: false\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 10\n        }\n      }), /*#__PURE__*/React.createElement(Paragraph, {\n        style: {\n          fontSize: \"16\"\n        },\n        copyable: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 10\n        }\n      }, \"https://xdai.io/\" + pk));\n    }\n\n    receiveButton = /*#__PURE__*/React.createElement(Button, {\n      key: \"receive\",\n      onClick: () => {\n        setQr(selectedAddress);\n        setPK(\"\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(QrcodeOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 8\n      }\n    }), \" Receive\");\n    privateKeyButton = /*#__PURE__*/React.createElement(Button, {\n      key: \"hide\",\n      onClick: () => {\n        setPK(\"\");\n        setQr(\"\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(KeyOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 8\n      }\n    }), \" Hide\");\n  } else {\n    const inputStyle = {\n      padding: 10\n    };\n    display = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: inputStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(AddressInput, {\n      autoFocus: true,\n      ensProvider: props.ensProvider,\n      placeholder: \"to address\",\n      value: toAddress,\n      onChange: setToAddress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      style: inputStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(EtherInput, {\n      price: props.price,\n      value: amount,\n      onChange: value => {\n        setAmount(value);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }\n    })));\n    receiveButton = /*#__PURE__*/React.createElement(Button, {\n      key: \"receive\",\n      onClick: () => {\n        setQr(selectedAddress);\n        setPK(\"\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(QrcodeOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }\n    }), \" Receive\");\n    privateKeyButton = /*#__PURE__*/React.createElement(Button, {\n      key: \"hide\",\n      onClick: () => {\n        setPK(selectedAddress);\n        setQr(\"\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(KeyOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }\n    }), \" Private Key\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 5\n    }\n  }, providerSend, /*#__PURE__*/React.createElement(Modal, {\n    visible: open,\n    title: /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }\n    }, selectedAddress ? /*#__PURE__*/React.createElement(Address, {\n      value: selectedAddress,\n      ensProvider: props.ensProvider,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 32\n      }\n    }) : /*#__PURE__*/React.createElement(Spin, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 102\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        float: \"right\",\n        paddingRight: 25\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Balance, {\n      address: selectedAddress,\n      provider: props.provider,\n      dollarMultiplier: props.price,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 15\n      }\n    }))),\n    onOk: () => {\n      setQr();\n      setPK();\n      setOpen(!open);\n    },\n    onCancel: () => {\n      setQr();\n      setPK();\n      setOpen(!open);\n    },\n    footer: [privateKeyButton, receiveButton, /*#__PURE__*/React.createElement(Button, {\n      key: \"submit\",\n      type: \"primary\",\n      disabled: !amount || !toAddress || qr,\n      loading: false,\n      onClick: () => {\n        const tx = Transactor(props.provider);\n        let value;\n\n        try {\n          value = parseEther(\"\" + amount);\n        } catch (e) {\n          // failed to parseEther, try something else\n          value = parseEther(\"\" + parseFloat(amount).toFixed(8));\n        }\n\n        tx({\n          to: toAddress,\n          value\n        });\n        setOpen(!open);\n        setQr();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(SendOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 13\n      }\n    }), \" Send\")],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }\n  }, display));\n}","map":{"version":3,"sources":["/Users/vineettallavajhala/workspace/Servicechain.io/packages/react-app/src/components/Wallet.jsx"],"names":["React","useState","WalletOutlined","QrcodeOutlined","SendOutlined","KeyOutlined","Tooltip","Spin","Modal","Button","Typography","QR","parseEther","useUserAddress","Transactor","Address","Balance","AddressInput","EtherInput","ethers","Text","Paragraph","Wallet","props","signerAddress","provider","selectedAddress","address","open","setOpen","qr","setQr","amount","setAmount","toAddress","setToAddress","pk","setPK","providerSend","padding","color","cursor","fontSize","verticalAlign","display","receiveButton","privateKeyButton","excavate","localStorage","getItem","wallet","inputStyle","ensProvider","price","value","float","paddingRight","tx","e","parseFloat","toFixed","to"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { WalletOutlined, QrcodeOutlined, SendOutlined, KeyOutlined } from \"@ant-design/icons\";\nimport { Tooltip, Spin, Modal, Button, Typography } from \"antd\";\nimport QR from \"qrcode.react\";\nimport { parseEther } from \"@ethersproject/units\";\nimport { useUserAddress } from \"eth-hooks\";\nimport { Transactor } from \"../helpers\";\nimport Address from \"./Address\";\nimport Balance from \"./Balance\";\nimport AddressInput from \"./AddressInput\";\nimport EtherInput from \"./EtherInput\";\nimport { ethers } from \"ethers\";\nconst { Text, Paragraph } = Typography;\n\n/*\n\n  Wallet UI for sending, receiving, and extracting the burner wallet\n\n  <Wallet\n    address={address}\n    provider={userProvider}\n    ensProvider={mainnetProvider}\n    price={price}\n  />\n\n*/\n\nexport default function Wallet(props) {\n  const signerAddress = useUserAddress(props.provider);\n  const selectedAddress = props.address || signerAddress;\n\n  const [open, setOpen] = useState();\n  const [qr, setQr] = useState();\n  const [amount, setAmount] = useState();\n  const [toAddress, setToAddress] = useState();\n  const [pk, setPK] = useState()\n\n  const providerSend = props.provider ? (\n    <Tooltip title=\"Wallet\">\n      <WalletOutlined\n        onClick={() => {\n          setOpen(!open);\n        }}\n        rotate={-90}\n        style={{\n          padding: 7,\n          color: props.color ? props.color : \"#1890ff\",\n          cursor: \"pointer\",\n          fontSize: 28,\n          verticalAlign: \"middle\",\n        }}\n      />\n    </Tooltip>\n  ) : (\n    \"\"\n  );\n\n  let display;\n  let receiveButton;\n  let privateKeyButton\n  if (qr) {\n    display = (\n      <div>\n        <div>\n          <Text copyable>{selectedAddress}</Text>\n        </div>\n        <QR\n          value={selectedAddress}\n          size=\"450\"\n          level=\"H\"\n          includeMargin\n          renderAs=\"svg\"\n          imageSettings={{ excavate: false }}\n        />\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setQr(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Hide\n      </Button>\n    );\n    privateKeyButton = (\n     <Button key=\"hide\" onClick={()=>{setPK(selectedAddress);setQr(\"\")}}>\n       <KeyOutlined /> Private Key\n     </Button>\n   )\n }else if(pk){\n\n   let pk = localStorage.getItem(\"metaPrivateKey\")\n   let wallet = new ethers.Wallet(pk)\n\n   if(wallet.address!=selectedAddress){\n     display = (\n       <div>\n         <b>*injected account*, private key unknown</b>\n       </div>\n     )\n   }else{\n     display = (\n       <div>\n         <b>Private Key:</b>\n\n         <div>\n          <Text copyable>{pk}</Text>\n          </div>\n\n          <hr/>\n\n         <i>Point your camera phone at qr code to open in <a target=\"_blank\" href={\"https://xdai.io/\"+pk}>burner wallet</a>:</i>\n         <QR value={\"https://xdai.io/\"+pk} size={\"450\"} level={\"H\"} includeMargin={true} renderAs={\"svg\"} imageSettings={{excavate:false}}/>\n\n         <Paragraph style={{fontSize:\"16\"}} copyable>{\"https://xdai.io/\"+pk}</Paragraph>\n\n\n       </div>\n     )\n   }\n\n   receiveButton = (\n     <Button key=\"receive\" onClick={()=>{setQr(selectedAddress);setPK(\"\")}}>\n       <QrcodeOutlined /> Receive\n     </Button>\n   )\n   privateKeyButton = (\n     <Button key=\"hide\" onClick={()=>{setPK(\"\");setQr(\"\")}}>\n       <KeyOutlined /> Hide\n     </Button>\n   )\n  } else {\n    const inputStyle = {\n      padding: 10,\n    };\n\n    display = (\n      <div>\n        <div style={inputStyle}>\n          <AddressInput\n            autoFocus\n            ensProvider={props.ensProvider}\n            placeholder=\"to address\"\n            value={toAddress}\n            onChange={setToAddress}\n          />\n        </div>\n        <div style={inputStyle}>\n          <EtherInput\n            price={props.price}\n            value={amount}\n            onChange={value => {\n              setAmount(value);\n            }}\n          />\n        </div>\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button key=\"hide\" onClick={()=>{setPK(selectedAddress);setQr(\"\")}}>\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  }\n\n  return (\n    <span>\n      {providerSend}\n      <Modal\n        visible={open}\n        title={\n          <div>\n            {selectedAddress ? <Address value={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\n            <div style={{ float: \"right\", paddingRight: 25 }}>\n              <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\n            </div>\n          </div>\n        }\n        onOk={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        onCancel={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        footer={[\n          privateKeyButton, receiveButton,\n          <Button\n            key=\"submit\"\n            type=\"primary\"\n            disabled={!amount || !toAddress || qr}\n            loading={false}\n            onClick={() => {\n              const tx = Transactor(props.provider);\n\n              let value;\n              try {\n                value = parseEther(\"\" + amount);\n              } catch (e) {\n                // failed to parseEther, try something else\n                value = parseEther(\"\" + parseFloat(amount).toFixed(8));\n              }\n\n              tx({\n                to: toAddress,\n                value,\n              });\n              setOpen(!open);\n              setQr();\n            }}\n          >\n            <SendOutlined /> Send\n          </Button>,\n        ]}\n      >\n        {display}\n      </Modal>\n    </span>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}