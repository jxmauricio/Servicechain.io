import 'regenerator-runtime/runtime';
import uuid from 'uuid/v4';
import debounce from 'lodash.debounce';
import BigNumber from 'bignumber.js';
import BlocknativeSdk from 'bnc-sdk';

// gutted from https://github.com/Polymer/observe-js/blob/master/src/observe.js
function noop () {}
function detectEval () {
  // Don't test for eval if we're running in a Chrome App environment.
  // We check for APIs set that only exist in a Chrome App context.
  if (typeof chrome !== 'undefined' && chrome.app && chrome.app.runtime) {
    return false
  }

  // Firefox OS Apps do not allow eval. This feature detection is very hacky
  // but even if some other platform adds support for this function this code
  // will continue to work.
  if (typeof navigator != 'undefined' && navigator.getDeviceStorage) {
    return false
  }

  try {
    var f = new Function('', 'return true;');
    return f()
  } catch (ex) {
    return false
  }
}

var hasEval = detectEval();

function isIndex (s) {
  return +s === s >>> 0 && s !== ''
}

function isObject (obj) {
  return obj === Object(obj)
}

var createObject = ('__proto__' in {}) ?
  function (obj) {
    return obj
  } :
  function (obj) {
    var proto = obj.__proto__;
    if (!proto)
      return obj
    var newObject = Object.create(proto);
    Object.getOwnPropertyNames(obj).forEach(function (name) {
      Object.defineProperty(newObject, name,
        Object.getOwnPropertyDescriptor(obj, name));
    });
    return newObject
  };

function parsePath (path) {
  var keys = [];
  var index = -1;
  var c, newChar, key, type, transition, action, typeMap, mode = 'beforePath';

  var actions = {
    push: function () {
      if (key === undefined)
        return

      keys.push(key);
      key = undefined;
    },

    append: function () {
      if (key === undefined)
        key = newChar;
      else
        key += newChar;
    }
  };

  function maybeUnescapeQuote () {
    if (index >= path.length)
      return

    var nextChar = path[index + 1];
    if ((mode == 'inSingleQuote' && nextChar == "'") ||
      (mode == 'inDoubleQuote' && nextChar == '"')) {
      index++;
      newChar = nextChar;
      actions.append();
      return true
    }
  }

  while (mode) {
    index++;
    c = path[index];

    if (c == '\\' && maybeUnescapeQuote())
      continue

    type = getPathCharType(c);
    typeMap = pathStateMachine[mode];
    transition = typeMap[type] || typeMap['else'] || 'error';

    if (transition == 'error')
      return // parse error

    mode = transition[0];
    action = actions[transition[1]] || noop;
    newChar = transition[2] === undefined ? c : transition[2];
    action();

    if (mode === 'afterPath') {
      return keys
    }
  }

  return // parse error
}

var identStart = '[\$_a-zA-Z]';
var identPart = '[\$_a-zA-Z0-9]';
var identRegExp = new RegExp('^' + identStart + '+' + identPart + '*' + '$');

function isIdent (s) {
  return identRegExp.test(s)
}

var constructorIsPrivate = {};

function Path (parts, privateToken) {
  if (privateToken !== constructorIsPrivate)
    throw Error('Use Path.get to retrieve path objects')

  for (var i = 0; i < parts.length; i++) {
    this.push(String(parts[i]));
  }

  if (hasEval && this.length) {
    this.getValueFrom = this.compiledGetValueFromFn();
  }
}

var pathCache = {};

function getPath (pathString) {
  if (pathString instanceof Path)
    return pathString

  if (pathString == null || pathString.length == 0)
    pathString = '';

  if (typeof pathString != 'string') {
    if (isIndex(pathString.length)) {
      // Constructed with array-like (pre-parsed) keys
      return new Path(pathString, constructorIsPrivate)
    }

    pathString = String(pathString);
  }

  var path = pathCache[pathString];
  if (path)
    return path

  var parts = parsePath(pathString);
  if (!parts)
    return invalidPath

  var path = new Path(parts, constructorIsPrivate);
  pathCache[pathString] = path;
  return path
}

Path.get = getPath;

function formatAccessor (key) {
  if (isIndex(key)) {
    return '[' + key + ']'
  } else {
    return '["' + key.replace(/"/g, '\\"') + '"]'
  }
}

Path.prototype = createObject({
  __proto__: [],
  valid: true,

  toString: function () {
    var pathString = '';
    for (var i = 0; i < this.length; i++) {
      var key = this[i];
      if (isIdent(key)) {
        pathString += i ? '.' + key : key;
      } else {
        pathString += formatAccessor(key);
      }
    }

    return pathString
  },

  getValueFrom: function (obj, directObserver) {
    for (var i = 0; i < this.length; i++) {
      if (obj == null)
        return
      obj = obj[this[i]];
    }
    return obj
  },

  iterateObjects: function (obj, observe) {
    for (var i = 0; i < this.length; i++) {
      if (i)
        obj = obj[this[i - 1]];
      if (!isObject(obj))
        return
      observe(obj, this[i]);
    }
  },

  compiledGetValueFromFn: function () {
    var str = '';
    var pathString = 'obj';
    str += 'if (obj != null';
    var i = 0;
    var key;
    for (; i < (this.length - 1); i++) {
      key = this[i];
      pathString += isIdent(key) ? '.' + key : formatAccessor(key);
      str += ' &&\n     ' + pathString + ' != null';
    }
    str += ')\n';

    var key = this[i];
    pathString += isIdent(key) ? '.' + key : formatAccessor(key);

    str += '  return ' + pathString + ';\nelse\n  return undefined;';
    return new Function('obj', str)
  },

  setValueFrom: function (obj, value) {
    if (!this.length)
      return false

    for (var i = 0; i < this.length - 1; i++) {
      if (!isObject(obj))
        return false
      obj = obj[this[i]];
    }

    if (!isObject(obj))
      return false

    obj[this[i]] = value;
    return true
  }
});

function getPathCharType (char) {
  if (char === undefined)
    return 'eof'

  var code = char.charCodeAt(0);

  switch (code) {
    case 0x5B: // [
    case 0x5D: // ]
    case 0x2E: // .
    case 0x22: // "
    case 0x27: // '
    case 0x30: // 0
      return char

    case 0x5F: // _
    case 0x24: // $
      return 'ident'

    case 0x20: // Space
    case 0x09: // Tab
    case 0x0A: // Newline
    case 0x0D: // Return
    case 0xA0: // No-break space
    case 0xFEFF: // Byte Order Mark
    case 0x2028: // Line Separator
    case 0x2029: // Paragraph Separator
      return 'ws'
  }

  // a-z, A-Z
  if ((0x61 <= code && code <= 0x7A) || (0x41 <= code && code <= 0x5A))
    return 'ident'

  // 1-9
  if (0x31 <= code && code <= 0x39)
    return 'number'

  return 'else'
}

var pathStateMachine = {
  'beforePath': {
    'ws': ['beforePath'],
    'ident': ['inIdent', 'append'],
    '[': ['beforeElement'],
    'eof': ['afterPath']
  },

  'inPath': {
    'ws': ['inPath'],
    '.': ['beforeIdent'],
    '[': ['beforeElement'],
    'eof': ['afterPath']
  },

  'beforeIdent': {
    'ws': ['beforeIdent'],
    'ident': ['inIdent', 'append']
  },

  'inIdent': {
    'ident': ['inIdent', 'append'],
    '0': ['inIdent', 'append'],
    'number': ['inIdent', 'append'],
    'ws': ['inPath', 'push'],
    '.': ['beforeIdent', 'push'],
    '[': ['beforeElement', 'push'],
    'eof': ['afterPath', 'push']
  },

  'beforeElement': {
    'ws': ['beforeElement'],
    '0': ['afterZero', 'append'],
    'number': ['inIndex', 'append'],
    "'": ['inSingleQuote', 'append', ''],
    '"': ['inDoubleQuote', 'append', '']
  },

  'afterZero': {
    'ws': ['afterElement', 'push'],
    ']': ['inPath', 'push']
  },

  'inIndex': {
    '0': ['inIndex', 'append'],
    'number': ['inIndex', 'append'],
    'ws': ['afterElement'],
    ']': ['inPath', 'push']
  },

  'inSingleQuote': {
    "'": ['afterElement'],
    'eof': ['error'],
    'else': ['inSingleQuote', 'append']
  },

  'inDoubleQuote': {
    '"': ['afterElement'],
    'eof': ['error'],
    'else': ['inDoubleQuote', 'append']
  },

  'afterElement': {
    'ws': ['afterElement'],
    ']': ['inPath', 'push']
  }
};

var invalidPath = new Path('', constructorIsPrivate);
invalidPath.valid = false;
invalidPath.getValueFrom = invalidPath.setValueFrom = function () {};

var path = Path;

/**
 *
 * @param {Object} o
 * @param {String} path
 * @returns {*}
 */
var objectResolvePath = function (o, path$1) {
  if (typeof path$1 !== 'string') {
    throw new TypeError('path must be a string')
  }
  if (typeof o !== 'object') {
    throw new TypeError('object must be passed')
  }
  var pathObj = path.get(path$1);
  if (!pathObj.valid) {
    throw new Error('path is not a valid object path')
  }
  return pathObj.getValueFrom(o)
};

var TYPE;
(function (TYPE) {
    /**
     * Raw text
     */
    TYPE[TYPE["literal"] = 0] = "literal";
    /**
     * Variable w/o any format, e.g `var` in `this is a {var}`
     */
    TYPE[TYPE["argument"] = 1] = "argument";
    /**
     * Variable w/ number format
     */
    TYPE[TYPE["number"] = 2] = "number";
    /**
     * Variable w/ date format
     */
    TYPE[TYPE["date"] = 3] = "date";
    /**
     * Variable w/ time format
     */
    TYPE[TYPE["time"] = 4] = "time";
    /**
     * Variable w/ select format
     */
    TYPE[TYPE["select"] = 5] = "select";
    /**
     * Variable w/ plural format
     */
    TYPE[TYPE["plural"] = 6] = "plural";
    /**
     * Only possible within plural argument.
     * This is the `#` symbol that will be substituted with the count.
     */
    TYPE[TYPE["pound"] = 7] = "pound";
})(TYPE || (TYPE = {}));
/**
 * Type Guards
 */
function isLiteralElement(el) {
    return el.type === TYPE.literal;
}
function isArgumentElement(el) {
    return el.type === TYPE.argument;
}
function isNumberElement(el) {
    return el.type === TYPE.number;
}
function isDateElement(el) {
    return el.type === TYPE.date;
}
function isTimeElement(el) {
    return el.type === TYPE.time;
}
function isSelectElement(el) {
    return el.type === TYPE.select;
}
function isPluralElement(el) {
    return el.type === TYPE.plural;
}
function isPoundElement(el) {
    return el.type === TYPE.pound;
}
function isNumberSkeleton(el) {
    return !!(el && typeof el === 'object' && el.type === 0 /* number */);
}
function isDateTimeSkeleton(el) {
    return !!(el && typeof el === 'object' && el.type === 1 /* dateTime */);
}

// tslint:disable:only-arrow-functions
// tslint:disable:object-literal-shorthand
// tslint:disable:trailing-comma
// tslint:disable:object-literal-sort-keys
// tslint:disable:one-variable-per-declaration
// tslint:disable:max-line-length
// tslint:disable:no-consecutive-blank-lines
// tslint:disable:align
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var SyntaxError = /** @class */ (function (_super) {
    __extends(SyntaxError, _super);
    function SyntaxError(message, expected, found, location) {
        var _this = _super.call(this) || this;
        _this.message = message;
        _this.expected = expected;
        _this.found = found;
        _this.location = location;
        _this.name = "SyntaxError";
        if (typeof Error.captureStackTrace === "function") {
            Error.captureStackTrace(_this, SyntaxError);
        }
        return _this;
    }
    SyntaxError.buildMessage = function (expected, found) {
        function hex(ch) {
            return ch.charCodeAt(0).toString(16).toUpperCase();
        }
        function literalEscape(s) {
            return s
                .replace(/\\/g, "\\\\")
                .replace(/"/g, "\\\"")
                .replace(/\0/g, "\\0")
                .replace(/\t/g, "\\t")
                .replace(/\n/g, "\\n")
                .replace(/\r/g, "\\r")
                .replace(/[\x00-\x0F]/g, function (ch) { return "\\x0" + hex(ch); })
                .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) { return "\\x" + hex(ch); });
        }
        function classEscape(s) {
            return s
                .replace(/\\/g, "\\\\")
                .replace(/\]/g, "\\]")
                .replace(/\^/g, "\\^")
                .replace(/-/g, "\\-")
                .replace(/\0/g, "\\0")
                .replace(/\t/g, "\\t")
                .replace(/\n/g, "\\n")
                .replace(/\r/g, "\\r")
                .replace(/[\x00-\x0F]/g, function (ch) { return "\\x0" + hex(ch); })
                .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) { return "\\x" + hex(ch); });
        }
        function describeExpectation(expectation) {
            switch (expectation.type) {
                case "literal":
                    return "\"" + literalEscape(expectation.text) + "\"";
                case "class":
                    var escapedParts = expectation.parts.map(function (part) {
                        return Array.isArray(part)
                            ? classEscape(part[0]) + "-" + classEscape(part[1])
                            : classEscape(part);
                    });
                    return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
                case "any":
                    return "any character";
                case "end":
                    return "end of input";
                case "other":
                    return expectation.description;
            }
        }
        function describeExpected(expected1) {
            var descriptions = expected1.map(describeExpectation);
            var i;
            var j;
            descriptions.sort();
            if (descriptions.length > 0) {
                for (i = 1, j = 1; i < descriptions.length; i++) {
                    if (descriptions[i - 1] !== descriptions[i]) {
                        descriptions[j] = descriptions[i];
                        j++;
                    }
                }
                descriptions.length = j;
            }
            switch (descriptions.length) {
                case 1:
                    return descriptions[0];
                case 2:
                    return descriptions[0] + " or " + descriptions[1];
                default:
                    return descriptions.slice(0, -1).join(", ")
                        + ", or "
                        + descriptions[descriptions.length - 1];
            }
        }
        function describeFound(found1) {
            return found1 ? "\"" + literalEscape(found1) + "\"" : "end of input";
        }
        return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
    };
    return SyntaxError;
}(Error));
function peg$parse(input, options) {
    options = options !== undefined ? options : {};
    var peg$FAILED = {};
    var peg$startRuleFunctions = { start: peg$parsestart };
    var peg$startRuleFunction = peg$parsestart;
    var peg$c0 = function (parts) {
        return parts.join('');
    };
    var peg$c1 = function (messageText) {
        return __assign({ type: TYPE.literal, value: messageText }, insertLocation());
    };
    var peg$c2 = "#";
    var peg$c3 = peg$literalExpectation("#", false);
    var peg$c4 = function () {
        return __assign({ type: TYPE.pound }, insertLocation());
    };
    var peg$c5 = peg$otherExpectation("argumentElement");
    var peg$c6 = "{";
    var peg$c7 = peg$literalExpectation("{", false);
    var peg$c8 = "}";
    var peg$c9 = peg$literalExpectation("}", false);
    var peg$c10 = function (value) {
        return __assign({ type: TYPE.argument, value: value }, insertLocation());
    };
    var peg$c11 = peg$otherExpectation("numberSkeletonId");
    var peg$c12 = /^['\/{}]/;
    var peg$c13 = peg$classExpectation(["'", "/", "{", "}"], false, false);
    var peg$c14 = peg$anyExpectation();
    var peg$c15 = peg$otherExpectation("numberSkeletonTokenOption");
    var peg$c16 = "/";
    var peg$c17 = peg$literalExpectation("/", false);
    var peg$c18 = function (option) { return option; };
    var peg$c19 = peg$otherExpectation("numberSkeletonToken");
    var peg$c20 = function (stem, options) {
        return { stem: stem, options: options };
    };
    var peg$c21 = function (tokens) {
        return __assign({ type: 0 /* number */, tokens: tokens }, insertLocation());
    };
    var peg$c22 = "::";
    var peg$c23 = peg$literalExpectation("::", false);
    var peg$c24 = function (skeleton) { return skeleton; };
    var peg$c25 = function () { messageCtx.push('numberArgStyle'); return true; };
    var peg$c26 = function (style) {
        messageCtx.pop();
        return style.replace(/\s*$/, '');
    };
    var peg$c27 = ",";
    var peg$c28 = peg$literalExpectation(",", false);
    var peg$c29 = "number";
    var peg$c30 = peg$literalExpectation("number", false);
    var peg$c31 = function (value, type, style) {
        return __assign({ type: type === 'number' ? TYPE.number : type === 'date' ? TYPE.date : TYPE.time, style: style && style[2], value: value }, insertLocation());
    };
    var peg$c32 = "'";
    var peg$c33 = peg$literalExpectation("'", false);
    var peg$c34 = /^[^']/;
    var peg$c35 = peg$classExpectation(["'"], true, false);
    var peg$c36 = /^[^a-zA-Z'{}]/;
    var peg$c37 = peg$classExpectation([["a", "z"], ["A", "Z"], "'", "{", "}"], true, false);
    var peg$c38 = /^[a-zA-Z]/;
    var peg$c39 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false);
    var peg$c40 = function (pattern) {
        return __assign({ type: 1 /* dateTime */, pattern: pattern }, insertLocation());
    };
    var peg$c41 = function () { messageCtx.push('dateOrTimeArgStyle'); return true; };
    var peg$c42 = "date";
    var peg$c43 = peg$literalExpectation("date", false);
    var peg$c44 = "time";
    var peg$c45 = peg$literalExpectation("time", false);
    var peg$c46 = "plural";
    var peg$c47 = peg$literalExpectation("plural", false);
    var peg$c48 = "selectordinal";
    var peg$c49 = peg$literalExpectation("selectordinal", false);
    var peg$c50 = "offset:";
    var peg$c51 = peg$literalExpectation("offset:", false);
    var peg$c52 = function (value, pluralType, offset, options) {
        return __assign({ type: TYPE.plural, pluralType: pluralType === 'plural' ? 'cardinal' : 'ordinal', value: value, offset: offset ? offset[2] : 0, options: options.reduce(function (all, _a) {
                var id = _a.id, value = _a.value, optionLocation = _a.location;
                if (id in all) {
                    error("Duplicate option \"" + id + "\" in plural element: \"" + text() + "\"", location());
                }
                all[id] = {
                    value: value,
                    location: optionLocation
                };
                return all;
            }, {}) }, insertLocation());
    };
    var peg$c53 = "select";
    var peg$c54 = peg$literalExpectation("select", false);
    var peg$c55 = function (value, options) {
        return __assign({ type: TYPE.select, value: value, options: options.reduce(function (all, _a) {
                var id = _a.id, value = _a.value, optionLocation = _a.location;
                if (id in all) {
                    error("Duplicate option \"" + id + "\" in select element: \"" + text() + "\"", location());
                }
                all[id] = {
                    value: value,
                    location: optionLocation
                };
                return all;
            }, {}) }, insertLocation());
    };
    var peg$c56 = "=";
    var peg$c57 = peg$literalExpectation("=", false);
    var peg$c58 = function (id) { messageCtx.push('select'); return true; };
    var peg$c59 = function (id, value) {
        messageCtx.pop();
        return __assign({ id: id,
            value: value }, insertLocation());
    };
    var peg$c60 = function (id) { messageCtx.push('plural'); return true; };
    var peg$c61 = function (id, value) {
        messageCtx.pop();
        return __assign({ id: id,
            value: value }, insertLocation());
    };
    var peg$c62 = peg$otherExpectation("whitespace");
    var peg$c63 = /^[\t-\r \x85\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/;
    var peg$c64 = peg$classExpectation([["\t", "\r"], " ", "\x85", "\xA0", "\u1680", ["\u2000", "\u200A"], "\u2028", "\u2029", "\u202F", "\u205F", "\u3000"], false, false);
    var peg$c65 = peg$otherExpectation("syntax pattern");
    var peg$c66 = /^[!-\/:-@[-\^`{-~\xA1-\xA7\xA9\xAB\xAC\xAE\xB0\xB1\xB6\xBB\xBF\xD7\xF7\u2010-\u2027\u2030-\u203E\u2041-\u2053\u2055-\u205E\u2190-\u245F\u2500-\u2775\u2794-\u2BFF\u2E00-\u2E7F\u3001-\u3003\u3008-\u3020\u3030\uFD3E\uFD3F\uFE45\uFE46]/;
    var peg$c67 = peg$classExpectation([["!", "/"], [":", "@"], ["[", "^"], "`", ["{", "~"], ["\xA1", "\xA7"], "\xA9", "\xAB", "\xAC", "\xAE", "\xB0", "\xB1", "\xB6", "\xBB", "\xBF", "\xD7", "\xF7", ["\u2010", "\u2027"], ["\u2030", "\u203E"], ["\u2041", "\u2053"], ["\u2055", "\u205E"], ["\u2190", "\u245F"], ["\u2500", "\u2775"], ["\u2794", "\u2BFF"], ["\u2E00", "\u2E7F"], ["\u3001", "\u3003"], ["\u3008", "\u3020"], "\u3030", "\uFD3E", "\uFD3F", "\uFE45", "\uFE46"], false, false);
    var peg$c68 = peg$otherExpectation("optional whitespace");
    var peg$c69 = peg$otherExpectation("number");
    var peg$c70 = "-";
    var peg$c71 = peg$literalExpectation("-", false);
    var peg$c72 = function (negative, num) {
        return num
            ? negative
                ? -num
                : num
            : 0;
    };
    var peg$c74 = peg$otherExpectation("double apostrophes");
    var peg$c75 = "''";
    var peg$c76 = peg$literalExpectation("''", false);
    var peg$c77 = function () { return "'"; };
    var peg$c78 = function (escapedChar, quotedChars) {
        return escapedChar + quotedChars.replace("''", "'");
    };
    var peg$c79 = function (x) {
        return (x !== '{' &&
            !(isInPluralOption() && x === '#') &&
            !(isNestedMessageText() && x === '}'));
    };
    var peg$c80 = "\n";
    var peg$c81 = peg$literalExpectation("\n", false);
    var peg$c82 = function (x) {
        return x === '{' || x === '}' || (isInPluralOption() && x === '#');
    };
    var peg$c83 = peg$otherExpectation("argNameOrNumber");
    var peg$c84 = peg$otherExpectation("argNumber");
    var peg$c85 = "0";
    var peg$c86 = peg$literalExpectation("0", false);
    var peg$c87 = function () { return 0; };
    var peg$c88 = /^[1-9]/;
    var peg$c89 = peg$classExpectation([["1", "9"]], false, false);
    var peg$c90 = /^[0-9]/;
    var peg$c91 = peg$classExpectation([["0", "9"]], false, false);
    var peg$c92 = function (digits) {
        return parseInt(digits.join(''), 10);
    };
    var peg$c93 = peg$otherExpectation("argName");
    var peg$currPos = 0;
    var peg$savedPos = 0;
    var peg$posDetailsCache = [{ line: 1, column: 1 }];
    var peg$maxFailPos = 0;
    var peg$maxFailExpected = [];
    var peg$silentFails = 0;
    var peg$result;
    if (options.startRule !== undefined) {
        if (!(options.startRule in peg$startRuleFunctions)) {
            throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
        }
        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }
    function text() {
        return input.substring(peg$savedPos, peg$currPos);
    }
    function location() {
        return peg$computeLocation(peg$savedPos, peg$currPos);
    }
    function error(message, location1) {
        location1 = location1 !== undefined
            ? location1
            : peg$computeLocation(peg$savedPos, peg$currPos);
        throw peg$buildSimpleError(message, location1);
    }
    function peg$literalExpectation(text1, ignoreCase) {
        return { type: "literal", text: text1, ignoreCase: ignoreCase };
    }
    function peg$classExpectation(parts, inverted, ignoreCase) {
        return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }
    function peg$anyExpectation() {
        return { type: "any" };
    }
    function peg$endExpectation() {
        return { type: "end" };
    }
    function peg$otherExpectation(description) {
        return { type: "other", description: description };
    }
    function peg$computePosDetails(pos) {
        var details = peg$posDetailsCache[pos];
        var p;
        if (details) {
            return details;
        }
        else {
            p = pos - 1;
            while (!peg$posDetailsCache[p]) {
                p--;
            }
            details = peg$posDetailsCache[p];
            details = {
                line: details.line,
                column: details.column
            };
            while (p < pos) {
                if (input.charCodeAt(p) === 10) {
                    details.line++;
                    details.column = 1;
                }
                else {
                    details.column++;
                }
                p++;
            }
            peg$posDetailsCache[pos] = details;
            return details;
        }
    }
    function peg$computeLocation(startPos, endPos) {
        var startPosDetails = peg$computePosDetails(startPos);
        var endPosDetails = peg$computePosDetails(endPos);
        return {
            start: {
                offset: startPos,
                line: startPosDetails.line,
                column: startPosDetails.column
            },
            end: {
                offset: endPos,
                line: endPosDetails.line,
                column: endPosDetails.column
            }
        };
    }
    function peg$fail(expected1) {
        if (peg$currPos < peg$maxFailPos) {
            return;
        }
        if (peg$currPos > peg$maxFailPos) {
            peg$maxFailPos = peg$currPos;
            peg$maxFailExpected = [];
        }
        peg$maxFailExpected.push(expected1);
    }
    function peg$buildSimpleError(message, location1) {
        return new SyntaxError(message, [], "", location1);
    }
    function peg$buildStructuredError(expected1, found, location1) {
        return new SyntaxError(SyntaxError.buildMessage(expected1, found), expected1, found, location1);
    }
    function peg$parsestart() {
        var s0;
        s0 = peg$parsemessage();
        return s0;
    }
    function peg$parsemessage() {
        var s0, s1;
        s0 = [];
        s1 = peg$parsemessageElement();
        while (s1 !== peg$FAILED) {
            s0.push(s1);
            s1 = peg$parsemessageElement();
        }
        return s0;
    }
    function peg$parsemessageElement() {
        var s0;
        s0 = peg$parseliteralElement();
        if (s0 === peg$FAILED) {
            s0 = peg$parseargumentElement();
            if (s0 === peg$FAILED) {
                s0 = peg$parsesimpleFormatElement();
                if (s0 === peg$FAILED) {
                    s0 = peg$parsepluralElement();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseselectElement();
                        if (s0 === peg$FAILED) {
                            s0 = peg$parsepoundElement();
                        }
                    }
                }
            }
        }
        return s0;
    }
    function peg$parsemessageText() {
        var s0, s1, s2;
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parsedoubleApostrophes();
        if (s2 === peg$FAILED) {
            s2 = peg$parsequotedString();
            if (s2 === peg$FAILED) {
                s2 = peg$parseunquotedString();
            }
        }
        if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parsedoubleApostrophes();
                if (s2 === peg$FAILED) {
                    s2 = peg$parsequotedString();
                    if (s2 === peg$FAILED) {
                        s2 = peg$parseunquotedString();
                    }
                }
            }
        }
        else {
            s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c0(s1);
        }
        s0 = s1;
        return s0;
    }
    function peg$parseliteralElement() {
        var s0, s1;
        s0 = peg$currPos;
        s1 = peg$parsemessageText();
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c1(s1);
        }
        s0 = s1;
        return s0;
    }
    function peg$parsepoundElement() {
        var s0, s1;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 35) {
            s1 = peg$c2;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c3);
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c4();
        }
        s0 = s1;
        return s0;
    }
    function peg$parseargumentElement() {
        var s0, s1, s2, s3, s4, s5;
        peg$silentFails++;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
            s1 = peg$c6;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c7);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
                s3 = peg$parseargNameOrNumber();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 125) {
                            s5 = peg$c8;
                            peg$currPos++;
                        }
                        else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c9);
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c10(s3);
                            s0 = s1;
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c5);
            }
        }
        return s0;
    }
    function peg$parsenumberSkeletonId() {
        var s0, s1, s2, s3, s4;
        peg$silentFails++;
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$currPos;
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parsewhiteSpace();
        if (s4 === peg$FAILED) {
            if (peg$c12.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
            }
            else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c13);
                }
            }
        }
        peg$silentFails--;
        if (s4 === peg$FAILED) {
            s3 = undefined;
        }
        else {
            peg$currPos = s3;
            s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
            if (input.length > peg$currPos) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
            }
            else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c14);
                }
            }
            if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
            }
            else {
                peg$currPos = s2;
                s2 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s2;
            s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$currPos;
                s3 = peg$currPos;
                peg$silentFails++;
                s4 = peg$parsewhiteSpace();
                if (s4 === peg$FAILED) {
                    if (peg$c12.test(input.charAt(peg$currPos))) {
                        s4 = input.charAt(peg$currPos);
                        peg$currPos++;
                    }
                    else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c13);
                        }
                    }
                }
                peg$silentFails--;
                if (s4 === peg$FAILED) {
                    s3 = undefined;
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                    if (input.length > peg$currPos) {
                        s4 = input.charAt(peg$currPos);
                        peg$currPos++;
                    }
                    else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c14);
                        }
                    }
                    if (s4 !== peg$FAILED) {
                        s3 = [s3, s4];
                        s2 = s3;
                    }
                    else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                }
            }
        }
        else {
            s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
            s0 = input.substring(s0, peg$currPos);
        }
        else {
            s0 = s1;
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c11);
            }
        }
        return s0;
    }
    function peg$parsenumberSkeletonTokenOption() {
        var s0, s1, s2;
        peg$silentFails++;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 47) {
            s1 = peg$c16;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c17);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parsenumberSkeletonId();
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c18(s2);
                s0 = s1;
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c15);
            }
        }
        return s0;
    }
    function peg$parsenumberSkeletonToken() {
        var s0, s1, s2, s3, s4;
        peg$silentFails++;
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
            s2 = peg$parsenumberSkeletonId();
            if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$parsenumberSkeletonTokenOption();
                while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    s4 = peg$parsenumberSkeletonTokenOption();
                }
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c20(s2, s3);
                    s0 = s1;
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c19);
            }
        }
        return s0;
    }
    function peg$parsenumberSkeleton() {
        var s0, s1, s2;
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parsenumberSkeletonToken();
        if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parsenumberSkeletonToken();
            }
        }
        else {
            s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c21(s1);
        }
        s0 = s1;
        return s0;
    }
    function peg$parsenumberArgStyle() {
        var s0, s1, s2;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c22) {
            s1 = peg$c22;
            peg$currPos += 2;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c23);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parsenumberSkeleton();
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c24(s2);
                s0 = s1;
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            peg$savedPos = peg$currPos;
            s1 = peg$c25();
            if (s1) {
                s1 = undefined;
            }
            else {
                s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsemessageText();
                if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c26(s2);
                    s0 = s1;
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        return s0;
    }
    function peg$parsenumberFormatElement() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
            s1 = peg$c6;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c7);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
                s3 = peg$parseargNameOrNumber();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 44) {
                            s5 = peg$c27;
                            peg$currPos++;
                        }
                        else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c28);
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parse_();
                            if (s6 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 6) === peg$c29) {
                                    s7 = peg$c29;
                                    peg$currPos += 6;
                                }
                                else {
                                    s7 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c30);
                                    }
                                }
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parse_();
                                    if (s8 !== peg$FAILED) {
                                        s9 = peg$currPos;
                                        if (input.charCodeAt(peg$currPos) === 44) {
                                            s10 = peg$c27;
                                            peg$currPos++;
                                        }
                                        else {
                                            s10 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c28);
                                            }
                                        }
                                        if (s10 !== peg$FAILED) {
                                            s11 = peg$parse_();
                                            if (s11 !== peg$FAILED) {
                                                s12 = peg$parsenumberArgStyle();
                                                if (s12 !== peg$FAILED) {
                                                    s10 = [s10, s11, s12];
                                                    s9 = s10;
                                                }
                                                else {
                                                    peg$currPos = s9;
                                                    s9 = peg$FAILED;
                                                }
                                            }
                                            else {
                                                peg$currPos = s9;
                                                s9 = peg$FAILED;
                                            }
                                        }
                                        else {
                                            peg$currPos = s9;
                                            s9 = peg$FAILED;
                                        }
                                        if (s9 === peg$FAILED) {
                                            s9 = null;
                                        }
                                        if (s9 !== peg$FAILED) {
                                            s10 = peg$parse_();
                                            if (s10 !== peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 125) {
                                                    s11 = peg$c8;
                                                    peg$currPos++;
                                                }
                                                else {
                                                    s11 = peg$FAILED;
                                                    if (peg$silentFails === 0) {
                                                        peg$fail(peg$c9);
                                                    }
                                                }
                                                if (s11 !== peg$FAILED) {
                                                    peg$savedPos = s0;
                                                    s1 = peg$c31(s3, s7, s9);
                                                    s0 = s1;
                                                }
                                                else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            }
                                            else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        }
                                        else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    }
                                    else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parsedateTimeSkeletonLiteral() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 39) {
            s1 = peg$c32;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c33);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsedoubleApostrophes();
            if (s3 === peg$FAILED) {
                if (peg$c34.test(input.charAt(peg$currPos))) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c35);
                    }
                }
            }
            if (s3 !== peg$FAILED) {
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parsedoubleApostrophes();
                    if (s3 === peg$FAILED) {
                        if (peg$c34.test(input.charAt(peg$currPos))) {
                            s3 = input.charAt(peg$currPos);
                            peg$currPos++;
                        }
                        else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c35);
                            }
                        }
                    }
                }
            }
            else {
                s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 39) {
                    s3 = peg$c32;
                    peg$currPos++;
                }
                else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c33);
                    }
                }
                if (s3 !== peg$FAILED) {
                    s1 = [s1, s2, s3];
                    s0 = s1;
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = [];
            s1 = peg$parsedoubleApostrophes();
            if (s1 === peg$FAILED) {
                if (peg$c36.test(input.charAt(peg$currPos))) {
                    s1 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c37);
                    }
                }
            }
            if (s1 !== peg$FAILED) {
                while (s1 !== peg$FAILED) {
                    s0.push(s1);
                    s1 = peg$parsedoubleApostrophes();
                    if (s1 === peg$FAILED) {
                        if (peg$c36.test(input.charAt(peg$currPos))) {
                            s1 = input.charAt(peg$currPos);
                            peg$currPos++;
                        }
                        else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c37);
                            }
                        }
                    }
                }
            }
            else {
                s0 = peg$FAILED;
            }
        }
        return s0;
    }
    function peg$parsedateTimeSkeletonPattern() {
        var s0, s1;
        s0 = [];
        if (peg$c38.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c39);
            }
        }
        if (s1 !== peg$FAILED) {
            while (s1 !== peg$FAILED) {
                s0.push(s1);
                if (peg$c38.test(input.charAt(peg$currPos))) {
                    s1 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c39);
                    }
                }
            }
        }
        else {
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parsedateTimeSkeleton() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = [];
        s3 = peg$parsedateTimeSkeletonLiteral();
        if (s3 === peg$FAILED) {
            s3 = peg$parsedateTimeSkeletonPattern();
        }
        if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parsedateTimeSkeletonLiteral();
                if (s3 === peg$FAILED) {
                    s3 = peg$parsedateTimeSkeletonPattern();
                }
            }
        }
        else {
            s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
            s1 = input.substring(s1, peg$currPos);
        }
        else {
            s1 = s2;
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c40(s1);
        }
        s0 = s1;
        return s0;
    }
    function peg$parsedateOrTimeArgStyle() {
        var s0, s1, s2;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c22) {
            s1 = peg$c22;
            peg$currPos += 2;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c23);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parsedateTimeSkeleton();
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c24(s2);
                s0 = s1;
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            peg$savedPos = peg$currPos;
            s1 = peg$c41();
            if (s1) {
                s1 = undefined;
            }
            else {
                s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsemessageText();
                if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c26(s2);
                    s0 = s1;
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        return s0;
    }
    function peg$parsedateOrTimeFormatElement() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
            s1 = peg$c6;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c7);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
                s3 = peg$parseargNameOrNumber();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 44) {
                            s5 = peg$c27;
                            peg$currPos++;
                        }
                        else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c28);
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parse_();
                            if (s6 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 4) === peg$c42) {
                                    s7 = peg$c42;
                                    peg$currPos += 4;
                                }
                                else {
                                    s7 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c43);
                                    }
                                }
                                if (s7 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 4) === peg$c44) {
                                        s7 = peg$c44;
                                        peg$currPos += 4;
                                    }
                                    else {
                                        s7 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c45);
                                        }
                                    }
                                }
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parse_();
                                    if (s8 !== peg$FAILED) {
                                        s9 = peg$currPos;
                                        if (input.charCodeAt(peg$currPos) === 44) {
                                            s10 = peg$c27;
                                            peg$currPos++;
                                        }
                                        else {
                                            s10 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c28);
                                            }
                                        }
                                        if (s10 !== peg$FAILED) {
                                            s11 = peg$parse_();
                                            if (s11 !== peg$FAILED) {
                                                s12 = peg$parsedateOrTimeArgStyle();
                                                if (s12 !== peg$FAILED) {
                                                    s10 = [s10, s11, s12];
                                                    s9 = s10;
                                                }
                                                else {
                                                    peg$currPos = s9;
                                                    s9 = peg$FAILED;
                                                }
                                            }
                                            else {
                                                peg$currPos = s9;
                                                s9 = peg$FAILED;
                                            }
                                        }
                                        else {
                                            peg$currPos = s9;
                                            s9 = peg$FAILED;
                                        }
                                        if (s9 === peg$FAILED) {
                                            s9 = null;
                                        }
                                        if (s9 !== peg$FAILED) {
                                            s10 = peg$parse_();
                                            if (s10 !== peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 125) {
                                                    s11 = peg$c8;
                                                    peg$currPos++;
                                                }
                                                else {
                                                    s11 = peg$FAILED;
                                                    if (peg$silentFails === 0) {
                                                        peg$fail(peg$c9);
                                                    }
                                                }
                                                if (s11 !== peg$FAILED) {
                                                    peg$savedPos = s0;
                                                    s1 = peg$c31(s3, s7, s9);
                                                    s0 = s1;
                                                }
                                                else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            }
                                            else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        }
                                        else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    }
                                    else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parsesimpleFormatElement() {
        var s0;
        s0 = peg$parsenumberFormatElement();
        if (s0 === peg$FAILED) {
            s0 = peg$parsedateOrTimeFormatElement();
        }
        return s0;
    }
    function peg$parsepluralElement() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
            s1 = peg$c6;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c7);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
                s3 = peg$parseargNameOrNumber();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 44) {
                            s5 = peg$c27;
                            peg$currPos++;
                        }
                        else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c28);
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parse_();
                            if (s6 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 6) === peg$c46) {
                                    s7 = peg$c46;
                                    peg$currPos += 6;
                                }
                                else {
                                    s7 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c47);
                                    }
                                }
                                if (s7 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 13) === peg$c48) {
                                        s7 = peg$c48;
                                        peg$currPos += 13;
                                    }
                                    else {
                                        s7 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c49);
                                        }
                                    }
                                }
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parse_();
                                    if (s8 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 44) {
                                            s9 = peg$c27;
                                            peg$currPos++;
                                        }
                                        else {
                                            s9 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c28);
                                            }
                                        }
                                        if (s9 !== peg$FAILED) {
                                            s10 = peg$parse_();
                                            if (s10 !== peg$FAILED) {
                                                s11 = peg$currPos;
                                                if (input.substr(peg$currPos, 7) === peg$c50) {
                                                    s12 = peg$c50;
                                                    peg$currPos += 7;
                                                }
                                                else {
                                                    s12 = peg$FAILED;
                                                    if (peg$silentFails === 0) {
                                                        peg$fail(peg$c51);
                                                    }
                                                }
                                                if (s12 !== peg$FAILED) {
                                                    s13 = peg$parse_();
                                                    if (s13 !== peg$FAILED) {
                                                        s14 = peg$parsenumber();
                                                        if (s14 !== peg$FAILED) {
                                                            s12 = [s12, s13, s14];
                                                            s11 = s12;
                                                        }
                                                        else {
                                                            peg$currPos = s11;
                                                            s11 = peg$FAILED;
                                                        }
                                                    }
                                                    else {
                                                        peg$currPos = s11;
                                                        s11 = peg$FAILED;
                                                    }
                                                }
                                                else {
                                                    peg$currPos = s11;
                                                    s11 = peg$FAILED;
                                                }
                                                if (s11 === peg$FAILED) {
                                                    s11 = null;
                                                }
                                                if (s11 !== peg$FAILED) {
                                                    s12 = peg$parse_();
                                                    if (s12 !== peg$FAILED) {
                                                        s13 = [];
                                                        s14 = peg$parsepluralOption();
                                                        if (s14 !== peg$FAILED) {
                                                            while (s14 !== peg$FAILED) {
                                                                s13.push(s14);
                                                                s14 = peg$parsepluralOption();
                                                            }
                                                        }
                                                        else {
                                                            s13 = peg$FAILED;
                                                        }
                                                        if (s13 !== peg$FAILED) {
                                                            s14 = peg$parse_();
                                                            if (s14 !== peg$FAILED) {
                                                                if (input.charCodeAt(peg$currPos) === 125) {
                                                                    s15 = peg$c8;
                                                                    peg$currPos++;
                                                                }
                                                                else {
                                                                    s15 = peg$FAILED;
                                                                    if (peg$silentFails === 0) {
                                                                        peg$fail(peg$c9);
                                                                    }
                                                                }
                                                                if (s15 !== peg$FAILED) {
                                                                    peg$savedPos = s0;
                                                                    s1 = peg$c52(s3, s7, s11, s13);
                                                                    s0 = s1;
                                                                }
                                                                else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                }
                                                            }
                                                            else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                            }
                                                        }
                                                        else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    }
                                                    else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                }
                                                else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            }
                                            else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        }
                                        else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    }
                                    else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseselectElement() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
            s1 = peg$c6;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c7);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
                s3 = peg$parseargNameOrNumber();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 44) {
                            s5 = peg$c27;
                            peg$currPos++;
                        }
                        else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c28);
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parse_();
                            if (s6 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 6) === peg$c53) {
                                    s7 = peg$c53;
                                    peg$currPos += 6;
                                }
                                else {
                                    s7 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c54);
                                    }
                                }
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parse_();
                                    if (s8 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 44) {
                                            s9 = peg$c27;
                                            peg$currPos++;
                                        }
                                        else {
                                            s9 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c28);
                                            }
                                        }
                                        if (s9 !== peg$FAILED) {
                                            s10 = peg$parse_();
                                            if (s10 !== peg$FAILED) {
                                                s11 = [];
                                                s12 = peg$parseselectOption();
                                                if (s12 !== peg$FAILED) {
                                                    while (s12 !== peg$FAILED) {
                                                        s11.push(s12);
                                                        s12 = peg$parseselectOption();
                                                    }
                                                }
                                                else {
                                                    s11 = peg$FAILED;
                                                }
                                                if (s11 !== peg$FAILED) {
                                                    s12 = peg$parse_();
                                                    if (s12 !== peg$FAILED) {
                                                        if (input.charCodeAt(peg$currPos) === 125) {
                                                            s13 = peg$c8;
                                                            peg$currPos++;
                                                        }
                                                        else {
                                                            s13 = peg$FAILED;
                                                            if (peg$silentFails === 0) {
                                                                peg$fail(peg$c9);
                                                            }
                                                        }
                                                        if (s13 !== peg$FAILED) {
                                                            peg$savedPos = s0;
                                                            s1 = peg$c55(s3, s11);
                                                            s0 = s1;
                                                        }
                                                        else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    }
                                                    else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                }
                                                else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            }
                                            else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        }
                                        else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    }
                                    else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parsepluralRuleSelectValue() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        s1 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 61) {
            s2 = peg$c56;
            peg$currPos++;
        }
        else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c57);
            }
        }
        if (s2 !== peg$FAILED) {
            s3 = peg$parsenumber();
            if (s3 !== peg$FAILED) {
                s2 = [s2, s3];
                s1 = s2;
            }
            else {
                peg$currPos = s1;
                s1 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s1;
            s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
            s0 = input.substring(s0, peg$currPos);
        }
        else {
            s0 = s1;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$parseargName();
        }
        return s0;
    }
    function peg$parseselectOption() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
            s2 = peg$parseargName();
            if (s2 !== peg$FAILED) {
                s3 = peg$parse_();
                if (s3 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 123) {
                        s4 = peg$c6;
                        peg$currPos++;
                    }
                    else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c7);
                        }
                    }
                    if (s4 !== peg$FAILED) {
                        peg$savedPos = peg$currPos;
                        s5 = peg$c58();
                        if (s5) {
                            s5 = undefined;
                        }
                        else {
                            s5 = peg$FAILED;
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsemessage();
                            if (s6 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 125) {
                                    s7 = peg$c8;
                                    peg$currPos++;
                                }
                                else {
                                    s7 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c9);
                                    }
                                }
                                if (s7 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c59(s2, s6);
                                    s0 = s1;
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parsepluralOption() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
            s2 = peg$parsepluralRuleSelectValue();
            if (s2 !== peg$FAILED) {
                s3 = peg$parse_();
                if (s3 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 123) {
                        s4 = peg$c6;
                        peg$currPos++;
                    }
                    else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c7);
                        }
                    }
                    if (s4 !== peg$FAILED) {
                        peg$savedPos = peg$currPos;
                        s5 = peg$c60();
                        if (s5) {
                            s5 = undefined;
                        }
                        else {
                            s5 = peg$FAILED;
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsemessage();
                            if (s6 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 125) {
                                    s7 = peg$c8;
                                    peg$currPos++;
                                }
                                else {
                                    s7 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c9);
                                    }
                                }
                                if (s7 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c61(s2, s6);
                                    s0 = s1;
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parsewhiteSpace() {
        var s0;
        peg$silentFails++;
        if (peg$c63.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c64);
            }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
            if (peg$silentFails === 0) {
                peg$fail(peg$c62);
            }
        }
        return s0;
    }
    function peg$parsepatternSyntax() {
        var s0;
        peg$silentFails++;
        if (peg$c66.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c67);
            }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
            if (peg$silentFails === 0) {
                peg$fail(peg$c65);
            }
        }
        return s0;
    }
    function peg$parse_() {
        var s0, s1, s2;
        peg$silentFails++;
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parsewhiteSpace();
        while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parsewhiteSpace();
        }
        if (s1 !== peg$FAILED) {
            s0 = input.substring(s0, peg$currPos);
        }
        else {
            s0 = s1;
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c68);
            }
        }
        return s0;
    }
    function peg$parsenumber() {
        var s0, s1, s2;
        peg$silentFails++;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 45) {
            s1 = peg$c70;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c71);
            }
        }
        if (s1 === peg$FAILED) {
            s1 = null;
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parseargNumber();
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c72(s1, s2);
                s0 = s1;
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c69);
            }
        }
        return s0;
    }
    function peg$parsedoubleApostrophes() {
        var s0, s1;
        peg$silentFails++;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c75) {
            s1 = peg$c75;
            peg$currPos += 2;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c76);
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c77();
        }
        s0 = s1;
        peg$silentFails--;
        if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c74);
            }
        }
        return s0;
    }
    function peg$parsequotedString() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 39) {
            s1 = peg$c32;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c33);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parseescapedChar();
            if (s2 !== peg$FAILED) {
                s3 = peg$currPos;
                s4 = [];
                if (input.substr(peg$currPos, 2) === peg$c75) {
                    s5 = peg$c75;
                    peg$currPos += 2;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c76);
                    }
                }
                if (s5 === peg$FAILED) {
                    if (peg$c34.test(input.charAt(peg$currPos))) {
                        s5 = input.charAt(peg$currPos);
                        peg$currPos++;
                    }
                    else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c35);
                        }
                    }
                }
                while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    if (input.substr(peg$currPos, 2) === peg$c75) {
                        s5 = peg$c75;
                        peg$currPos += 2;
                    }
                    else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c76);
                        }
                    }
                    if (s5 === peg$FAILED) {
                        if (peg$c34.test(input.charAt(peg$currPos))) {
                            s5 = input.charAt(peg$currPos);
                            peg$currPos++;
                        }
                        else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c35);
                            }
                        }
                    }
                }
                if (s4 !== peg$FAILED) {
                    s3 = input.substring(s3, peg$currPos);
                }
                else {
                    s3 = s4;
                }
                if (s3 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 39) {
                        s4 = peg$c32;
                        peg$currPos++;
                    }
                    else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c33);
                        }
                    }
                    if (s4 === peg$FAILED) {
                        s4 = null;
                    }
                    if (s4 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c78(s2, s3);
                        s0 = s1;
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseunquotedString() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        s1 = peg$currPos;
        if (input.length > peg$currPos) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
        }
        else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c14);
            }
        }
        if (s2 !== peg$FAILED) {
            peg$savedPos = peg$currPos;
            s3 = peg$c79(s2);
            if (s3) {
                s3 = undefined;
            }
            else {
                s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
                s2 = [s2, s3];
                s1 = s2;
            }
            else {
                peg$currPos = s1;
                s1 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s1;
            s1 = peg$FAILED;
        }
        if (s1 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 10) {
                s1 = peg$c80;
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c81);
                }
            }
        }
        if (s1 !== peg$FAILED) {
            s0 = input.substring(s0, peg$currPos);
        }
        else {
            s0 = s1;
        }
        return s0;
    }
    function peg$parseescapedChar() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        s1 = peg$currPos;
        if (input.length > peg$currPos) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
        }
        else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c14);
            }
        }
        if (s2 !== peg$FAILED) {
            peg$savedPos = peg$currPos;
            s3 = peg$c82(s2);
            if (s3) {
                s3 = undefined;
            }
            else {
                s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
                s2 = [s2, s3];
                s1 = s2;
            }
            else {
                peg$currPos = s1;
                s1 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s1;
            s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
            s0 = input.substring(s0, peg$currPos);
        }
        else {
            s0 = s1;
        }
        return s0;
    }
    function peg$parseargNameOrNumber() {
        var s0, s1;
        peg$silentFails++;
        s0 = peg$currPos;
        s1 = peg$parseargNumber();
        if (s1 === peg$FAILED) {
            s1 = peg$parseargName();
        }
        if (s1 !== peg$FAILED) {
            s0 = input.substring(s0, peg$currPos);
        }
        else {
            s0 = s1;
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c83);
            }
        }
        return s0;
    }
    function peg$parseargNumber() {
        var s0, s1, s2, s3, s4;
        peg$silentFails++;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 48) {
            s1 = peg$c85;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c86);
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c87();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$currPos;
            if (peg$c88.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
            }
            else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c89);
                }
            }
            if (s2 !== peg$FAILED) {
                s3 = [];
                if (peg$c90.test(input.charAt(peg$currPos))) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c91);
                    }
                }
                while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    if (peg$c90.test(input.charAt(peg$currPos))) {
                        s4 = input.charAt(peg$currPos);
                        peg$currPos++;
                    }
                    else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c91);
                        }
                    }
                }
                if (s3 !== peg$FAILED) {
                    s2 = [s2, s3];
                    s1 = s2;
                }
                else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s1;
                s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c92(s1);
            }
            s0 = s1;
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c84);
            }
        }
        return s0;
    }
    function peg$parseargName() {
        var s0, s1, s2, s3, s4;
        peg$silentFails++;
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$currPos;
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parsewhiteSpace();
        if (s4 === peg$FAILED) {
            s4 = peg$parsepatternSyntax();
        }
        peg$silentFails--;
        if (s4 === peg$FAILED) {
            s3 = undefined;
        }
        else {
            peg$currPos = s3;
            s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
            if (input.length > peg$currPos) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
            }
            else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c14);
                }
            }
            if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
            }
            else {
                peg$currPos = s2;
                s2 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s2;
            s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$currPos;
                s3 = peg$currPos;
                peg$silentFails++;
                s4 = peg$parsewhiteSpace();
                if (s4 === peg$FAILED) {
                    s4 = peg$parsepatternSyntax();
                }
                peg$silentFails--;
                if (s4 === peg$FAILED) {
                    s3 = undefined;
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                    if (input.length > peg$currPos) {
                        s4 = input.charAt(peg$currPos);
                        peg$currPos++;
                    }
                    else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c14);
                        }
                    }
                    if (s4 !== peg$FAILED) {
                        s3 = [s3, s4];
                        s2 = s3;
                    }
                    else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                }
            }
        }
        else {
            s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
            s0 = input.substring(s0, peg$currPos);
        }
        else {
            s0 = s1;
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c93);
            }
        }
        return s0;
    }
    var messageCtx = ['root'];
    function isNestedMessageText() {
        return messageCtx.length > 1;
    }
    function isInPluralOption() {
        return messageCtx[messageCtx.length - 1] === 'plural';
    }
    function insertLocation() {
        return options && options.captureLocation ? {
            location: location()
        } : {};
    }
    peg$result = peg$startRuleFunction();
    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
        return peg$result;
    }
    else {
        if (peg$result !== peg$FAILED && peg$currPos < input.length) {
            peg$fail(peg$endExpectation());
        }
        throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length
            ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
            : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
    }
}
var pegParse = peg$parse;

var __spreadArrays = (undefined && undefined.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var PLURAL_HASHTAG_REGEX = /(^|[^\\])#/g;
/**
 * Whether to convert `#` in plural rule options
 * to `{var, number}`
 * @param el AST Element
 * @param pluralStack current plural stack
 */
function normalizeHashtagInPlural(els) {
    els.forEach(function (el) {
        // If we're encountering a plural el
        if (!isPluralElement(el) && !isSelectElement(el)) {
            return;
        }
        // Go down the options and search for # in any literal element
        Object.keys(el.options).forEach(function (id) {
            var _a;
            var opt = el.options[id];
            // If we got a match, we have to split this
            // and inject a NumberElement in the middle
            var matchingLiteralElIndex = -1;
            var literalEl = undefined;
            for (var i = 0; i < opt.value.length; i++) {
                var el_1 = opt.value[i];
                if (isLiteralElement(el_1) && PLURAL_HASHTAG_REGEX.test(el_1.value)) {
                    matchingLiteralElIndex = i;
                    literalEl = el_1;
                    break;
                }
            }
            if (literalEl) {
                var newValue = literalEl.value.replace(PLURAL_HASHTAG_REGEX, "$1{" + el.value + ", number}");
                var newEls = pegParse(newValue);
                (_a = opt.value).splice.apply(_a, __spreadArrays([matchingLiteralElIndex, 1], newEls));
            }
            normalizeHashtagInPlural(opt.value);
        });
    });
}

var __assign$1 = (undefined && undefined.__assign) || function () {
    __assign$1 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign$1.apply(this, arguments);
};
/**
 * https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * Credit: https://github.com/caridy/intl-datetimeformat-pattern/blob/master/index.js
 * with some tweaks
 */
var DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;
/**
 * Parse Date time skeleton into Intl.DateTimeFormatOptions
 * Ref: https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * @public
 * @param skeleton skeleton string
 */
function parseDateTimeSkeleton(skeleton) {
    var result = {};
    skeleton.replace(DATE_TIME_REGEX, function (match) {
        var len = match.length;
        switch (match[0]) {
            // Era
            case 'G':
                result.era = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';
                break;
            // Year
            case 'y':
                result.year = len === 2 ? '2-digit' : 'numeric';
                break;
            case 'Y':
            case 'u':
            case 'U':
            case 'r':
                throw new RangeError('`Y/u/U/r` (year) patterns are not supported, use `y` instead');
            // Quarter
            case 'q':
            case 'Q':
                throw new RangeError('`q/Q` (quarter) patterns are not supported');
            // Month
            case 'M':
            case 'L':
                result.month = ['numeric', '2-digit', 'short', 'long', 'narrow'][len - 1];
                break;
            // Week
            case 'w':
            case 'W':
                throw new RangeError('`w/W` (week) patterns are not supported');
            case 'd':
                result.day = ['numeric', '2-digit'][len - 1];
                break;
            case 'D':
            case 'F':
            case 'g':
                throw new RangeError('`D/F/g` (day) patterns are not supported, use `d` instead');
            // Weekday
            case 'E':
                result.weekday = len === 4 ? 'short' : len === 5 ? 'narrow' : 'short';
                break;
            case 'e':
                if (len < 4) {
                    throw new RangeError('`e..eee` (weekday) patterns are not supported');
                }
                result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];
                break;
            case 'c':
                if (len < 4) {
                    throw new RangeError('`c..ccc` (weekday) patterns are not supported');
                }
                result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];
                break;
            // Period
            case 'a': // AM, PM
                result.hour12 = true;
                break;
            case 'b': // am, pm, noon, midnight
            case 'B': // flexible day periods
                throw new RangeError('`b/B` (period) patterns are not supported, use `a` instead');
            // Hour
            case 'h':
                result.hourCycle = 'h12';
                result.hour = ['numeric', '2-digit'][len - 1];
                break;
            case 'H':
                result.hourCycle = 'h23';
                result.hour = ['numeric', '2-digit'][len - 1];
                break;
            case 'K':
                result.hourCycle = 'h11';
                result.hour = ['numeric', '2-digit'][len - 1];
                break;
            case 'k':
                result.hourCycle = 'h24';
                result.hour = ['numeric', '2-digit'][len - 1];
                break;
            case 'j':
            case 'J':
            case 'C':
                throw new RangeError('`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead');
            // Minute
            case 'm':
                result.minute = ['numeric', '2-digit'][len - 1];
                break;
            // Second
            case 's':
                result.second = ['numeric', '2-digit'][len - 1];
                break;
            case 'S':
            case 'A':
                throw new RangeError('`S/A` (second) pattenrs are not supported, use `s` instead');
            // Zone
            case 'z': // 1..3, 4: specific non-location format
                result.timeZoneName = len < 4 ? 'short' : 'long';
                break;
            case 'Z': // 1..3, 4, 5: The ISO8601 varios formats
            case 'O': // 1, 4: miliseconds in day short, long
            case 'v': // 1, 4: generic non-location format
            case 'V': // 1, 2, 3, 4: time zone ID or city
            case 'X': // 1, 2, 3, 4: The ISO8601 varios formats
            case 'x': // 1, 2, 3, 4: The ISO8601 varios formats
                throw new RangeError('`Z/O/v/V/X/x` (timeZone) pattenrs are not supported, use `z` instead');
        }
        return '';
    });
    return result;
}
function icuUnitToEcma(unit) {
    return unit.replace(/^(.*?)-/, '');
}
var FRACTION_PRECISION_REGEX = /^\.(?:(0+)(\+|#+)?)?$/g;
var SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\+|#+)?$/g;
function parseSignificantPrecision(str) {
    var result = {};
    str.replace(SIGNIFICANT_PRECISION_REGEX, function (_, g1, g2) {
        // @@@ case
        if (typeof g2 !== 'string') {
            result.minimumSignificantDigits = g1.length;
            result.maximumSignificantDigits = g1.length;
        }
        // @@@+ case
        else if (g2 === '+') {
            result.minimumSignificantDigits = g1.length;
        }
        // .### case
        else if (g1[0] === '#') {
            result.maximumSignificantDigits = g1.length;
        }
        // .@@## or .@@@ case
        else {
            result.minimumSignificantDigits = g1.length;
            result.maximumSignificantDigits =
                g1.length + (typeof g2 === 'string' ? g2.length : 0);
        }
        return '';
    });
    return result;
}
function parseSign(str) {
    switch (str) {
        case 'sign-auto':
            return {
                signDisplay: 'auto',
            };
        case 'sign-accounting':
            return {
                currencySign: 'accounting',
            };
        case 'sign-always':
            return {
                signDisplay: 'always',
            };
        case 'sign-accounting-always':
            return {
                signDisplay: 'always',
                currencySign: 'accounting',
            };
        case 'sign-except-zero':
            return {
                signDisplay: 'exceptZero',
            };
        case 'sign-accounting-except-zero':
            return {
                signDisplay: 'exceptZero',
                currencySign: 'accounting',
            };
        case 'sign-never':
            return {
                signDisplay: 'never',
            };
    }
}
function parseNotationOptions(opt) {
    var result = {};
    var signOpts = parseSign(opt);
    if (signOpts) {
        return signOpts;
    }
    return result;
}
/**
 * https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#skeleton-stems-and-options
 */
function convertNumberSkeletonToNumberFormatOptions(tokens) {
    var result = {};
    for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
        var token = tokens_1[_i];
        switch (token.stem) {
            case 'percent':
                result.style = 'percent';
                continue;
            case 'currency':
                result.style = 'currency';
                result.currency = token.options[0];
                continue;
            case 'group-off':
                result.useGrouping = false;
                continue;
            case 'precision-integer':
                result.maximumFractionDigits = 0;
                continue;
            case 'measure-unit':
                result.style = 'unit';
                result.unit = icuUnitToEcma(token.options[0]);
                continue;
            case 'compact-short':
                result.notation = 'compact';
                result.compactDisplay = 'short';
                continue;
            case 'compact-long':
                result.notation = 'compact';
                result.compactDisplay = 'long';
                continue;
            case 'scientific':
                result = __assign$1(__assign$1(__assign$1({}, result), { notation: 'scientific' }), token.options.reduce(function (all, opt) { return (__assign$1(__assign$1({}, all), parseNotationOptions(opt))); }, {}));
                continue;
            case 'engineering':
                result = __assign$1(__assign$1(__assign$1({}, result), { notation: 'engineering' }), token.options.reduce(function (all, opt) { return (__assign$1(__assign$1({}, all), parseNotationOptions(opt))); }, {}));
                continue;
            case 'notation-simple':
                result.notation = 'standard';
                continue;
            // https://github.com/unicode-org/icu/blob/master/icu4c/source/i18n/unicode/unumberformatter.h
            case 'unit-width-narrow':
                result.currencyDisplay = 'narrowSymbol';
                result.unitDisplay = 'narrow';
                continue;
            case 'unit-width-short':
                result.currencyDisplay = 'code';
                result.unitDisplay = 'short';
                continue;
            case 'unit-width-full-name':
                result.currencyDisplay = 'name';
                result.unitDisplay = 'long';
                continue;
            case 'unit-width-iso-code':
                result.currencyDisplay = 'symbol';
                continue;
        }
        // Precision
        // https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#fraction-precision
        if (FRACTION_PRECISION_REGEX.test(token.stem)) {
            if (token.options.length > 1) {
                throw new RangeError('Fraction-precision stems only accept a single optional option');
            }
            token.stem.replace(FRACTION_PRECISION_REGEX, function (match, g1, g2) {
                // precision-integer case
                if (match === '.') {
                    result.maximumFractionDigits = 0;
                }
                // .000+ case
                else if (g2 === '+') {
                    result.minimumFractionDigits = g2.length;
                }
                // .### case
                else if (g1[0] === '#') {
                    result.maximumFractionDigits = g1.length;
                }
                // .00## or .000 case
                else {
                    result.minimumFractionDigits = g1.length;
                    result.maximumFractionDigits =
                        g1.length + (typeof g2 === 'string' ? g2.length : 0);
                }
                return '';
            });
            if (token.options.length) {
                result = __assign$1(__assign$1({}, result), parseSignificantPrecision(token.options[0]));
            }
            continue;
        }
        if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {
            result = __assign$1(__assign$1({}, result), parseSignificantPrecision(token.stem));
            continue;
        }
        var signOpts = parseSign(token.stem);
        if (signOpts) {
            result = __assign$1(__assign$1({}, result), signOpts);
        }
    }
    return result;
}

function parse(input, opts) {
    var els = pegParse(input, opts);
    if (!opts || opts.normalizeHashtagInPlural !== false) {
        normalizeHashtagInPlural(els);
    }
    return els;
}

/*
Copyright (c) 2014, Yahoo! Inc. All rights reserved.
Copyrights licensed under the New BSD License.
See the accompanying LICENSE file for terms.
*/
var __spreadArrays$1 = (undefined && undefined.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
// -- Utilities ----------------------------------------------------------------
function getCacheId(inputs) {
    return JSON.stringify(inputs.map(function (input) {
        return input && typeof input === 'object' ? orderedProps(input) : input;
    }));
}
function orderedProps(obj) {
    return Object.keys(obj)
        .sort()
        .map(function (k) {
        var _a;
        return (_a = {}, _a[k] = obj[k], _a);
    });
}
var memoizeFormatConstructor = function (FormatConstructor, cache) {
    if (cache === void 0) { cache = {}; }
    return function () {
        var _a;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var cacheId = getCacheId(args);
        var format = cacheId && cache[cacheId];
        if (!format) {
            format = new ((_a = FormatConstructor).bind.apply(_a, __spreadArrays$1([void 0], args)))();
            if (cacheId) {
                cache[cacheId] = format;
            }
        }
        return format;
    };
};

var __extends$1 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays$2 = (undefined && undefined.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var FormatError = /** @class */ (function (_super) {
    __extends$1(FormatError, _super);
    function FormatError(msg, variableId) {
        var _this = _super.call(this, msg) || this;
        _this.variableId = variableId;
        return _this;
    }
    return FormatError;
}(Error));
function mergeLiteral(parts) {
    if (parts.length < 2) {
        return parts;
    }
    return parts.reduce(function (all, part) {
        var lastPart = all[all.length - 1];
        if (!lastPart ||
            lastPart.type !== 0 /* literal */ ||
            part.type !== 0 /* literal */) {
            all.push(part);
        }
        else {
            lastPart.value += part.value;
        }
        return all;
    }, []);
}
// TODO(skeleton): add skeleton support
function formatToParts(els, locales, formatters, formats, values, currentPluralValue, 
// For debugging
originalMessage) {
    // Hot path for straight simple msg translations
    if (els.length === 1 && isLiteralElement(els[0])) {
        return [
            {
                type: 0 /* literal */,
                value: els[0].value,
            },
        ];
    }
    var result = [];
    for (var _i = 0, els_1 = els; _i < els_1.length; _i++) {
        var el = els_1[_i];
        // Exit early for string parts.
        if (isLiteralElement(el)) {
            result.push({
                type: 0 /* literal */,
                value: el.value,
            });
            continue;
        }
        // TODO: should this part be literal type?
        // Replace `#` in plural rules with the actual numeric value.
        if (isPoundElement(el)) {
            if (typeof currentPluralValue === 'number') {
                result.push({
                    type: 0 /* literal */,
                    value: formatters.getNumberFormat(locales).format(currentPluralValue),
                });
            }
            continue;
        }
        var varName = el.value;
        // Enforce that all required values are provided by the caller.
        if (!(values && varName in values)) {
            throw new FormatError("The intl string context variable \"" + varName + "\" was not provided to the string \"" + originalMessage + "\"");
        }
        var value = values[varName];
        if (isArgumentElement(el)) {
            if (!value || typeof value === 'string' || typeof value === 'number') {
                value =
                    typeof value === 'string' || typeof value === 'number'
                        ? String(value)
                        : '';
            }
            result.push({
                type: 1 /* argument */,
                value: value,
            });
            continue;
        }
        // Recursively format plural and select parts' option — which can be a
        // nested pattern structure. The choosing of the option to use is
        // abstracted-by and delegated-to the part helper object.
        if (isDateElement(el)) {
            var style = typeof el.style === 'string' ? formats.date[el.style] : undefined;
            result.push({
                type: 0 /* literal */,
                value: formatters
                    .getDateTimeFormat(locales, style)
                    .format(value),
            });
            continue;
        }
        if (isTimeElement(el)) {
            var style = typeof el.style === 'string'
                ? formats.time[el.style]
                : isDateTimeSkeleton(el.style)
                    ? parseDateTimeSkeleton(el.style.pattern)
                    : undefined;
            result.push({
                type: 0 /* literal */,
                value: formatters
                    .getDateTimeFormat(locales, style)
                    .format(value),
            });
            continue;
        }
        if (isNumberElement(el)) {
            var style = typeof el.style === 'string'
                ? formats.number[el.style]
                : isNumberSkeleton(el.style)
                    ? convertNumberSkeletonToNumberFormatOptions(el.style.tokens)
                    : undefined;
            result.push({
                type: 0 /* literal */,
                value: formatters
                    .getNumberFormat(locales, style)
                    .format(value),
            });
            continue;
        }
        if (isSelectElement(el)) {
            var opt = el.options[value] || el.options.other;
            if (!opt) {
                throw new RangeError("Invalid values for \"" + el.value + "\": \"" + value + "\". Options are \"" + Object.keys(el.options).join('", "') + "\"");
            }
            result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values));
            continue;
        }
        if (isPluralElement(el)) {
            var opt = el.options["=" + value];
            if (!opt) {
                if (!Intl.PluralRules) {
                    throw new FormatError("Intl.PluralRules is not available in this environment.\nTry polyfilling it using \"@formatjs/intl-pluralrules\"\n");
                }
                var rule = formatters
                    .getPluralRules(locales, { type: el.pluralType })
                    .select(value - (el.offset || 0));
                opt = el.options[rule] || el.options.other;
            }
            if (!opt) {
                throw new RangeError("Invalid values for \"" + el.value + "\": \"" + value + "\". Options are \"" + Object.keys(el.options).join('", "') + "\"");
            }
            result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values, value - (el.offset || 0)));
            continue;
        }
    }
    return mergeLiteral(result);
}
function formatToString(els, locales, formatters, formats, values, 
// For debugging
originalMessage) {
    var parts = formatToParts(els, locales, formatters, formats, values, undefined, originalMessage);
    // Hot path for straight simple msg translations
    if (parts.length === 1) {
        return parts[0].value;
    }
    return parts.reduce(function (all, part) { return (all += part.value); }, '');
}
// Singleton
var domParser;
var TOKEN_DELIMITER = '@@';
var TOKEN_REGEX = /@@(\d+_\d+)@@/g;
var counter = 0;
function generateId() {
    return Date.now() + "_" + ++counter;
}
function restoreRichPlaceholderMessage(text, objectParts) {
    return text
        .split(TOKEN_REGEX)
        .filter(Boolean)
        .map(function (c) { return (objectParts[c] != null ? objectParts[c] : c); })
        .reduce(function (all, c) {
        if (!all.length) {
            all.push(c);
        }
        else if (typeof c === 'string' &&
            typeof all[all.length - 1] === 'string') {
            all[all.length - 1] += c;
        }
        else {
            all.push(c);
        }
        return all;
    }, []);
}
/**
 * Not exhaustive, just for sanity check
 */
var SIMPLE_XML_REGEX = /(<([0-9a-zA-Z-_]*?)>(.*?)<\/([0-9a-zA-Z-_]*?)>)|(<[0-9a-zA-Z-_]*?\/>)/;
var TEMPLATE_ID = Date.now() + '@@';
var VOID_ELEMENTS = [
    'area',
    'base',
    'br',
    'col',
    'embed',
    'hr',
    'img',
    'input',
    'link',
    'meta',
    'param',
    'source',
    'track',
    'wbr',
];
function formatHTMLElement(el, objectParts, values) {
    var tagName = el.tagName;
    var outerHTML = el.outerHTML, textContent = el.textContent, childNodes = el.childNodes;
    // Regular text
    if (!tagName) {
        return restoreRichPlaceholderMessage(textContent || '', objectParts);
    }
    tagName = tagName.toLowerCase();
    var isVoidElement = ~VOID_ELEMENTS.indexOf(tagName);
    var formatFnOrValue = values[tagName];
    if (formatFnOrValue && isVoidElement) {
        throw new FormatError(tagName + " is a self-closing tag and can not be used, please use another tag name.");
    }
    if (!childNodes.length) {
        return [outerHTML];
    }
    var chunks = Array.prototype.slice.call(childNodes).reduce(function (all, child) {
        return all.concat(formatHTMLElement(child, objectParts, values));
    }, []);
    // Legacy HTML
    if (!formatFnOrValue) {
        return __spreadArrays$2(["<" + tagName + ">"], chunks, ["</" + tagName + ">"]);
    }
    // HTML Tag replacement
    if (typeof formatFnOrValue === 'function') {
        return [formatFnOrValue.apply(void 0, chunks)];
    }
    return [formatFnOrValue];
}
function formatHTMLMessage(els, locales, formatters, formats, values, 
// For debugging
originalMessage) {
    var parts = formatToParts(els, locales, formatters, formats, values, undefined, originalMessage);
    var objectParts = {};
    var formattedMessage = parts.reduce(function (all, part) {
        if (part.type === 0 /* literal */) {
            return (all += part.value);
        }
        var id = generateId();
        objectParts[id] = part.value;
        return (all += "" + TOKEN_DELIMITER + id + TOKEN_DELIMITER);
    }, '');
    // Not designed to filter out aggressively
    if (!SIMPLE_XML_REGEX.test(formattedMessage)) {
        return restoreRichPlaceholderMessage(formattedMessage, objectParts);
    }
    if (!values) {
        throw new FormatError('Message has placeholders but no values was given');
    }
    if (typeof DOMParser === 'undefined') {
        throw new FormatError('Cannot format XML message without DOMParser');
    }
    if (!domParser) {
        domParser = new DOMParser();
    }
    var content = domParser
        .parseFromString("<formatted-message id=\"" + TEMPLATE_ID + "\">" + formattedMessage + "</formatted-message>", 'text/html')
        .getElementById(TEMPLATE_ID);
    if (!content) {
        throw new FormatError("Malformed HTML message " + formattedMessage);
    }
    var tagsToFormat = Object.keys(values).filter(function (varName) { return !!content.getElementsByTagName(varName).length; });
    // No tags to format
    if (!tagsToFormat.length) {
        return restoreRichPlaceholderMessage(formattedMessage, objectParts);
    }
    var caseSensitiveTags = tagsToFormat.filter(function (tagName) { return tagName !== tagName.toLowerCase(); });
    if (caseSensitiveTags.length) {
        throw new FormatError("HTML tag must be lowercased but the following tags are not: " + caseSensitiveTags.join(', '));
    }
    // We're doing this since top node is `<formatted-message/>` which does not have a formatter
    return Array.prototype.slice
        .call(content.childNodes)
        .reduce(function (all, child) { return all.concat(formatHTMLElement(child, objectParts, values)); }, []);
}

/*
Copyright (c) 2014, Yahoo! Inc. All rights reserved.
Copyrights licensed under the New BSD License.
See the accompanying LICENSE file for terms.
*/
var __assign$2 = (undefined && undefined.__assign) || function () {
    __assign$2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign$2.apply(this, arguments);
};
// -- MessageFormat --------------------------------------------------------
function mergeConfig(c1, c2) {
    if (!c2) {
        return c1;
    }
    return __assign$2(__assign$2(__assign$2({}, (c1 || {})), (c2 || {})), Object.keys(c1).reduce(function (all, k) {
        all[k] = __assign$2(__assign$2({}, c1[k]), (c2[k] || {}));
        return all;
    }, {}));
}
function mergeConfigs(defaultConfig, configs) {
    if (!configs) {
        return defaultConfig;
    }
    return Object.keys(defaultConfig).reduce(function (all, k) {
        all[k] = mergeConfig(defaultConfig[k], configs[k]);
        return all;
    }, __assign$2({}, defaultConfig));
}
function createDefaultFormatters(cache) {
    if (cache === void 0) { cache = {
        number: {},
        dateTime: {},
        pluralRules: {},
    }; }
    return {
        getNumberFormat: memoizeFormatConstructor(Intl.NumberFormat, cache.number),
        getDateTimeFormat: memoizeFormatConstructor(Intl.DateTimeFormat, cache.dateTime),
        getPluralRules: memoizeFormatConstructor(Intl.PluralRules, cache.pluralRules),
    };
}
var IntlMessageFormat = /** @class */ (function () {
    function IntlMessageFormat(message, locales, overrideFormats, opts) {
        var _this = this;
        if (locales === void 0) { locales = IntlMessageFormat.defaultLocale; }
        this.formatterCache = {
            number: {},
            dateTime: {},
            pluralRules: {},
        };
        this.format = function (values) {
            return formatToString(_this.ast, _this.locales, _this.formatters, _this.formats, values, _this.message);
        };
        this.formatToParts = function (values) {
            return formatToParts(_this.ast, _this.locales, _this.formatters, _this.formats, values, undefined, _this.message);
        };
        this.formatHTMLMessage = function (values) {
            return formatHTMLMessage(_this.ast, _this.locales, _this.formatters, _this.formats, values, _this.message);
        };
        this.resolvedOptions = function () { return ({
            locale: Intl.NumberFormat.supportedLocalesOf(_this.locales)[0],
        }); };
        this.getAst = function () { return _this.ast; };
        if (typeof message === 'string') {
            this.message = message;
            if (!IntlMessageFormat.__parse) {
                throw new TypeError('IntlMessageFormat.__parse must be set to process `message` of type `string`');
            }
            // Parse string messages into an AST.
            this.ast = IntlMessageFormat.__parse(message, {
                normalizeHashtagInPlural: false,
            });
        }
        else {
            this.ast = message;
        }
        if (!Array.isArray(this.ast)) {
            throw new TypeError('A message must be provided as a String or AST.');
        }
        // Creates a new object with the specified `formats` merged with the default
        // formats.
        this.formats = mergeConfigs(IntlMessageFormat.formats, overrideFormats);
        // Defined first because it's used to build the format pattern.
        this.locales = locales;
        this.formatters =
            (opts && opts.formatters) || createDefaultFormatters(this.formatterCache);
    }
    IntlMessageFormat.defaultLocale = new Intl.NumberFormat().resolvedOptions().locale;
    IntlMessageFormat.__parse = parse;
    // Default format options used as the prototype of the `formats` provided to the
    // constructor. These are used when constructing the internal Intl.NumberFormat
    // and Intl.DateTimeFormat instances.
    IntlMessageFormat.formats = {
        number: {
            currency: {
                style: 'currency',
            },
            percent: {
                style: 'percent',
            },
        },
        date: {
            short: {
                month: 'numeric',
                day: 'numeric',
                year: '2-digit',
            },
            medium: {
                month: 'short',
                day: 'numeric',
                year: 'numeric',
            },
            long: {
                month: 'long',
                day: 'numeric',
                year: 'numeric',
            },
            full: {
                weekday: 'long',
                month: 'long',
                day: 'numeric',
                year: 'numeric',
            },
        },
        time: {
            short: {
                hour: 'numeric',
                minute: 'numeric',
            },
            medium: {
                hour: 'numeric',
                minute: 'numeric',
                second: 'numeric',
            },
            long: {
                hour: 'numeric',
                minute: 'numeric',
                second: 'numeric',
                timeZoneName: 'short',
            },
            full: {
                hour: 'numeric',
                minute: 'numeric',
                second: 'numeric',
                timeZoneName: 'short',
            },
        },
    };
    return IntlMessageFormat;
}());

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function createCommonjsModule(fn, basedir, module) {
	return module = {
	  path: basedir,
	  exports: {},
	  require: function (path, base) {
      return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
    }
	}, fn(module, module.exports), module.exports;
}

function commonjsRequire () {
	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
}

var microMemoize = createCommonjsModule(function (module, exports) {
(function (global, factory) {
   module.exports = factory() ;
}(commonjsGlobal, (function () {
  /**
   * @constant DEFAULT_OPTIONS_KEYS the default options keys
   */
  var DEFAULT_OPTIONS_KEYS = {
      isEqual: true,
      isMatchingKey: true,
      isPromise: true,
      maxSize: true,
      onCacheAdd: true,
      onCacheChange: true,
      onCacheHit: true,
      transformKey: true,
  };
  /**
   * @function slice
   *
   * @description
   * slice.call() pre-bound
   */
  var slice = Array.prototype.slice;
  /**
   * @function cloneArray
   *
   * @description
   * clone the array-like object and return the new array
   *
   * @param arrayLike the array-like object to clone
   * @returns the clone as an array
   */
  function cloneArray(arrayLike) {
      var length = arrayLike.length;
      if (!length) {
          return [];
      }
      if (length === 1) {
          return [arrayLike[0]];
      }
      if (length === 2) {
          return [arrayLike[0], arrayLike[1]];
      }
      if (length === 3) {
          return [arrayLike[0], arrayLike[1], arrayLike[2]];
      }
      return slice.call(arrayLike, 0);
  }
  /**
   * @function getCustomOptions
   *
   * @description
   * get the custom options on the object passed
   *
   * @param options the memoization options passed
   * @returns the custom options passed
   */
  function getCustomOptions(options) {
      var customOptions = {};
      /* eslint-disable no-restricted-syntax */
      for (var key in options) {
          if (!DEFAULT_OPTIONS_KEYS[key]) {
              customOptions[key] = options[key];
          }
      }
      /* eslint-enable */
      return customOptions;
  }
  /**
   * @function isMemoized
   *
   * @description
   * is the function passed already memoized
   *
   * @param fn the function to test
   * @returns is the function already memoized
   */
  function isMemoized(fn) {
      return (typeof fn === 'function' &&
          fn.isMemoized);
  }
  /**
   * @function isSameValueZero
   *
   * @description
   * are the objects equal based on SameValueZero equality
   *
   * @param object1 the first object to compare
   * @param object2 the second object to compare
   * @returns are the two objects equal
   */
  function isSameValueZero(object1, object2) {
      // eslint-disable-next-line no-self-compare
      return object1 === object2 || (object1 !== object1 && object2 !== object2);
  }
  /**
   * @function mergeOptions
   *
   * @description
   * merge the options into the target
   *
   * @param existingOptions the options provided
   * @param newOptions the options to include
   * @returns the merged options
   */
  function mergeOptions(existingOptions, newOptions) {
      // @ts-ignore
      var target = {};
      /* eslint-disable no-restricted-syntax */
      for (var key in existingOptions) {
          target[key] = existingOptions[key];
      }
      for (var key in newOptions) {
          target[key] = newOptions[key];
      }
      /* eslint-enable */
      return target;
  }

  // utils
  var Cache = /** @class */ (function () {
      function Cache(options) {
          this.keys = [];
          this.values = [];
          this.options = options;
          var isMatchingKeyFunction = typeof options.isMatchingKey === 'function';
          if (isMatchingKeyFunction) {
              this.getKeyIndex = this._getKeyIndexFromMatchingKey;
          }
          else if (options.maxSize > 1) {
              this.getKeyIndex = this._getKeyIndexForMany;
          }
          else {
              this.getKeyIndex = this._getKeyIndexForSingle;
          }
          this.canTransformKey = typeof options.transformKey === 'function';
          this.shouldCloneArguments = this.canTransformKey || isMatchingKeyFunction;
          this.shouldUpdateOnAdd = typeof options.onCacheAdd === 'function';
          this.shouldUpdateOnChange = typeof options.onCacheChange === 'function';
          this.shouldUpdateOnHit = typeof options.onCacheHit === 'function';
      }
      Object.defineProperty(Cache.prototype, "size", {
          get: function () {
              return this.keys.length;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(Cache.prototype, "snapshot", {
          get: function () {
              return {
                  keys: cloneArray(this.keys),
                  size: this.size,
                  values: cloneArray(this.values),
              };
          },
          enumerable: true,
          configurable: true
      });
      /**
       * @function _getKeyIndexFromMatchingKey
       *
       * @description
       * gets the matching key index when a custom key matcher is used
       *
       * @param keyToMatch the key to match
       * @returns the index of the matching key, or -1
       */
      Cache.prototype._getKeyIndexFromMatchingKey = function (keyToMatch) {
          var _a = this.options, isMatchingKey = _a.isMatchingKey, maxSize = _a.maxSize;
          var keys = this.keys;
          var keysLength = keys.length;
          if (!keysLength) {
              return -1;
          }
          if (isMatchingKey(keys[0], keyToMatch)) {
              return 0;
          }
          if (maxSize > 1) {
              for (var index = 1; index < keysLength; index++) {
                  if (isMatchingKey(keys[index], keyToMatch)) {
                      return index;
                  }
              }
          }
          return -1;
      };
      /**
       * @function _getKeyIndexForMany
       *
       * @description
       * gets the matching key index when multiple keys are used
       *
       * @param keyToMatch the key to match
       * @returns the index of the matching key, or -1
       */
      Cache.prototype._getKeyIndexForMany = function (keyToMatch) {
          var isEqual = this.options.isEqual;
          var keys = this.keys;
          var keysLength = keys.length;
          if (!keysLength) {
              return -1;
          }
          if (keysLength === 1) {
              return this._getKeyIndexForSingle(keyToMatch);
          }
          var keyLength = keyToMatch.length;
          var existingKey;
          var argIndex;
          if (keyLength > 1) {
              for (var index = 0; index < keysLength; index++) {
                  existingKey = keys[index];
                  if (existingKey.length === keyLength) {
                      argIndex = 0;
                      for (; argIndex < keyLength; argIndex++) {
                          if (!isEqual(existingKey[argIndex], keyToMatch[argIndex])) {
                              break;
                          }
                      }
                      if (argIndex === keyLength) {
                          return index;
                      }
                  }
              }
          }
          else {
              for (var index = 0; index < keysLength; index++) {
                  existingKey = keys[index];
                  if (existingKey.length === keyLength &&
                      isEqual(existingKey[0], keyToMatch[0])) {
                      return index;
                  }
              }
          }
          return -1;
      };
      /**
       * @function _getKeyIndexForSingle
       *
       * @description
       * gets the matching key index when a single key is used
       *
       * @param keyToMatch the key to match
       * @returns the index of the matching key, or -1
       */
      Cache.prototype._getKeyIndexForSingle = function (keyToMatch) {
          var keys = this.keys;
          if (!keys.length) {
              return -1;
          }
          var existingKey = keys[0];
          var length = existingKey.length;
          if (keyToMatch.length !== length) {
              return -1;
          }
          var isEqual = this.options.isEqual;
          if (length > 1) {
              for (var index = 0; index < length; index++) {
                  if (!isEqual(existingKey[index], keyToMatch[index])) {
                      return -1;
                  }
              }
              return 0;
          }
          return isEqual(existingKey[0], keyToMatch[0]) ? 0 : -1;
      };
      /**
       * @function orderByLru
       *
       * @description
       * order the array based on a Least-Recently-Used basis
       *
       * @param key the new key to move to the front
       * @param value the new value to move to the front
       * @param startingIndex the index of the item to move to the front
       */
      Cache.prototype.orderByLru = function (key, value, startingIndex) {
          var keys = this.keys;
          var values = this.values;
          var currentLength = keys.length;
          var index = startingIndex;
          while (index--) {
              keys[index + 1] = keys[index];
              values[index + 1] = values[index];
          }
          keys[0] = key;
          values[0] = value;
          var maxSize = this.options.maxSize;
          if (currentLength === maxSize && startingIndex === currentLength) {
              keys.pop();
              values.pop();
          }
          else if (startingIndex >= maxSize) {
              // eslint-disable-next-line no-multi-assign
              keys.length = values.length = maxSize;
          }
      };
      /**
       * @function updateAsyncCache
       *
       * @description
       * update the promise method to auto-remove from cache if rejected, and
       * if resolved then fire cache hit / changed
       *
       * @param memoized the memoized function
       */
      Cache.prototype.updateAsyncCache = function (memoized) {
          var _this = this;
          var _a = this.options, onCacheChange = _a.onCacheChange, onCacheHit = _a.onCacheHit;
          var firstKey = this.keys[0];
          var firstValue = this.values[0];
          this.values[0] = firstValue.then(function (value) {
              if (_this.shouldUpdateOnHit) {
                  onCacheHit(_this, _this.options, memoized);
              }
              if (_this.shouldUpdateOnChange) {
                  onCacheChange(_this, _this.options, memoized);
              }
              return value;
          }, function (error) {
              var keyIndex = _this.getKeyIndex(firstKey);
              if (keyIndex !== -1) {
                  _this.keys.splice(keyIndex, 1);
                  _this.values.splice(keyIndex, 1);
              }
              throw error;
          });
      };
      return Cache;
  }());

  // cache
  function createMemoizedFunction(fn, options) {
      if (options === void 0) { options = {}; }
      if (isMemoized(fn)) {
          return createMemoizedFunction(fn.fn, mergeOptions(fn.options, options));
      }
      if (typeof fn !== 'function') {
          throw new TypeError('You must pass a function to `memoize`.');
      }
      var _a = options.isEqual, isEqual = _a === void 0 ? isSameValueZero : _a, isMatchingKey = options.isMatchingKey, _b = options.isPromise, isPromise = _b === void 0 ? false : _b, _c = options.maxSize, maxSize = _c === void 0 ? 1 : _c, onCacheAdd = options.onCacheAdd, onCacheChange = options.onCacheChange, onCacheHit = options.onCacheHit, transformKey = options.transformKey;
      var normalizedOptions = mergeOptions({
          isEqual: isEqual,
          isMatchingKey: isMatchingKey,
          isPromise: isPromise,
          maxSize: maxSize,
          onCacheAdd: onCacheAdd,
          onCacheChange: onCacheChange,
          onCacheHit: onCacheHit,
          transformKey: transformKey,
      }, getCustomOptions(options));
      var cache = new Cache(normalizedOptions);
      var keys = cache.keys, values = cache.values, canTransformKey = cache.canTransformKey, shouldCloneArguments = cache.shouldCloneArguments, shouldUpdateOnAdd = cache.shouldUpdateOnAdd, shouldUpdateOnChange = cache.shouldUpdateOnChange, shouldUpdateOnHit = cache.shouldUpdateOnHit;
      // @ts-ignore
      var memoized = function memoized() {
          // @ts-ignore
          var key = shouldCloneArguments
              ? cloneArray(arguments)
              : arguments;
          if (canTransformKey) {
              key = transformKey(key);
          }
          var keyIndex = keys.length ? cache.getKeyIndex(key) : -1;
          if (keyIndex !== -1) {
              if (shouldUpdateOnHit) {
                  onCacheHit(cache, normalizedOptions, memoized);
              }
              if (keyIndex) {
                  cache.orderByLru(keys[keyIndex], values[keyIndex], keyIndex);
                  if (shouldUpdateOnChange) {
                      onCacheChange(cache, normalizedOptions, memoized);
                  }
              }
          }
          else {
              var newValue = fn.apply(this, arguments);
              var newKey = shouldCloneArguments
                  ? key
                  : cloneArray(arguments);
              cache.orderByLru(newKey, newValue, keys.length);
              if (isPromise) {
                  cache.updateAsyncCache(memoized);
              }
              if (shouldUpdateOnAdd) {
                  onCacheAdd(cache, normalizedOptions, memoized);
              }
              if (shouldUpdateOnChange) {
                  onCacheChange(cache, normalizedOptions, memoized);
              }
          }
          return values[0];
      };
      memoized.cache = cache;
      memoized.fn = fn;
      memoized.isMemoized = true;
      memoized.options = normalizedOptions;
      return memoized;
  }

  return createMemoizedFunction;

})));

});

function o(){}const r=t=>t;function i(t,e){for(const n in e)t[n]=e[n];return t}function c(t){return t&&"object"==typeof t&&"function"==typeof t.then}function s(t){return t()}function u(){return Object.create(null)}function a(t){t.forEach(s);}function l(t){return "function"==typeof t}function f(t,e){const n=t.subscribe(e);return n.unsubscribe?()=>n.unsubscribe():n}function d(t,e,n){return t[1]?i({},i(e.$$scope.ctx,t[1](n?n(e):{}))):e.$$scope.ctx}const p=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),h="undefined"!=typeof window;let _=h?()=>window.performance.now():()=>Date.now(),m=h?t=>requestAnimationFrame(t):o;const g=new Set;let b,F=!1;function v(){g.forEach(t=>{t[0](_())||(g.delete(t),t[1]());}),(F=g.size>0)&&m(v);}function $(t){let e;return F||(F=!0,m(v)),{promise:new Promise(n=>{g.add(e=[t,n]);}),abort(){g.delete(e);}}}function y(t,e){t.appendChild(e);}function w(t,e,n){t.insertBefore(e,n||null);}function k(t){t.parentNode.removeChild(t);}function x(t){return document.createElement(t)}function E(t){return document.createElementNS("http://www.w3.org/2000/svg",t)}function S(t){return document.createTextNode(t)}function O(t,e,n,o){return t.addEventListener(e,n,o),()=>t.removeEventListener(e,n,o)}function C(t,e,n){null==n?t.removeAttribute(e):t.getAttribute(e)!==n&&t.setAttribute(e,n);}function D(t){return Array.from(t.childNodes)}function j(t,e){for(let n=0;n<t.length;n+=1){const o=t[n];if(3===o.nodeType)return o.data=""+e,t.splice(n,1)[0]}return S(e)}function A(t,e){const n=document.createEvent("CustomEvent");return n.initCustomEvent(t,!1,!1,e),n}let M,L=0,P={};function R(t,e,n,o,r,i,c,s=0){const u=16.666/o;let a="{\n";for(let t=0;t<=1;t+=u){const o=e+(n-e)*i(t);a+=100*t+`%{${c(o,1-o)}}\n`;}const l=a+`100% {${c(n,1-n)}}\n}`,f=`__svelte_${function(t){let e=5381,n=t.length;for(;n--;)e=(e<<5)-e^t.charCodeAt(n);return e>>>0}(l)}_${s}`;if(!P[f]){if(!b){const t=x("style");document.head.appendChild(t),b=t.sheet;}P[f]=!0,b.insertRule(`@keyframes ${f} ${l}`,b.cssRules.length);}const d=t.style.animation||"";return t.style.animation=`${d?`${d}, `:""}${f} ${o}ms linear ${r}ms 1 both`,L+=1,f}function q(t,e){t.style.animation=(t.style.animation||"").split(", ").filter(e?t=>t.indexOf(e)<0:t=>-1===t.indexOf("__svelte")).join(", "),e&&!--L&&m(()=>{if(L)return;let t=b.cssRules.length;for(;t--;)b.deleteRule(t);P={};});}function N(t,e){const n=t.getBoundingClientRect();if(e.left!==n.left||e.top!==n.top){const o=getComputedStyle(t),r="none"===o.transform?"":o.transform;t.style.transform=`${r} translate(${e.left-n.left}px, ${e.top-n.top}px)`;}}function T(t){M=t;}function z(){if(!M)throw new Error("Function called outside component initialization");return M}const B=[],U=[],H=[],I=[],J=Promise.resolve();let V,Y=!1;function G(){Y||(Y=!0,J.then(Q));}function K(t){H.push(t);}function Q(){const t=new Set;do{for(;B.length;){const t=B.shift();T(t),W(t.$$);}for(;U.length;)U.pop()();for(let e=0;e<H.length;e+=1){const n=H[e];t.has(n)||(n(),t.add(n));}H.length=0;}while(B.length);for(;I.length;)I.pop()();Y=!1;}function W(t){null!==t.fragment&&(t.update(t.dirty),a(t.before_update),t.fragment&&t.fragment.p(t.dirty,t.ctx),t.dirty=null,t.after_update.forEach(K));}function X(){return V||(V=Promise.resolve()).then(()=>{V=null;}),V}function Z(t,e,n){t.dispatchEvent(A(`${e?"intro":"outro"}${n}`));}const tt=new Set;let et;function nt(){et={r:0,c:[],p:et};}function ot(){et.r||a(et.c),et=et.p;}function rt(t,e){t&&t.i&&(tt.delete(t),t.i(e));}function it(t,e,n,o){if(t&&t.o){if(tt.has(t))return;tt.add(t),et.c.push(()=>{tt.delete(t),o&&(n&&t.d(1),o());}),t.o(e);}}const ct={duration:0};const st="undefined"!=typeof window?window:global;function ut(t,e){t.d(1),e.delete(t.key);}function at(t,e){it(t,1,1,()=>{e.delete(t.key);});}const lt=new Set(["allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","controls","default","defer","disabled","formnovalidate","hidden","ismap","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","selected"]),ft=/[\s'">/=\u{FDD0}-\u{FDEF}\u{FFFE}\u{FFFF}\u{1FFFE}\u{1FFFF}\u{2FFFE}\u{2FFFF}\u{3FFFE}\u{3FFFF}\u{4FFFE}\u{4FFFF}\u{5FFFE}\u{5FFFF}\u{6FFFE}\u{6FFFF}\u{7FFFE}\u{7FFFF}\u{8FFFE}\u{8FFFF}\u{9FFFE}\u{9FFFF}\u{AFFFE}\u{AFFFF}\u{BFFFE}\u{BFFFF}\u{CFFFE}\u{CFFFF}\u{DFFFE}\u{DFFFF}\u{EFFFE}\u{EFFFF}\u{FFFFE}\u{FFFFF}\u{10FFFE}\u{10FFFF}]/u;const dt={'"':"&quot;","'":"&#39;","&":"&amp;","<":"&lt;",">":"&gt;"};function pt(t){return String(t).replace(/["'&<>]/g,t=>dt[t])}let ht,_t;function mt(t,e,n){const{fragment:o,on_mount:r,on_destroy:i,after_update:c}=t.$$;o&&o.m(e,n),K(()=>{const e=r.map(s).filter(l);i?i.push(...e):a(e),t.$$.on_mount=[];}),c.forEach(K);}function gt(t,e){const n=t.$$;null!==n.fragment&&(a(n.on_destroy),n.fragment&&n.fragment.d(e),n.on_destroy=n.fragment=null,n.ctx={});}"function"==typeof HTMLElement&&(_t=class extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"});}connectedCallback(){for(const t in this.$$.slotted)this.appendChild(this.$$.slotted[t]);}attributeChangedCallback(t,e,n){this[t]=n;}$destroy(){gt(this,1),this.$destroy=o;}$on(t,e){const n=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return n.push(e),()=>{const t=n.indexOf(e);-1!==t&&n.splice(t,1);}}$set(){}});class bt{$destroy(){gt(this,1),this.$destroy=o;}$on(t,e){const n=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return n.push(e),()=>{const t=n.indexOf(e);-1!==t&&n.splice(t,1);}}$set(){}}function Ft(t,e){document.dispatchEvent(A(t,e));}function vt(t){Ft("SvelteDOMRemove",{node:t}),k(t);}var $t,yt,wt,kt=Object.freeze({__proto__:null,HtmlTag:class{constructor(t,e=null){this.e=x("div"),this.a=e,this.u(t);}m(t,e=null){for(let n=0;n<this.n.length;n+=1)w(t,this.n[n],e);this.t=t;}u(t){this.e.innerHTML=t,this.n=Array.from(this.e.childNodes);}p(t){this.d(),this.u(t),this.m(this.t,this.a);}d(){this.n.forEach(k);}},SvelteComponent:bt,SvelteComponentDev:class extends bt{constructor(t){if(!t||!t.target&&!t.$$inline)throw new Error("'target' is a required option");super();}$destroy(){super.$destroy(),this.$destroy=()=>{console.warn("Component was already destroyed");};}},get SvelteElement(){return _t},add_attribute:function(t,e,n){return null==e||n&&!e?"":` ${t}${!0===e?"":`=${"string"==typeof e?JSON.stringify(pt(e)):`"${e}"`}`}`},add_classes:function(t){return t?` class="${t}"`:""},add_flush_callback:function(t){I.push(t);},add_location:function(t,e,n,o,r){t.__svelte_meta={loc:{file:e,line:n,column:o,char:r}};},add_render_callback:K,add_resize_listener:function(t,e){"static"===getComputedStyle(t).position&&(t.style.position="relative");const n=document.createElement("object");let o;return n.setAttribute("style","display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; pointer-events: none; z-index: -1;"),n.setAttribute("aria-hidden","true"),n.type="text/html",n.tabIndex=-1,n.onload=()=>{(o=n.contentDocument.defaultView).addEventListener("resize",e);},/Trident/.test(navigator.userAgent)?(t.appendChild(n),n.data="about:blank"):(n.data="about:blank",t.appendChild(n)),{cancel:()=>{o&&o.removeEventListener&&o.removeEventListener("resize",e),t.removeChild(n);}}},add_transform:N,afterUpdate:function(t){z().$$.after_update.push(t);},append:y,append_dev:function(t,e){Ft("SvelteDOMInsert",{target:t,node:e}),y(t,e);},assign:i,attr:C,attr_dev:function(t,e,n){C(t,e,n),null==n?Ft("SvelteDOMRemoveAttribute",{node:t,attribute:e}):Ft("SvelteDOMSetAttribute",{node:t,attribute:e,value:n});},beforeUpdate:function(t){z().$$.before_update.push(t);},bind:function(t,e,n){p(t.$$.props,e)&&(e=t.$$.props[e]||e,t.$$.bound[e]=n,n(t.$$.ctx[e]));},binding_callbacks:U,blank_object:u,bubble:function(t,e){const n=t.$$.callbacks[e.type];n&&n.slice().forEach(t=>t(e));},check_outros:ot,children:D,claim_component:function(t,e){t&&t.l(e);},claim_element:function(t,e,n,o){for(let o=0;o<t.length;o+=1){const r=t[o];if(r.nodeName===e){for(let t=0;t<r.attributes.length;t+=1){const e=r.attributes[t];n[e.name]||r.removeAttribute(e.name);}return t.splice(o,1)[0]}}return o?E(e):x(e)},claim_space:function(t){return j(t," ")},claim_text:j,clear_loops:function(){g.forEach(t=>g.delete(t)),F=!1;},component_subscribe:function(t,e,n){t.$$.on_destroy.push(f(e,n));},createEventDispatcher:function(){const t=z();return (e,n)=>{const o=t.$$.callbacks[e];if(o){const r=A(e,n);o.slice().forEach(e=>{e.call(t,r);});}}},create_animation:function(t,e,n,i){if(!e)return o;const c=t.getBoundingClientRect();if(e.left===c.left&&e.right===c.right&&e.top===c.top&&e.bottom===c.bottom)return o;const{delay:s=0,duration:u=300,easing:a=r,start:l=_()+s,end:f=l+u,tick:d=o,css:p}=n(t,{from:e,to:c},i);let h,m=!0,g=!1;function b(){p&&q(t,h),m=!1;}return $(t=>{if(!g&&t>=l&&(g=!0),g&&t>=f&&(d(1,0),b()),!m)return !1;if(g){const e=0+1*a((t-l)/u);d(e,1-e);}return !0}),p&&(h=R(t,0,1,u,s,a,p)),s||(g=!0),d(0,1),b},create_bidirectional_transition:function(t,e,n,i){let c=e(t,n),s=i?0:1,u=null,f=null,d=null;function p(){d&&q(t,d);}function h(t,e){const n=t.b-s;return e*=Math.abs(n),{a:s,b:t.b,d:n,duration:e,start:t.start,end:t.start+e,group:t.group}}function m(e){const{delay:n=0,duration:i=300,easing:l=r,tick:m=o,css:g}=c||ct,b={start:_()+n,b:e};e||(b.group=et,et.r+=1),u?f=b:(g&&(p(),d=R(t,s,e,i,n,l,g)),e&&m(0,1),u=h(b,i),K(()=>Z(t,e,"start")),$(e=>{if(f&&e>f.start&&(u=h(f,i),f=null,Z(t,u.b,"start"),g&&(p(),d=R(t,s,u.b,u.duration,0,l,c.css))),u)if(e>=u.end)m(s=u.b,1-s),Z(t,u.b,"end"),f||(u.b?p():--u.group.r||a(u.group.c)),u=null;else if(e>=u.start){const t=e-u.start;s=u.a+u.d*l(t/u.duration),m(s,1-s);}return !(!u&&!f)}));}return {run(t){l(c)?X().then(()=>{c=c(),m(t);}):m(t);},end(){p(),u=f=null;}}},create_component:function(t){t&&t.c();},create_in_transition:function(t,e,n){let i,c,s=e(t,n),u=!1,a=0;function f(){i&&q(t,i);}function d(){const{delay:e=0,duration:n=300,easing:l=r,tick:d=o,css:p}=s||ct;p&&(i=R(t,0,1,n,e,l,p,a++)),d(0,1);const h=_()+e,m=h+n;c&&c.abort(),u=!0,K(()=>Z(t,!0,"start")),c=$(e=>{if(u){if(e>=m)return d(1,0),Z(t,!0,"end"),f(),u=!1;if(e>=h){const t=l((e-h)/n);d(t,1-t);}}return u});}let p=!1;return {start(){p||(q(t),l(s)?(s=s(),X().then(d)):d());},invalidate(){p=!1;},end(){u&&(f(),u=!1);}}},create_out_transition:function(t,e,n){let i,c=e(t,n),s=!0;const u=et;function f(){const{delay:e=0,duration:n=300,easing:l=r,tick:f=o,css:d}=c||ct;d&&(i=R(t,1,0,n,e,l,d));const p=_()+e,h=p+n;K(()=>Z(t,!1,"start")),$(e=>{if(s){if(e>=h)return f(0,1),Z(t,!1,"end"),--u.r||a(u.c),!1;if(e>=p){const t=l((e-p)/n);f(1-t,t);}}return s});}return u.r+=1,l(c)?X().then(()=>{c=c(),f();}):f(),{end(e){e&&c.tick&&c.tick(1,0),s&&(i&&q(t,i),s=!1);}}},create_slot:function(t,e,n){if(t){const o=d(t,e,n);return t[0](o)}},create_ssr_component:function(t){function e(e,n,o,r){const i=M;T({$$:{on_destroy:ht,context:new Map(i?i.$$.context:[]),on_mount:[],before_update:[],after_update:[],callbacks:u()}});const c=t(e,n,o,r);return T(i),c}return {render:(t={},n={})=>{ht=[];const o={head:"",css:new Set},r=e(o,t,{},n);return a(ht),{html:r,css:{code:Array.from(o.css).map(t=>t.code).join("\n"),map:null},head:o.head}},$$render:e}},get current_component(){return M},custom_event:A,dataset_dev:function(t,e,n){t.dataset[e]=n,Ft("SvelteDOMSetDataset",{node:t,property:e,value:n});},debug:function(t,e,n,o){return console.log(`{@debug} ${t?t+" ":""}(${e}:${n})`),console.log(o),""},destroy_block:ut,destroy_component:gt,destroy_each:function(t,e){for(let n=0;n<t.length;n+=1)t[n]&&t[n].d(e);},detach:k,detach_after_dev:function(t){for(;t.nextSibling;)vt(t.nextSibling);},detach_before_dev:function(t){for(;t.previousSibling;)vt(t.previousSibling);},detach_between_dev:function(t,e){for(;t.nextSibling&&t.nextSibling!==e;)vt(t.nextSibling);},detach_dev:vt,dirty_components:B,dispatch_dev:Ft,each:function(t,e){let n="";for(let o=0;o<t.length;o+=1)n+=e(t[o],o);return n},element:x,element_is:function(t,e){return document.createElement(t,{is:e})},empty:function(){return S("")},escape:pt,escaped:dt,exclude_internal_props:function(t){const e={};for(const n in t)"$"!==n[0]&&(e[n]=t[n]);return e},fix_and_destroy_block:function(t,e){t.f(),ut(t,e);},fix_and_outro_and_destroy_block:function(t,e){t.f(),at(t,e);},fix_position:function(t){const e=getComputedStyle(t);if("absolute"!==e.position&&"fixed"!==e.position){const{width:n,height:o}=e,r=t.getBoundingClientRect();t.style.position="absolute",t.style.width=n,t.style.height=o,N(t,r);}},flush:Q,getContext:function(t){return z().$$.context.get(t)},get_binding_group_value:function(t){const e=[];for(let n=0;n<t.length;n+=1)t[n].checked&&e.push(t[n].__value);return e},get_current_component:z,get_slot_changes:function(t,e,n,o){return t[1]?i({},i(e.$$scope.changed||{},t[1](o?o(n):{}))):e.$$scope.changed||{}},get_slot_context:d,get_spread_object:function(t){return "object"==typeof t&&null!==t?t:{}},get_spread_update:function(t,e){const n={},o={},r={$$scope:1};let i=t.length;for(;i--;){const c=t[i],s=e[i];if(s){for(const t in c)t in s||(o[t]=1);for(const t in s)r[t]||(n[t]=s[t],r[t]=1);t[i]=s;}else for(const t in c)r[t]=1;}for(const t in o)t in n||(n[t]=void 0);return n},get_store_value:function(t){let e;return f(t,t=>e=t)(),e},globals:st,group_outros:nt,handle_promise:function(t,e){const n=e.token={};function o(t,o,r,c){if(e.token!==n)return;e.resolved=r&&{[r]:c};const s=i(i({},e.ctx),e.resolved),u=t&&(e.current=t)(s);let a=!1;e.block&&(e.blocks?e.blocks.forEach((t,n)=>{n!==o&&t&&(nt(),it(t,1,1,()=>{e.blocks[n]=null;}),ot());}):e.block.d(1),u.c(),rt(u,1),u.m(e.mount(),e.anchor),a=!0),e.block=u,e.blocks&&(e.blocks[o]=u),a&&Q();}if(c(t)){const n=z();if(t.then(t=>{T(n),o(e.then,1,e.value,t),T(null);},t=>{T(n),o(e.catch,2,e.error,t),T(null);}),e.current!==e.pending)return o(e.pending,0),!0}else {if(e.current!==e.then)return o(e.then,1,e.value,t),!0;e.resolved={[e.value]:t};}},has_prop:p,identity:r,init:function(t,e,n,r,i,c){const s=M;T(t);const l=e.props||{},f=t.$$={fragment:null,ctx:null,props:c,update:o,not_equal:i,bound:u(),on_mount:[],on_destroy:[],before_update:[],after_update:[],context:new Map(s?s.$$.context:[]),callbacks:u(),dirty:null};let d=!1;f.ctx=n?n(t,l,(e,n,o=n)=>(f.ctx&&i(f.ctx[e],f.ctx[e]=o)&&(f.bound[e]&&f.bound[e](o),d&&function(t,e){t.$$.dirty||(B.push(t),G(),t.$$.dirty=u()),t.$$.dirty[e]=!0;}(t,e)),n)):l,f.update(),d=!0,a(f.before_update),f.fragment=!!r&&r(f.ctx),e.target&&(e.hydrate?f.fragment&&f.fragment.l(D(e.target)):f.fragment&&f.fragment.c(),e.intro&&rt(t.$$.fragment),mt(t,e.target,e.anchor),Q()),T(s);},insert:w,insert_dev:function(t,e,n){Ft("SvelteDOMInsert",{target:t,node:e,anchor:n}),w(t,e,n);},intros:{enabled:!1},invalid_attribute_name_character:ft,is_client:h,is_function:l,is_promise:c,listen:O,listen_dev:function(t,e,n,o,r,i){const c=!0===o?["capture"]:o?Array.from(Object.keys(o)):[];r&&c.push("preventDefault"),i&&c.push("stopPropagation"),Ft("SvelteDOMAddEventListener",{node:t,event:e,handler:n,modifiers:c});const s=O(t,e,n,o);return ()=>{Ft("SvelteDOMRemoveEventListener",{node:t,event:e,handler:n,modifiers:c}),s();}},loop:$,loop_guard:function(t){const e=Date.now();return ()=>{if(Date.now()-e>t)throw new Error("Infinite loop detected")}},measure:function(t){const e={};let n=t.length;for(;n--;)e[t[n].key]=t[n].node.getBoundingClientRect();return e},missing_component:{$$render:()=>""},mount_component:mt,noop:o,not_equal:function(t,e){return t!=t?e==e:t!==e},get now(){return _},null_to_empty:function(t){return null==t?"":t},object_without_properties:function(t,e){const n={};for(const o in t)p(t,o)&&-1===e.indexOf(o)&&(n[o]=t[o]);return n},onDestroy:function(t){z().$$.on_destroy.push(t);},onMount:function(t){z().$$.on_mount.push(t);},once:function(t){let e=!1;return function(...n){e||(e=!0,t.call(this,...n));}},outro_and_destroy_block:at,prevent_default:function(t){return function(e){return e.preventDefault(),t.call(this,e)}},prop_dev:function(t,e,n){t[e]=n,Ft("SvelteDOMSetProperty",{node:t,property:e,value:n});},get raf(){return m},run:s,run_all:a,safe_not_equal:function(t,e){return t!=t?e==e:t!==e||t&&"object"==typeof t||"function"==typeof t},schedule_update:G,select_multiple_value:function(t){return [].map.call(t.querySelectorAll(":checked"),t=>t.__value)},select_option:function(t,e){for(let n=0;n<t.options.length;n+=1){const o=t.options[n];if(o.__value===e)return void(o.selected=!0)}},select_options:function(t,e){for(let n=0;n<t.options.length;n+=1){const o=t.options[n];o.selected=~e.indexOf(o.__value);}},select_value:function(t){const e=t.querySelector(":checked")||t.options[0];return e&&e.__value},self:function(t){return function(e){e.target===this&&t.call(this,e);}},setContext:function(t,e){z().$$.context.set(t,e);},set_attributes:function(t,e){const n=Object.getOwnPropertyDescriptors(t.__proto__);for(const o in e)null==e[o]?t.removeAttribute(o):"style"===o?t.style.cssText=e[o]:n[o]&&n[o].set?t[o]=e[o]:C(t,o,e[o]);},set_current_component:T,set_custom_element_data:function(t,e,n){e in t?t[e]=n:C(t,e,n);},set_data:function(t,e){e=""+e,t.data!==e&&(t.data=e);},set_data_dev:function(t,e){e=""+e,t.data!==e&&(Ft("SvelteDOMSetData",{node:t,data:e}),t.data=e);},set_input_type:function(t,e){try{t.type=e;}catch(t){}},set_input_value:function(t,e){(null!=e||t.value)&&(t.value=e);},set_now:function(t){_=t;},set_raf:function(t){m=t;},set_store_value:function(t,e,n=e){return t.set(n),e},set_style:function(t,e,n,o){t.style.setProperty(e,n,o?"important":"");},set_svg_attributes:function(t,e){for(const n in e)C(t,n,e[n]);},space:function(){return S(" ")},spread:function(t,e){const n=Object.assign({},...t);e&&(null==n.class?n.class=e:n.class+=" "+e);let o="";return Object.keys(n).forEach(t=>{if(ft.test(t))return;const e=n[t];!0===e?o+=" "+t:lt.has(t.toLowerCase())?e&&(o+=" "+t):null!=e&&(o+=" "+t+"="+JSON.stringify(String(e).replace(/"/g,"&#34;").replace(/'/g,"&#39;")));}),o},stop_propagation:function(t){return function(e){return e.stopPropagation(),t.call(this,e)}},subscribe:f,svg_element:E,text:S,tick:function(){return G(),J},time_ranges_to_array:function(t){const e=[];for(let n=0;n<t.length;n+=1)e.push({start:t.start(n),end:t.end(n)});return e},to_number:function(t){return ""===t?void 0:+t},toggle_class:function(t,e,n){t.classList[n?"add":"remove"](e);},transition_in:rt,transition_out:it,update_keyed_each:function(t,e,n,o,r,i,c,s,u,a,l,f){let d=t.length,p=i.length,h=d;const _={};for(;h--;)_[t[h].key]=h;const m=[],g=new Map,b=new Map;for(h=p;h--;){const t=f(r,i,h),s=n(t);let u=c.get(s);u?o&&u.p(e,t):(u=a(s,t)).c(),g.set(s,m[h]=u),s in _&&b.set(s,Math.abs(h-_[s]));}const F=new Set,v=new Set;function $(t){rt(t,1),t.m(s,l),c.set(t.key,t),l=t.first,p--;}for(;d&&p;){const e=m[p-1],n=t[d-1],o=e.key,r=n.key;e===n?(l=e.first,d--,p--):g.has(r)?!c.has(o)||F.has(o)?$(e):v.has(r)?d--:b.get(o)>b.get(r)?(v.add(o),$(e)):(F.add(r),d--):(u(n,c),d--);}for(;d--;){const e=t[d];g.has(e.key)||u(e,c);}for(;p;)$(m[p-1]);return m},validate_component:function(t,e){if(!t||!t.$$render)throw "svelte:component"===e&&(e+=" this={...}"),new Error(`<${e}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);return t},validate_store:function(t,e){if(!t||"function"!=typeof t.subscribe)throw new Error(`'${e}' is not a store with a 'subscribe' method`)},xlink_attr:function(t,e,n){t.setAttributeNS("http://www.w3.org/1999/xlink",e,n);}}),xt=($t=kt)&&$t.default||$t,Et=(function(t,e){Object.defineProperty(e,"__esModule",{value:!0});const n=[];function o(t,e){return {subscribe:r(t,e).subscribe}}function r(t,e=xt.noop){let o;const r=[];function i(e){if(xt.safe_not_equal(t,e)&&(t=e,o)){const e=!n.length;for(let e=0;e<r.length;e+=1){const o=r[e];o[1](),n.push(o,t);}if(e){for(let t=0;t<n.length;t+=2)n[t][0](n[t+1]);n.length=0;}}}return {set:i,update:function(e){i(e(t));},subscribe:function(n,c=xt.noop){const s=[n,c];return r.push(s),1===r.length&&(o=e(i)||xt.noop),n(t),()=>{const t=r.indexOf(s);-1!==t&&r.splice(t,1),0===r.length&&(o(),o=null);}}}}Object.defineProperty(e,"get",{enumerable:!0,get:function(){return xt.get_store_value}}),e.derived=function(t,e,n){const r=!Array.isArray(t),i=r?[t]:t,c=e.length<2;return o(n,t=>{let n=!1;const o=[];let s=0,u=xt.noop;const a=()=>{if(s)return;u();const n=e(r?o[0]:o,t);c?t(n):u=xt.is_function(n)?n:xt.noop;},l=i.map((t,e)=>t.subscribe(t=>{o[e]=t,s&=~(1<<e),n&&a();},()=>{s|=1<<e;}));return n=!0,a(),function(){xt.run_all(l),u();}})},e.readable=o,e.writable=r;}(yt={exports:{}},yt.exports),yt.exports);(wt=Et)&&wt.__esModule&&Object.prototype.hasOwnProperty.call(wt,"default")&&wt.default;var St=Et.derived,Ot=(Et.readable,Et.writable);const Ct=({navigator:t,hash:e,search:n,fallback:o}={})=>{let r;const i=(t,e)=>{const n=t.substr(1).split("&").find(t=>0===t.indexOf(e));if(n)return n.split("=").pop()};return "undefined"!=typeof window&&(t&&(r=window.navigator.language||window.navigator.languages[0]),n&&(r=i(window.location.search,n)),e&&(r=i(window.location.hash,e))),r||o};let Dt,jt;const At={number:{scientific:{notation:"scientific"},engineering:{notation:"engineering"},compactLong:{notation:"compact",compactDisplay:"long"},compactShort:{notation:"compact",compactDisplay:"short"}}};const Lt=microMemoize((t,n)=>new IntlMessageFormat(t,n,At)),Pt=microMemoize((e,n)=>jt[n][e]||objectResolvePath(jt[n],e));function Rt(t,{values:e,locale:n=Dt}={}){return Lt(t,n).format(e)}function qt(t,{values:e,locale:n=Dt}={}){const o=Pt(t,n);return o?e?Lt(o,n).format(e):o:(console.warn(`[svelte-i18n] The message "${t}" was not found in the locale "${n}".`),t)}qt.time=(t,{format:e="short"}={})=>Rt(`{t,time,${e}}`,{values:{t:t}}),qt.date=(t,{format:e="short"}={})=>Rt(`{d,date,${e}}`,{values:{d:t}}),qt.number=(t,{format:e}={})=>Rt(`{n,number,${e}}`,{values:{n:t}}),qt.capital=(t,e)=>(t=>t.replace(/(^|\s)\S/,t=>t.toUpperCase()))(qt(t,e)),qt.title=(t,e)=>(t=>t.replace(/(^|\s)\S/g,t=>t.toUpperCase()))(qt(t,e)),qt.upper=(t,e)=>(t=>t.toLocaleUpperCase())(qt(t,e)),qt.lower=(t,e)=>(t=>t.toLocaleLowerCase())(qt(t,e));const Nt=Ot({});Nt.subscribe(t=>{jt=t;});const Tt=Ot({}),zt=Tt.set;Tt.set=t=>{const e=function(t){if(jt[t])return t;if("string"==typeof t){const e=t.split("-").shift();if(jt[e])return e}return null}(t);if(e)return zt(e);throw Error(`[svelte-i18n] Locale "${t}" not found.`)},Tt.update=t=>zt(t(Dt)),Tt.subscribe(t=>{Dt=t;});const Bt=St([Tt,Nt],()=>qt);

function noop$1() { }
const identity = x => x;
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
function subscribe(store, ...callbacks) {
    if (store == null) {
        return noop$1;
    }
    const unsub = store.subscribe(...callbacks);
    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}
function get_store_value(store) {
    let value;
    subscribe(store, _ => value = _)();
    return value;
}
function component_subscribe(component, store, callback) {
    component.$$.on_destroy.push(subscribe(store, callback));
}

const is_client = typeof window !== 'undefined';
let now = is_client
    ? () => window.performance.now()
    : () => Date.now();
let raf = is_client ? cb => requestAnimationFrame(cb) : noop$1;

const tasks = new Set();
function run_tasks(now) {
    tasks.forEach(task => {
        if (!task.c(now)) {
            tasks.delete(task);
            task.f();
        }
    });
    if (tasks.size !== 0)
        raf(run_tasks);
}
/**
 * Creates a new task that runs on each raf frame
 * until it returns a falsy value or is aborted
 */
function loop(callback) {
    let task;
    if (tasks.size === 0)
        raf(run_tasks);
    return {
        promise: new Promise(fulfill => {
            tasks.add(task = { c: callback, f: fulfill });
        }),
        abort() {
            tasks.delete(task);
        }
    };
}

function append(target, node) {
    target.appendChild(node);
}
function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function element(name) {
    return document.createElement(name);
}
function svg_element(name) {
    return document.createElementNS('http://www.w3.org/2000/svg', name);
}
function text(data) {
    return document.createTextNode(data);
}
function space() {
    return text(' ');
}
function empty() {
    return text('');
}
function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
    if (value == null)
        node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
        node.setAttribute(attribute, value);
}
function children(element) {
    return Array.from(element.childNodes);
}
function set_data(text, data) {
    data = '' + data;
    if (text.wholeText !== data)
        text.data = data;
}
function set_style(node, key, value, important) {
    node.style.setProperty(key, value, important ? 'important' : '');
}
function toggle_class(element, name, toggle) {
    element.classList[toggle ? 'add' : 'remove'](name);
}
function custom_event(type, detail) {
    const e = document.createEvent('CustomEvent');
    e.initCustomEvent(type, false, false, detail);
    return e;
}

const active_docs = new Set();
let active = 0;
// https://github.com/darkskyapp/string-hash/blob/master/index.js
function hash(str) {
    let hash = 5381;
    let i = str.length;
    while (i--)
        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
    return hash >>> 0;
}
function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
    const step = 16.666 / duration;
    let keyframes = '{\n';
    for (let p = 0; p <= 1; p += step) {
        const t = a + (b - a) * ease(p);
        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
    }
    const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
    const name = `__svelte_${hash(rule)}_${uid}`;
    const doc = node.ownerDocument;
    active_docs.add(doc);
    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);
    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});
    if (!current_rules[name]) {
        current_rules[name] = true;
        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
    }
    const animation = node.style.animation || '';
    node.style.animation = `${animation ? `${animation}, ` : ``}${name} ${duration}ms linear ${delay}ms 1 both`;
    active += 1;
    return name;
}
function delete_rule(node, name) {
    const previous = (node.style.animation || '').split(', ');
    const next = previous.filter(name
        ? anim => anim.indexOf(name) < 0 // remove specific animation
        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
    );
    const deleted = previous.length - next.length;
    if (deleted) {
        node.style.animation = next.join(', ');
        active -= deleted;
        if (!active)
            clear_rules();
    }
}
function clear_rules() {
    raf(() => {
        if (active)
            return;
        active_docs.forEach(doc => {
            const stylesheet = doc.__svelte_stylesheet;
            let i = stylesheet.cssRules.length;
            while (i--)
                stylesheet.deleteRule(i);
            doc.__svelte_rules = {};
        });
        active_docs.clear();
    });
}

function create_animation(node, from, fn, params) {
    if (!from)
        return noop$1;
    const to = node.getBoundingClientRect();
    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)
        return noop$1;
    const { delay = 0, duration = 300, easing = identity, 
    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?
    start: start_time = now() + delay, 
    // @ts-ignore todo:
    end = start_time + duration, tick = noop$1, css } = fn(node, { from, to }, params);
    let running = true;
    let started = false;
    let name;
    function start() {
        if (css) {
            name = create_rule(node, 0, 1, duration, delay, easing, css);
        }
        if (!delay) {
            started = true;
        }
    }
    function stop() {
        if (css)
            delete_rule(node, name);
        running = false;
    }
    loop(now => {
        if (!started && now >= start_time) {
            started = true;
        }
        if (started && now >= end) {
            tick(1, 0);
            stop();
        }
        if (!running) {
            return false;
        }
        if (started) {
            const p = now - start_time;
            const t = 0 + 1 * easing(p / duration);
            tick(t, 1 - t);
        }
        return true;
    });
    start();
    tick(0, 1);
    return stop;
}
function fix_position(node) {
    const style = getComputedStyle(node);
    if (style.position !== 'absolute' && style.position !== 'fixed') {
        const { width, height } = style;
        const a = node.getBoundingClientRect();
        node.style.position = 'absolute';
        node.style.width = width;
        node.style.height = height;
        add_transform(node, a);
    }
}
function add_transform(node, a) {
    const b = node.getBoundingClientRect();
    if (a.left !== b.left || a.top !== b.top) {
        const style = getComputedStyle(node);
        const transform = style.transform === 'none' ? '' : style.transform;
        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;
    }
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
function get_current_component() {
    if (!current_component)
        throw new Error(`Function called outside component initialization`);
    return current_component;
}
function onDestroy(fn) {
    get_current_component().$$.on_destroy.push(fn);
}

const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
let flushing = false;
const seen_callbacks = new Set();
function flush() {
    if (flushing)
        return;
    flushing = true;
    do {
        // first, call beforeUpdate functions
        // and update components
        for (let i = 0; i < dirty_components.length; i += 1) {
            const component = dirty_components[i];
            set_current_component(component);
            update(component.$$);
        }
        dirty_components.length = 0;
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
                callback();
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
    flushing = false;
    seen_callbacks.clear();
}
function update($$) {
    if ($$.fragment !== null) {
        $$.update();
        run_all($$.before_update);
        const dirty = $$.dirty;
        $$.dirty = [-1];
        $$.fragment && $$.fragment.p($$.ctx, dirty);
        $$.after_update.forEach(add_render_callback);
    }
}

let promise;
function wait() {
    if (!promise) {
        promise = Promise.resolve();
        promise.then(() => {
            promise = null;
        });
    }
    return promise;
}
function dispatch(node, direction, kind) {
    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
}
const outroing = new Set();
let outros;
function group_outros() {
    outros = {
        r: 0,
        c: [],
        p: outros // parent group
    };
}
function check_outros() {
    if (!outros.r) {
        run_all(outros.c);
    }
    outros = outros.p;
}
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function transition_out(block, local, detach, callback) {
    if (block && block.o) {
        if (outroing.has(block))
            return;
        outroing.add(block);
        outros.c.push(() => {
            outroing.delete(block);
            if (callback) {
                if (detach)
                    block.d(1);
                callback();
            }
        });
        block.o(local);
    }
}
const null_transition = { duration: 0 };
function create_in_transition(node, fn, params) {
    let config = fn(node, params);
    let running = false;
    let animation_name;
    let task;
    let uid = 0;
    function cleanup() {
        if (animation_name)
            delete_rule(node, animation_name);
    }
    function go() {
        const { delay = 0, duration = 300, easing = identity, tick = noop$1, css } = config || null_transition;
        if (css)
            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
        tick(0, 1);
        const start_time = now() + delay;
        const end_time = start_time + duration;
        if (task)
            task.abort();
        running = true;
        add_render_callback(() => dispatch(node, true, 'start'));
        task = loop(now => {
            if (running) {
                if (now >= end_time) {
                    tick(1, 0);
                    dispatch(node, true, 'end');
                    cleanup();
                    return running = false;
                }
                if (now >= start_time) {
                    const t = easing((now - start_time) / duration);
                    tick(t, 1 - t);
                }
            }
            return running;
        });
    }
    let started = false;
    return {
        start() {
            if (started)
                return;
            delete_rule(node);
            if (is_function(config)) {
                config = config();
                wait().then(go);
            }
            else {
                go();
            }
        },
        invalidate() {
            started = false;
        },
        end() {
            if (running) {
                cleanup();
                running = false;
            }
        }
    };
}
function create_out_transition(node, fn, params) {
    let config = fn(node, params);
    let running = true;
    let animation_name;
    const group = outros;
    group.r += 1;
    function go() {
        const { delay = 0, duration = 300, easing = identity, tick = noop$1, css } = config || null_transition;
        if (css)
            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);
        const start_time = now() + delay;
        const end_time = start_time + duration;
        add_render_callback(() => dispatch(node, false, 'start'));
        loop(now => {
            if (running) {
                if (now >= end_time) {
                    tick(0, 1);
                    dispatch(node, false, 'end');
                    if (!--group.r) {
                        // this will result in `end()` being called,
                        // so we don't need to clean up here
                        run_all(group.c);
                    }
                    return false;
                }
                if (now >= start_time) {
                    const t = easing((now - start_time) / duration);
                    tick(1 - t, t);
                }
            }
            return running;
        });
    }
    if (is_function(config)) {
        wait().then(() => {
            // @ts-ignore
            config = config();
            go();
        });
    }
    else {
        go();
    }
    return {
        end(reset) {
            if (reset && config.tick) {
                config.tick(1, 0);
            }
            if (running) {
                if (animation_name)
                    delete_rule(node, animation_name);
                running = false;
            }
        }
    };
}
function outro_and_destroy_block(block, lookup) {
    transition_out(block, 1, 1, () => {
        lookup.delete(block.key);
    });
}
function fix_and_outro_and_destroy_block(block, lookup) {
    block.f();
    outro_and_destroy_block(block, lookup);
}
function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
    let o = old_blocks.length;
    let n = list.length;
    let i = o;
    const old_indexes = {};
    while (i--)
        old_indexes[old_blocks[i].key] = i;
    const new_blocks = [];
    const new_lookup = new Map();
    const deltas = new Map();
    i = n;
    while (i--) {
        const child_ctx = get_context(ctx, list, i);
        const key = get_key(child_ctx);
        let block = lookup.get(key);
        if (!block) {
            block = create_each_block(key, child_ctx);
            block.c();
        }
        else if (dynamic) {
            block.p(child_ctx, dirty);
        }
        new_lookup.set(key, new_blocks[i] = block);
        if (key in old_indexes)
            deltas.set(key, Math.abs(i - old_indexes[key]));
    }
    const will_move = new Set();
    const did_move = new Set();
    function insert(block) {
        transition_in(block, 1);
        block.m(node, next);
        lookup.set(block.key, block);
        next = block.first;
        n--;
    }
    while (o && n) {
        const new_block = new_blocks[n - 1];
        const old_block = old_blocks[o - 1];
        const new_key = new_block.key;
        const old_key = old_block.key;
        if (new_block === old_block) {
            // do nothing
            next = new_block.first;
            o--;
            n--;
        }
        else if (!new_lookup.has(old_key)) {
            // remove old block
            destroy(old_block, lookup);
            o--;
        }
        else if (!lookup.has(new_key) || will_move.has(new_key)) {
            insert(new_block);
        }
        else if (did_move.has(old_key)) {
            o--;
        }
        else if (deltas.get(new_key) > deltas.get(old_key)) {
            did_move.add(new_key);
            insert(new_block);
        }
        else {
            will_move.add(old_key);
            o--;
        }
    }
    while (o--) {
        const old_block = old_blocks[o];
        if (!new_lookup.has(old_block.key))
            destroy(old_block, lookup);
    }
    while (n)
        insert(new_blocks[n - 1]);
    return new_blocks;
}
function create_component(block) {
    block && block.c();
}
function mount_component(component, target, anchor) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment && fragment.m(target, anchor);
    // onMount happens before the initial afterUpdate
    add_render_callback(() => {
        const new_on_destroy = on_mount.map(run).filter(is_function);
        if (on_destroy) {
            on_destroy.push(...new_on_destroy);
        }
        else {
            // Edge case - component was destroyed immediately,
            // most likely as a result of a binding initialising
            run_all(new_on_destroy);
        }
        component.$$.on_mount = [];
    });
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
        run_all($$.on_destroy);
        $$.fragment && $$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        $$.on_destroy = $$.fragment = null;
        $$.ctx = [];
    }
}
function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty.fill(0);
    }
    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
}
function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const prop_values = options.props || {};
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props,
        update: noop$1,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        before_update: [],
        after_update: [],
        context: new Map(parent_component ? parent_component.$$.context : []),
        // everything else
        callbacks: blank_object(),
        dirty
    };
    let ready = false;
    $$.ctx = instance
        ? instance(component, prop_values, (i, ret, ...rest) => {
            const value = rest.length ? rest[0] : ret;
            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                if ($$.bound[i])
                    $$.bound[i](value);
                if (ready)
                    make_dirty(component, i);
            }
            return ret;
        })
        : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    // `false` as a special case of no DOM component
    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
    if (options.target) {
        if (options.hydrate) {
            const nodes = children(options.target);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.l(nodes);
            nodes.forEach(detach);
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor);
        flush();
    }
    set_current_component(parent_component);
}
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop$1;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set() {
        // overridden by instance, if it has props
    }
}

function cubicOut(t) {
    const f = t - 1.0;
    return f * f * f + 1.0;
}
function quintIn(t) {
    return t * t * t * t * t;
}

function fly(node, { delay = 0, duration = 400, easing = cubicOut, x = 0, y = 0, opacity = 0 }) {
    const style = getComputedStyle(node);
    const target_opacity = +style.opacity;
    const transform = style.transform === 'none' ? '' : style.transform;
    const od = target_opacity * (1 - opacity);
    return {
        delay,
        duration,
        easing,
        css: (t, u) => `
			transform: ${transform} translate(${(1 - t) * x}px, ${(1 - t) * y}px);
			opacity: ${target_opacity - (od * u)}`
    };
}

function flip(node, animation, params) {
    const style = getComputedStyle(node);
    const transform = style.transform === 'none' ? '' : style.transform;
    const scaleX = animation.from.width / node.clientWidth;
    const scaleY = animation.from.height / node.clientHeight;
    const dx = (animation.from.left - animation.to.left) / scaleX;
    const dy = (animation.from.top - animation.to.top) / scaleY;
    const d = Math.sqrt(dx * dx + dy * dy);
    const { delay = 0, duration = (d) => Math.sqrt(d) * 120, easing = cubicOut } = params;
    return {
        delay,
        duration: is_function(duration) ? duration(d) : duration,
        easing,
        css: (_t, u) => `transform: ${transform} translate(${u * dx}px, ${u * dy}px);`
    };
}

const subscriber_queue = [];
/**
 * Create a `Writable` store that allows both updating and reading by subscription.
 * @param {*=}value initial value
 * @param {StartStopNotifier=}start start and stop notifications for subscriptions
 */
function writable(value, start = noop$1) {
    let stop;
    const subscribers = [];
    function set(new_value) {
        if (safe_not_equal(value, new_value)) {
            value = new_value;
            if (stop) { // store is ready
                const run_queue = !subscriber_queue.length;
                for (let i = 0; i < subscribers.length; i += 1) {
                    const s = subscribers[i];
                    s[1]();
                    subscriber_queue.push(s, value);
                }
                if (run_queue) {
                    for (let i = 0; i < subscriber_queue.length; i += 2) {
                        subscriber_queue[i][0](subscriber_queue[i + 1]);
                    }
                    subscriber_queue.length = 0;
                }
            }
        }
    }
    function update(fn) {
        set(fn(value));
    }
    function subscribe(run, invalidate = noop$1) {
        const subscriber = [run, invalidate];
        subscribers.push(subscriber);
        if (subscribers.length === 1) {
            stop = start(set) || noop$1;
        }
        run(value);
        return () => {
            const index = subscribers.indexOf(subscriber);
            if (index !== -1) {
                subscribers.splice(index, 1);
            }
            if (subscribers.length === 0) {
                stop();
                stop = null;
            }
        };
    }
    return { set, update, subscribe };
}

function argsEqual(args1, args2) {
    return JSON.stringify(args1) === JSON.stringify(args2);
}
// will update object(merge new data) in list if it passes predicate, otherwise adds new object
function replaceOrAdd(list, predicate, data) {
    const clone = [...list];
    const index = clone.findIndex(predicate);
    if (index !== -1) {
        const { startTime } = clone[index];
        const { startTime: serverStartTime } = data;
        clone[index] = { ...data, startTime: startTime || serverStartTime };
        return clone;
    }
    return [...list, data];
}
function extractMessageFromError(error) {
    if (!error.stack || !error.message) {
        return {
            eventCode: 'txError',
            errorMsg: 'An unknown error occured'
        };
    }
    const message = error.stack || error.message;
    if (message.includes('User denied transaction signature')) {
        return {
            eventCode: 'txSendFail',
            errorMsg: 'User denied transaction signature'
        };
    }
    if (message.includes('transaction underpriced')) {
        return {
            eventCode: 'txUnderpriced',
            errorMsg: 'Transaction is under priced'
        };
    }
    return {
        eventCode: 'txError',
        errorMsg: message
    };
}
function createEmitter() {
    return {
        listeners: {},
        on: function (eventCode, listener) {
            // check if valid eventCode
            switch (eventCode) {
                case 'txSent':
                case 'txPool':
                case 'txConfirmed':
                case 'txSpeedUp':
                case 'txCancel':
                case 'txFailed':
                case 'txRequest':
                case 'nsfFail':
                case 'txRepeat':
                case 'txAwaitingApproval':
                case 'txConfirmReminder':
                case 'txSendFail':
                case 'txError':
                case 'txUnderPriced':
                case 'all':
                    break;
                default:
                    throw new Error(`${eventCode} is not a valid event code, for a list of valid event codes see: https://github.com/blocknative/notify`);
            }
            // check that listener is a function
            if (typeof listener !== 'function') {
                throw new Error('Listener must be a function');
            }
            // add listener for the eventCode
            this.listeners[eventCode] = listener;
        },
        emit: function (state) {
            if (this.listeners[state.eventCode || '']) {
                return this.listeners[state.eventCode || ''](state);
            }
            if (this.listeners.all) {
                return this.listeners.all(state);
            }
        }
    };
}
function localNetwork(networkId) {
    switch (networkId) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 42:
        case 100:
            return false;
        default:
            return true;
    }
}

const defaultNotifyMessages = {
    en: {
        transaction: {
            txRequest: 'Your transaction is waiting for you to confirm',
            nsfFail: 'You have insufficient funds to complete this transaction',
            txUnderpriced: 'The gas price for your transaction is too low, try again with a higher gas price',
            txRepeat: 'This could be a repeat transaction',
            txAwaitingApproval: 'You have a previous transaction waiting for you to confirm',
            txConfirmReminder: 'Please confirm your transaction to continue, the transaction window may be behind your browser',
            txSendFail: 'You rejected the transaction',
            txSent: 'Your transaction has been sent to the network',
            txStallPending: 'Your transaction has stalled and has not entered the transaction pool',
            txPool: 'Your transaction has started',
            txStallConfirmed: "Your transaction has stalled and hasn't been confirmed",
            txSpeedUp: 'Your transaction has been sped up',
            txCancel: 'Your transaction is being canceled',
            txFailed: 'Your transaction has failed',
            txConfirmed: 'Your transaction has succeeded',
            txError: 'Oops something went wrong, please try again'
        },
        watched: {
            txPool: 'Your account is {verb} {formattedValue} {asset} {preposition} {counterpartyShortened}',
            txSpeedUp: 'Your account is {verb} {formattedValue} {asset} {preposition} {counterpartyShortened}',
            txCancel: 'Your account is {verb} {formattedValue} {asset} {preposition} {counterpartyShortened}',
            txConfirmed: 'Your account successfully {verb} {formattedValue} {asset} {preposition} {counterpartyShortened}',
            txFailed: 'Your account failed to {verb} {formattedValue} {asset} {preposition} {counterpartyShortened}'
        },
        time: {
            minutes: 'min',
            seconds: 'sec'
        }
    },
    es: {
        transaction: {
            txRequest: 'Su transacción está esperando que confirme',
            nsfFail: 'No tiene fondos suficientes para completar esta transacción.',
            txUnderpriced: 'El precio del gas para su transacción es demasiado bajo, intente nuevamente con un precio del gas más alto',
            txRepeat: 'Esto podría ser una transacción repetida',
            txAwaitingApproval: 'Tienes una transacción anterior esperando que confirmes',
            txConfirmReminder: 'Confirme su transacción para continuar, la ventana de transacción puede estar detrás de su navegador',
            txSendFail: 'Rechazaste la transacción',
            txSent: 'Su transacción ha sido enviada a la red.',
            txStallPending: 'Su transacción se ha estancado y no ha ingresado al grupo de transacciones',
            txPool: 'Su transacción ha comenzado',
            txStallConfirmed: 'Su transacción se ha estancado y no ha sido confirmada.',
            txSpeedUp: 'Su transacción ha sido acelerada',
            txCancel: 'Tu transacción está siendo cancelada',
            txFailed: 'Su transacción ha fallado',
            txConfirmed: 'Su transacción ha tenido éxito.',
            txError: 'Vaya, algo salió mal, por favor intente nuevamente'
        },
        watched: {
            txPool: 'su cuenta está {verb, select, receiving {recibiendo} sending {enviando}} {formattedValue} {asset} {preposition, select, from {desde} to {a}} {counterpartyShortened}',
            txSpeedUp: 'su cuenta está {verb, select, receiving {recibiendo} sending {enviando}} {formattedValue} {asset} {preposition, select, from {desde} to {a}} {counterpartyShortened}',
            txCancel: 'su cuenta está {verb, select, receiving {recibiendo} sending {enviando}} {formattedValue} {asset} {preposition, select, from {desde} to {a}} {counterpartyShortened}',
            txConfirmed: 'su cuenta {verb, select, received {recibió} sent {ha enviado}} con éxito {formattedValue} {asset} {preposition, select, from {de} to {a}} {counterpartyShortened}',
            txFailed: 'su cuenta fallado {verb, select, received {recibió} sent {ha enviado}} con éxito {formattedValue} {asset} {preposition, select, from {de} to {a}} {counterpartyShortened}'
        },
        time: {
            minutes: 'min',
            seconds: 'sec'
        }
    }
};

const app = writable({
    version: '',
    dappId: '',
    networkId: 1,
    nodeSynced: true,
    mobilePosition: 'top',
    desktopPosition: 'bottomRight',
    darkMode: false,
    txApproveReminderTimeout: 20000,
    txStallPendingTimeout: 20000,
    txStallConfirmedTimeout: 90000,
    clientLocale: 'en',
    notifyMessages: defaultNotifyMessages
});
const transactions = createTransactionStore([]);
const notifications = createNotificationStore([]);
function createTransactionStore(initialState) {
    const { subscribe, update } = writable(initialState);
    function updateQueue(transaction) {
        const predicate = (tx) => tx.id === transaction.id;
        update((store) => {
            return replaceOrAdd(store, predicate, transaction);
        });
    }
    function add(transaction) {
        update((store) => [...store, transaction]);
    }
    return {
        subscribe,
        updateQueue,
        add
    };
}
function createNotificationStore(initialState) {
    const { subscribe, update } = writable(initialState);
    function add(notification) {
        update((store) => {
            const existingNotification = store.find((n) => n.id === notification.id);
            // if notification is a hint type or there are no existing notifications with same id, then just add it.
            if (notification.type === 'hint' || !existingNotification) {
                return [...store, notification];
            }
            // otherwise filter out all notifications with the same id and then add the new notification
            return [
                ...store.filter((n) => n.id !== notification.id),
                notification
            ];
        });
    }
    function remove(id, eventCode) {
        update((store) => store.filter((n) => n.id !== id || n.eventCode !== eventCode));
    }
    return {
        subscribe,
        add,
        remove,
        update
    };
}

/* src/components/CloseIcon.svelte generated by Svelte v3.24.0 */

function add_css() {
	var style = element("style");
	style.id = "svelte-1nxfpxx-style";
	style.textContent = "div.svelte-1nxfpxx{display:flex;justify-content:center;align-items:center;font-size:inherit;font-family:inherit;padding:0.3em;border-radius:40px;transition:background 150ms ease-in-out}div.svelte-1nxfpxx:hover{background:#eeeeee;cursor:pointer}.bn-notify-dark-mode-close-background.svelte-1nxfpxx:hover{background:#00222c}";
	append(document.head, style);
}

function create_fragment(ctx) {
	let div;
	let svg;
	let g;
	let path0;
	let path1;
	let g_stroke_value;
	let div_class_value;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			svg = svg_element("svg");
			g = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			attr(path0, "d", "m.1.1 7.82304289 7.82304289");
			attr(path1, "d", "m.1.1 7.82304289 7.82304289");
			attr(path1, "transform", "matrix(-1 0 0 1 8 0)");
			attr(g, "fill", "none");

			attr(g, "stroke", g_stroke_value = /*hovered*/ ctx[0]
			? /*$app*/ ctx[1].darkMode ? "#ffffff" : "#4a4a4a"
			: "#9B9B9B");

			attr(g, "stroke-linecap", "square");
			attr(g, "stroke-width", "2");
			set_style(g, "transition", "stroke 150ms ease-in-out");
			attr(g, "transform", "translate(2 2)");
			attr(svg, "height", "8");
			attr(svg, "viewBox", "0 0 12 12");
			attr(svg, "width", "8");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");

			attr(div, "class", div_class_value = "bn-notify-custom bn-notify-notification-close-icon " + (/*$app*/ ctx[1].name
			? `bn-notify-${/*$app*/ ctx[1].name}`
			: "") + " svelte-1nxfpxx");

			toggle_class(div, "bn-notify-dark-mode-close-background", /*$app*/ ctx[1].darkMode);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, svg);
			append(svg, g);
			append(g, path0);
			append(g, path1);

			if (!mounted) {
				dispose = [
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[2]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[3])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*hovered, $app*/ 3 && g_stroke_value !== (g_stroke_value = /*hovered*/ ctx[0]
			? /*$app*/ ctx[1].darkMode ? "#ffffff" : "#4a4a4a"
			: "#9B9B9B")) {
				attr(g, "stroke", g_stroke_value);
			}

			if (dirty & /*$app*/ 2 && div_class_value !== (div_class_value = "bn-notify-custom bn-notify-notification-close-icon " + (/*$app*/ ctx[1].name
			? `bn-notify-${/*$app*/ ctx[1].name}`
			: "") + " svelte-1nxfpxx")) {
				attr(div, "class", div_class_value);
			}

			if (dirty & /*$app, $app*/ 2) {
				toggle_class(div, "bn-notify-dark-mode-close-background", /*$app*/ ctx[1].darkMode);
			}
		},
		i: noop$1,
		o: noop$1,
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $app;
	component_subscribe($$self, app, $$value => $$invalidate(1, $app = $$value));
	let hovered;
	const mouseenter_handler = () => $$invalidate(0, hovered = true);
	const mouseleave_handler = () => $$invalidate(0, hovered = false);
	return [hovered, $app, mouseenter_handler, mouseleave_handler];
}

class CloseIcon extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-1nxfpxx-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

/* src/elements/NotificationMessage.svelte generated by Svelte v3.24.0 */

function add_css$1() {
	var style = element("style");
	style.id = "svelte-1rj5tzm-style";
	style.textContent = "p.svelte-1rj5tzm{margin:0;font-family:inherit;font-size:inherit}";
	append(document.head, style);
}

function create_fragment$1(ctx) {
	let p;
	let p_class_value;

	return {
		c() {
			p = element("p");

			attr(p, "class", p_class_value = "bn-notify-custom bn-notify-notification-info-message " + (/*$app*/ ctx[1].name
			? `bn-notify-${/*$app*/ ctx[1].name}`
			: "") + " svelte-1rj5tzm");
		},
		m(target, anchor) {
			insert(target, p, anchor);
			p.innerHTML = /*message*/ ctx[0];
		},
		p(ctx, [dirty]) {
			if (dirty & /*message*/ 1) p.innerHTML = /*message*/ ctx[0];
			if (dirty & /*$app*/ 2 && p_class_value !== (p_class_value = "bn-notify-custom bn-notify-notification-info-message " + (/*$app*/ ctx[1].name
			? `bn-notify-${/*$app*/ ctx[1].name}`
			: "") + " svelte-1rj5tzm")) {
				attr(p, "class", p_class_value);
			}
		},
		i: noop$1,
		o: noop$1,
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	let $app;
	component_subscribe($$self, app, $$value => $$invalidate(1, $app = $$value));
	let { message } = $$props;

	$$self.$set = $$props => {
		if ("message" in $$props) $$invalidate(0, message = $$props.message);
	};

	return [message, $app];
}

class NotificationMessage extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-1rj5tzm-style")) add_css$1();
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { message: 0 });
	}
}

/* src/elements/Clock.svelte generated by Svelte v3.24.0 */

function add_css$2() {
	var style = element("style");
	style.id = "svelte-1c9mzro-style";
	style.textContent = "svg.svelte-1c9mzro{margin:0 0.25em 0 0.5em}";
	append(document.head, style);
}

function create_fragment$2(ctx) {
	let svg;
	let g;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			g = svg_element("g");
			path = svg_element("path");
			attr(path, "d", "M7.06681227,1.92484595 C10.9634297,1.92484595 14.1336806,5.03922755\n      14.1336806,8.86724251 C14.1336806,12.6953675 10.9634297,15.8096941\n      7.06681227,15.8096941 C3.17019489,15.8096941 1.66977543e-13,12.6953675\n      1.66977543e-13,8.86724251 C1.66977543e-13,5.03922755 3.17019489,1.92484595\n      7.06681227,1.92484595 Z M7.06681227,13.5248129 C9.68105959,13.5248129\n      11.8078517,11.4354643 11.8078517,8.8672425 C11.8078517,8.25643705\n      11.6862119,7.67319541 11.4676859,7.13820421 L7.06334005,8.88946962\n      L7.06334005,4.20972711 C4.45066084,4.2115977 2.32577285,6.30028608\n      2.32577285,8.86724251 C2.32577285,11.4354643 4.45256495,13.5248129\n      7.06681227,13.5248129 Z M5.53007392,1.22124533e-14\n      L8.61626343,1.22124533e-14 L8.61626343,1.6696743 L5.53007392,1.6696743\n      L5.53007392,1.22124533e-14 Z");
			attr(path, "id", "transaction-timer");
			attr(path, "fill", "#AEAEAE");
			attr(path, "fill-rule", "nonzero");
			attr(g, "id", "Notify-Style-Concepts");
			attr(g, "stroke", "none");
			attr(g, "stroke-width", "1");
			attr(g, "fill", "none");
			attr(g, "fill-rule", "evenodd");
			attr(svg, "width", "15px");
			attr(svg, "height", "16px");
			attr(svg, "viewBox", "0 0 15 16");
			attr(svg, "version", "1.1");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
			attr(svg, "class", "svelte-1c9mzro");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, g);
			append(g, path);
		},
		p: noop$1,
		i: noop$1,
		o: noop$1,
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

class Clock extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-1c9mzro-style")) add_css$2();
		init(this, options, null, create_fragment$2, safe_not_equal, {});
	}
}

/* src/elements/Time.svelte generated by Svelte v3.24.0 */

function add_css$3() {
	var style = element("style");
	style.id = "svelte-6oams7-style";
	style.textContent = "span.svelte-6oams7{font-size:inherit;font-family:inherit;margin-right:0.5em}";
	append(document.head, style);
}

function create_fragment$3(ctx) {
	let span;
	let t;
	let span_class_value;

	return {
		c() {
			span = element("span");
			t = text(/*time*/ ctx[0]);

			attr(span, "class", span_class_value = "bn-notify-custom bn-notify-notification-info-meta-timestamp " + (/*$app*/ ctx[1].name
			? `bn-notify-${/*$app*/ ctx[1].name}`
			: "") + " svelte-6oams7");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p(ctx, [dirty]) {
			if (dirty & /*time*/ 1) set_data(t, /*time*/ ctx[0]);

			if (dirty & /*$app*/ 2 && span_class_value !== (span_class_value = "bn-notify-custom bn-notify-notification-info-meta-timestamp " + (/*$app*/ ctx[1].name
			? `bn-notify-${/*$app*/ ctx[1].name}`
			: "") + " svelte-6oams7")) {
				attr(span, "class", span_class_value);
			}
		},
		i: noop$1,
		o: noop$1,
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

function instance$2($$self, $$props, $$invalidate) {
	let $app;
	component_subscribe($$self, app, $$value => $$invalidate(1, $app = $$value));
	let { time } = $$props;

	$$self.$set = $$props => {
		if ("time" in $$props) $$invalidate(0, time = $$props.time);
	};

	return [time, $app];
}

class Time extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-6oams7-style")) add_css$3();
		init(this, options, instance$2, create_fragment$3, safe_not_equal, { time: 0 });
	}
}

/* src/elements/Timer.svelte generated by Svelte v3.24.0 */

function add_css$4() {
	var style = element("style");
	style.id = "svelte-fbmqmu-style";
	style.textContent = "span.svelte-fbmqmu{font-size:inherit;font-family:inherit}";
	append(document.head, style);
}

function create_fragment$4(ctx) {
	let span;
	let t;
	let span_class_value;

	return {
		c() {
			span = element("span");
			t = text(/*value*/ ctx[0]);

			attr(span, "class", span_class_value = "bn-notify-custom bn-notify-notification-info-meta-duration-time " + (/*$app*/ ctx[1].name
			? `bn-notify-${/*$app*/ ctx[1].name}`
			: "") + " svelte-fbmqmu");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p(ctx, [dirty]) {
			if (dirty & /*value*/ 1) set_data(t, /*value*/ ctx[0]);

			if (dirty & /*$app*/ 2 && span_class_value !== (span_class_value = "bn-notify-custom bn-notify-notification-info-meta-duration-time " + (/*$app*/ ctx[1].name
			? `bn-notify-${/*$app*/ ctx[1].name}`
			: "") + " svelte-fbmqmu")) {
				attr(span, "class", span_class_value);
			}
		},
		i: noop$1,
		o: noop$1,
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

function instance$3($$self, $$props, $$invalidate) {
	let $app;
	component_subscribe($$self, app, $$value => $$invalidate(1, $app = $$value));
	let { value } = $$props;

	$$self.$set = $$props => {
		if ("value" in $$props) $$invalidate(0, value = $$props.value);
	};

	return [value, $app];
}

class Timer extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-fbmqmu-style")) add_css$4();
		init(this, options, instance$3, create_fragment$4, safe_not_equal, { value: 0 });
	}
}

/* src/components/NotificationContent.svelte generated by Svelte v3.24.0 */

function add_css$5() {
	var style = element("style");
	style.id = "svelte-1mylbgs-style";
	style.textContent = "div.svelte-1mylbgs{display:flex;flex-flow:column nowrap;justify-content:center;font-size:inherit;font-family:inherit;margin-left:0.75em;max-width:78%}p.svelte-1mylbgs{display:flex;align-items:center;margin:0.5em 0 0 0;opacity:0.7;font-size:0.889em;line-height:1.15;font-family:inherit}span.svelte-1mylbgs{font-family:inherit;display:flex;align-items:center}";
	append(document.head, style);
}

// (70:4) {#if notification.type === 'pending' && notification.startTime}
function create_if_block(ctx) {
	let span;
	let t0;
	let clock;
	let t1;
	let timer;
	let span_class_value;
	let current;
	clock = new Clock({});

	timer = new Timer({
			props: {
				value: /*timeString*/ ctx[3](/*currentTime*/ ctx[1] - /*notification*/ ctx[0].startTime)
			}
		});

	return {
		c() {
			span = element("span");
			t0 = text("-\n        ");
			create_component(clock.$$.fragment);
			t1 = space();
			create_component(timer.$$.fragment);

			attr(span, "class", span_class_value = "bn-notify-custom bn-notify-notification-info-meta-duration " + (/*$app*/ ctx[2].name
			? `bn-notify-${/*$app*/ ctx[2].name}`
			: "") + " svelte-1mylbgs");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t0);
			mount_component(clock, span, null);
			append(span, t1);
			mount_component(timer, span, null);
			current = true;
		},
		p(ctx, dirty) {
			const timer_changes = {};
			if (dirty & /*currentTime, notification*/ 3) timer_changes.value = /*timeString*/ ctx[3](/*currentTime*/ ctx[1] - /*notification*/ ctx[0].startTime);
			timer.$set(timer_changes);

			if (!current || dirty & /*$app*/ 4 && span_class_value !== (span_class_value = "bn-notify-custom bn-notify-notification-info-meta-duration " + (/*$app*/ ctx[2].name
			? `bn-notify-${/*$app*/ ctx[2].name}`
			: "") + " svelte-1mylbgs")) {
				attr(span, "class", span_class_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(clock.$$.fragment, local);
			transition_in(timer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(clock.$$.fragment, local);
			transition_out(timer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(span);
			destroy_component(clock);
			destroy_component(timer);
		}
	};
}

function create_fragment$5(ctx) {
	let div;
	let notificationmessage;
	let t0;
	let p;
	let time;
	let t1;
	let p_class_value;
	let div_class_value;
	let current;

	notificationmessage = new NotificationMessage({
			props: { message: /*notification*/ ctx[0].message }
		});

	time = new Time({
			props: {
				time: /*formatTime*/ ctx[4](/*currentTime*/ ctx[1])
			}
		});

	let if_block = /*notification*/ ctx[0].type === "pending" && /*notification*/ ctx[0].startTime && create_if_block(ctx);

	return {
		c() {
			div = element("div");
			create_component(notificationmessage.$$.fragment);
			t0 = space();
			p = element("p");
			create_component(time.$$.fragment);
			t1 = space();
			if (if_block) if_block.c();

			attr(p, "class", p_class_value = "bn-notify-custom bn-notify-notification-info-meta " + (/*$app*/ ctx[2].name
			? `bn-notify-${/*$app*/ ctx[2].name}`
			: "") + " svelte-1mylbgs");

			attr(div, "class", div_class_value = "bn-notify-custom bn-notify-notification-info " + (/*$app*/ ctx[2].name
			? `bn-notify-${/*$app*/ ctx[2].name}`
			: "") + " svelte-1mylbgs");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(notificationmessage, div, null);
			append(div, t0);
			append(div, p);
			mount_component(time, p, null);
			append(p, t1);
			if (if_block) if_block.m(p, null);
			current = true;
		},
		p(ctx, [dirty]) {
			const notificationmessage_changes = {};
			if (dirty & /*notification*/ 1) notificationmessage_changes.message = /*notification*/ ctx[0].message;
			notificationmessage.$set(notificationmessage_changes);
			const time_changes = {};
			if (dirty & /*currentTime*/ 2) time_changes.time = /*formatTime*/ ctx[4](/*currentTime*/ ctx[1]);
			time.$set(time_changes);

			if (/*notification*/ ctx[0].type === "pending" && /*notification*/ ctx[0].startTime) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*notification*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(p, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (!current || dirty & /*$app*/ 4 && p_class_value !== (p_class_value = "bn-notify-custom bn-notify-notification-info-meta " + (/*$app*/ ctx[2].name
			? `bn-notify-${/*$app*/ ctx[2].name}`
			: "") + " svelte-1mylbgs")) {
				attr(p, "class", p_class_value);
			}

			if (!current || dirty & /*$app*/ 4 && div_class_value !== (div_class_value = "bn-notify-custom bn-notify-notification-info " + (/*$app*/ ctx[2].name
			? `bn-notify-${/*$app*/ ctx[2].name}`
			: "") + " svelte-1mylbgs")) {
				attr(div, "class", div_class_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(notificationmessage.$$.fragment, local);
			transition_in(time.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(notificationmessage.$$.fragment, local);
			transition_out(time.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(notificationmessage);
			destroy_component(time);
			if (if_block) if_block.d();
		}
	};
}

function instance$4($$self, $$props, $$invalidate) {
	let $app;
	let $formatter;
	component_subscribe($$self, app, $$value => $$invalidate(2, $app = $$value));
	component_subscribe($$self, Bt, $$value => $$invalidate(5, $formatter = $$value));

	function timeString(time) {
		const seconds = Math.floor(time / 1000);
		const formattedSeconds = seconds < 0 ? 0 : seconds;

		return formattedSeconds >= 60
		? `${Math.floor(formattedSeconds / 60).toLocaleString($app.clientLocale)} ${$formatter("time.minutes")}`
		: `${formattedSeconds.toLocaleString($app.clientLocale)} ${$formatter("time.seconds")}`;
	}

	function formatTime(number) {
		const time = new Date(number);

		return time.toLocaleString($app.clientLocale, {
			hour: "numeric",
			minute: "numeric",
			hour12: true
		});
	}

	let { notification } = $$props;
	let currentTime = Date.now();

	const intervalId = setInterval(
		() => {
			$$invalidate(1, currentTime = Date.now());
		},
		1000
	);

	onDestroy(() => {
		clearInterval(intervalId);
	});

	$$self.$set = $$props => {
		if ("notification" in $$props) $$invalidate(0, notification = $$props.notification);
	};

	return [notification, currentTime, $app, timeString, formatTime];
}

class NotificationContent extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-1mylbgs-style")) add_css$5();
		init(this, options, instance$4, create_fragment$5, safe_not_equal, { notification: 0 });
	}
}

/* src/components/TypeIcon.svelte generated by Svelte v3.24.0 */

function add_css$6() {
	var style = element("style");
	style.id = "svelte-hqev6r-style";
	style.textContent = "div.svelte-hqev6r{height:100%;font-size:inherit;font-family:inherit;width:1.5em}";
	append(document.head, style);
}

// (17:2) {#if type === 'hint'}
function create_if_block_3(ctx) {
	let svg;
	let style;
	let t;
	let g2;
	let g0;
	let circle0;
	let g1;
	let path;
	let circle1;

	return {
		c() {
			svg = svg_element("svg");
			style = svg_element("style");
			t = text("@-webkit-keyframes kf_el_51c2MS41pY_an_cXFUsKhg3V {\n  50% {\n    stroke-dasharray: 553;\n  }\n  0% {\n    stroke-dasharray: 553;\n  }\n  100% {\n    stroke-dasharray: 553;\n  }\n}\n@keyframes kf_el_51c2MS41pY_an_cXFUsKhg3V {\n  50% {\n    stroke-dasharray: 553;\n  }\n  0% {\n    stroke-dasharray: 553;\n  }\n  100% {\n    stroke-dasharray: 553;\n  }\n}\n@-webkit-keyframes kf_el_51c2MS41pY_an_M-ML-YLcm {\n  50% {\n    stroke-dashoffset: 553;\n  }\n  100% {\n    stroke-dashoffset: 0;\n  }\n  0% {\n    stroke-dashoffset: 553;\n  }\n}\n@keyframes kf_el_51c2MS41pY_an_M-ML-YLcm {\n  50% {\n    stroke-dashoffset: 553;\n  }\n  100% {\n    stroke-dashoffset: 0;\n  }\n  0% {\n    stroke-dashoffset: 553;\n  }\n}\n@-webkit-keyframes kf_el_j5HR_U6Nrp_an_KGzPpGvQb {\n  50% {\n    opacity: 0;\n  }\n  56.67% {\n    opacity: 1;\n  }\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n@keyframes kf_el_j5HR_U6Nrp_an_KGzPpGvQb {\n  50% {\n    opacity: 0;\n  }\n  56.67% {\n    opacity: 1;\n  }\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n@-webkit-keyframes kf_el_j5HR_U6Nrp_an_al_MjoEv-F {\n  50% {\n    stroke-dasharray: 39.41;\n  }\n  0% {\n    stroke-dasharray: 39.41;\n  }\n  100% {\n    stroke-dasharray: 39.41;\n  }\n}\n@keyframes kf_el_j5HR_U6Nrp_an_al_MjoEv-F {\n  50% {\n    stroke-dasharray: 39.41;\n  }\n  0% {\n    stroke-dasharray: 39.41;\n  }\n  100% {\n    stroke-dasharray: 39.41;\n  }\n}\n@-webkit-keyframes kf_el_j5HR_U6Nrp_an_VsVMmQ1MU {\n  50% {\n    stroke-dashoffset: 39.41;\n  }\n  100% {\n    stroke-dashoffset: 0;\n  }\n  0% {\n    stroke-dashoffset: 39.41;\n  }\n}\n@keyframes kf_el_j5HR_U6Nrp_an_VsVMmQ1MU {\n  50% {\n    stroke-dashoffset: 39.41;\n  }\n  100% {\n    stroke-dashoffset: 0;\n  }\n  0% {\n    stroke-dashoffset: 39.41;\n  }\n}\n@-webkit-keyframes kf_el_TZApOLwXZU_an_dL6-SZLSH {\n  50% {\n    -webkit-transform: translate(88.50000762939453px, 56.5px)\n      scale(0, 0) translate(-88.50000762939453px, -56.5px);\n    transform: translate(88.50000762939453px, 56.5px) scale(0, 0)\n      translate(-88.50000762939453px, -56.5px);\n  }\n  83.33% {\n    -webkit-transform: translate(88.50000762939453px, 56.5px)\n      scale(0, 0) translate(-88.50000762939453px, -56.5px);\n    transform: translate(88.50000762939453px, 56.5px) scale(0, 0)\n      translate(-88.50000762939453px, -56.5px);\n  }\n  100% {\n    -webkit-transform: translate(88.50000762939453px, 56.5px)\n      scale(1, 1) translate(-88.50000762939453px, -56.5px);\n    transform: translate(88.50000762939453px, 56.5px) scale(1, 1)\n      translate(-88.50000762939453px, -56.5px);\n  }\n  0% {\n    -webkit-transform: translate(88.50000762939453px, 56.5px)\n      scale(0, 0) translate(-88.50000762939453px, -56.5px);\n    transform: translate(88.50000762939453px, 56.5px) scale(0, 0)\n      translate(-88.50000762939453px, -56.5px);\n  }\n}\n@keyframes kf_el_TZApOLwXZU_an_dL6-SZLSH {\n  50% {\n    -webkit-transform: translate(88.50000762939453px, 56.5px)\n      scale(0, 0) translate(-88.50000762939453px, -56.5px);\n    transform: translate(88.50000762939453px, 56.5px) scale(0, 0)\n      translate(-88.50000762939453px, -56.5px);\n  }\n  83.33% {\n    -webkit-transform: translate(88.50000762939453px, 56.5px)\n      scale(0, 0) translate(-88.50000762939453px, -56.5px);\n    transform: translate(88.50000762939453px, 56.5px) scale(0, 0)\n      translate(-88.50000762939453px, -56.5px);\n  }\n  100% {\n    -webkit-transform: translate(88.50000762939453px, 56.5px)\n      scale(1, 1) translate(-88.50000762939453px, -56.5px);\n    transform: translate(88.50000762939453px, 56.5px) scale(1, 1)\n      translate(-88.50000762939453px, -56.5px);\n  }\n  0% {\n    -webkit-transform: translate(88.50000762939453px, 56.5px)\n      scale(0, 0) translate(-88.50000762939453px, -56.5px);\n    transform: translate(88.50000762939453px, 56.5px) scale(0, 0)\n      translate(-88.50000762939453px, -56.5px);\n  }\n}\n#el_DHAskxC2T * {\n  -webkit-animation-duration: 1s;\n  animation-duration: 1s;\n  -webkit-animation-iteration-count: 1;\n  animation-iteration-count: 1;\n  -webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1);\n  animation-timing-function: cubic-bezier(0, 0, 1, 1);\n}\n#el__hILOKhuR3 {\n  fill: none;\n  -webkit-transform: translate(7px, 7px);\n  transform: translate(7px, 7px);\n}\n#el_TZApOLwXZU {\n  fill: #979797;\n  -webkit-transform: matrix(1, 0, 0, -1, 0, 113);\n  transform: matrix(1, 0, 0, -1, 0, 113);\n}\n#el_fIxIrV8WbF {\n  stroke: #979797;\n  stroke-width: 14;\n}\n#el_TZApOLwXZU_an_dL6-SZLSH {\n  -webkit-animation-fill-mode: forwards;\n  animation-fill-mode: forwards;\n  -webkit-animation-name: kf_el_TZApOLwXZU_an_dL6-SZLSH;\n  animation-name: kf_el_TZApOLwXZU_an_dL6-SZLSH;\n  -webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1);\n  animation-timing-function: cubic-bezier(0, 0, 1, 1);\n}\n#el_j5HR_U6Nrp {\n  -webkit-animation-fill-mode: forwards, forwards, forwards;\n  animation-fill-mode: forwards, forwards, forwards;\n  -webkit-animation-name: kf_el_j5HR_U6Nrp_an_VsVMmQ1MU,\n    kf_el_j5HR_U6Nrp_an_al_MjoEv-F, kf_el_j5HR_U6Nrp_an_KGzPpGvQb;\n  animation-name: kf_el_j5HR_U6Nrp_an_VsVMmQ1MU,\n    kf_el_j5HR_U6Nrp_an_al_MjoEv-F, kf_el_j5HR_U6Nrp_an_KGzPpGvQb;\n  -webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1),\n    cubic-bezier(0, 0, 1, 1), cubic-bezier(0, 0, 1, 1);\n  animation-timing-function: cubic-bezier(0, 0, 1, 1),\n    cubic-bezier(0, 0, 1, 1), cubic-bezier(0, 0, 1, 1);\n}\n#el_51c2MS41pY {\n  -webkit-animation-fill-mode: forwards, forwards;\n  animation-fill-mode: forwards, forwards;\n  -webkit-animation-name: kf_el_51c2MS41pY_an_M-ML-YLcm,\n    kf_el_51c2MS41pY_an_cXFUsKhg3V;\n  animation-name: kf_el_51c2MS41pY_an_M-ML-YLcm,\n    kf_el_51c2MS41pY_an_cXFUsKhg3V;\n  -webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1),\n    cubic-bezier(0, 0, 1, 1);\n  animation-timing-function: cubic-bezier(0, 0, 1, 1),\n    cubic-bezier(0, 0, 1, 1);\n}\n      ");
			g2 = svg_element("g");
			g0 = svg_element("g");
			circle0 = svg_element("circle");
			g1 = svg_element("g");
			path = svg_element("path");
			circle1 = svg_element("circle");
			attr(circle0, "cx", "88.5");
			attr(circle0, "cy", "56.5");
			attr(circle0, "r", "7.5");
			attr(circle0, "id", "el_TZApOLwXZU");
			attr(g0, "id", "el_TZApOLwXZU_an_dL6-SZLSH");
			attr(g0, "data-animator-group", "true");
			attr(g0, "data-animator-type", "2");
			attr(path, "d", "m88.5 128v-39.4130859");
			attr(path, "stroke-linecap", "round");
			attr(path, "stroke-linejoin", "round");
			attr(path, "id", "el_j5HR_U6Nrp");
			attr(circle1, "cx", "88");
			attr(circle1, "cy", "88");
			attr(circle1, "r", "88");
			attr(circle1, "id", "el_51c2MS41pY");
			attr(g1, "id", "el_fIxIrV8WbF");
			attr(g2, "fill-rule", "evenodd");
			attr(g2, "id", "el__hILOKhuR3");
			attr(svg, "viewBox", "0 0 190 190");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "id", "el_DHAskxC2T");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, style);
			append(style, t);
			append(svg, g2);
			append(g2, g0);
			append(g0, circle0);
			append(g2, g1);
			append(g1, path);
			append(g1, circle1);
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (265:2) {#if type === 'pending'}
function create_if_block_2(ctx) {
	let svg;
	let style;
	let t;
	let g3;
	let circle;
	let g2;
	let g0;
	let path0;
	let g1;
	let path1;

	return {
		c() {
			svg = svg_element("svg");
			style = svg_element("style");
			t = text("@-webkit-keyframes kf_el_fv0z90vBrL_an_PwUBZ96LS {\n  0% {\n    -webkit-transform: translate(88px, 87.587890625px) rotate(0deg)\n      translate(-88px, -87.587890625px);\n    transform: translate(88px, 87.587890625px) rotate(0deg)\n      translate(-88px, -87.587890625px);\n  }\n  100% {\n    -webkit-transform: translate(88px, 87.587890625px) rotate(360deg)\n      translate(-88px, -87.587890625px);\n    transform: translate(88px, 87.587890625px) rotate(360deg)\n      translate(-88px, -87.587890625px);\n  }\n}\n@keyframes kf_el_fv0z90vBrL_an_PwUBZ96LS {\n  0% {\n    -webkit-transform: translate(88px, 87.587890625px) rotate(0deg)\n      translate(-88px, -87.587890625px);\n    transform: translate(88px, 87.587890625px) rotate(0deg)\n      translate(-88px, -87.587890625px);\n  }\n  100% {\n    -webkit-transform: translate(88px, 87.587890625px) rotate(360deg)\n      translate(-88px, -87.587890625px);\n    transform: translate(88px, 87.587890625px) rotate(360deg)\n      translate(-88px, -87.587890625px);\n  }\n}\n@-webkit-keyframes kf_el_u3QHGLTow3_an_EQ8OetHGq {\n  0% {\n    -webkit-transform: translate(88px, 87.587890625px) rotate(0deg)\n      translate(-88px, -87.587890625px);\n    transform: translate(88px, 87.587890625px) rotate(0deg)\n      translate(-88px, -87.587890625px);\n  }\n  50% {\n    -webkit-transform: translate(88px, 87.587890625px) rotate(360deg)\n      translate(-88px, -87.587890625px);\n    transform: translate(88px, 87.587890625px) rotate(360deg)\n      translate(-88px, -87.587890625px);\n  }\n  100% {\n    -webkit-transform: translate(88px, 87.587890625px) rotate(720deg)\n      translate(-88px, -87.587890625px);\n    transform: translate(88px, 87.587890625px) rotate(720deg)\n      translate(-88px, -87.587890625px);\n  }\n}\n@keyframes kf_el_u3QHGLTow3_an_EQ8OetHGq {\n  0% {\n    -webkit-transform: translate(88px, 87.587890625px) rotate(0deg)\n      translate(-88px, -87.587890625px);\n    transform: translate(88px, 87.587890625px) rotate(0deg)\n      translate(-88px, -87.587890625px);\n  }\n  50% {\n    -webkit-transform: translate(88px, 87.587890625px) rotate(360deg)\n      translate(-88px, -87.587890625px);\n    transform: translate(88px, 87.587890625px) rotate(360deg)\n      translate(-88px, -87.587890625px);\n  }\n  100% {\n    -webkit-transform: translate(88px, 87.587890625px) rotate(720deg)\n      translate(-88px, -87.587890625px);\n    transform: translate(88px, 87.587890625px) rotate(720deg)\n      translate(-88px, -87.587890625px);\n  }\n}\n#el_XWLVvD_rP * {\n  -webkit-animation-duration: 2s;\n  animation-duration: 2s;\n  -webkit-animation-iteration-count: infinite;\n  animation-iteration-count: infinite;\n  -webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1);\n  animation-timing-function: cubic-bezier(0, 0, 1, 1);\n}\n#el_Uh6HOhkAVi {\n  fill: none;\n  stroke-width: 14;\n  -webkit-transform: translate(7px, 7px);\n  transform: translate(7px, 7px);\n}\n#el_PHAWgO26lN {\n  stroke: #ffbd00;\n}\n#el_A4XF5QQwhp {\n  stroke: #ffbf00;\n}\n#el_u3QHGLTow3_an_EQ8OetHGq {\n  -webkit-animation-fill-mode: backwards;\n  animation-fill-mode: backwards;\n  -webkit-transform: translate(88px, 87.587890625px) rotate(0deg)\n    translate(-88px, -87.587890625px);\n  transform: translate(88px, 87.587890625px) rotate(0deg)\n    translate(-88px, -87.587890625px);\n  -webkit-animation-name: kf_el_u3QHGLTow3_an_EQ8OetHGq;\n  animation-name: kf_el_u3QHGLTow3_an_EQ8OetHGq;\n  -webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1);\n  animation-timing-function: cubic-bezier(0, 0, 1, 1);\n}\n#el_fv0z90vBrL_an_PwUBZ96LS {\n  -webkit-animation-fill-mode: backwards;\n  animation-fill-mode: backwards;\n  -webkit-transform: translate(88px, 87.587890625px) rotate(0deg)\n    translate(-88px, -87.587890625px);\n  transform: translate(88px, 87.587890625px) rotate(0deg)\n    translate(-88px, -87.587890625px);\n  -webkit-animation-name: kf_el_fv0z90vBrL_an_PwUBZ96LS;\n  animation-name: kf_el_fv0z90vBrL_an_PwUBZ96LS;\n  -webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1);\n  animation-timing-function: cubic-bezier(0, 0, 1, 1);\n}\n      ");
			g3 = svg_element("g");
			circle = svg_element("circle");
			g2 = svg_element("g");
			g0 = svg_element("g");
			path0 = svg_element("path");
			g1 = svg_element("g");
			path1 = svg_element("path");
			attr(circle, "cx", "88");
			attr(circle, "cy", "88");
			attr(circle, "r", "88");
			attr(circle, "id", "el_PHAWgO26lN");
			attr(path0, "d", "m88 25v62.5878906");
			attr(path0, "id", "el_fv0z90vBrL");
			attr(g0, "id", "el_fv0z90vBrL_an_PwUBZ96LS");
			attr(g0, "data-animator-group", "true");
			attr(g0, "data-animator-type", "1");
			attr(path1, "d", "m88 45.9160156v41.671875");
			attr(path1, "id", "el_u3QHGLTow3");
			attr(g1, "id", "el_u3QHGLTow3_an_EQ8OetHGq");
			attr(g1, "data-animator-group", "true");
			attr(g1, "data-animator-type", "1");
			attr(g2, "stroke-linecap", "round");
			attr(g2, "stroke-linejoin", "round");
			attr(g2, "id", "el_A4XF5QQwhp");
			attr(g3, "fill-rule", "evenodd");
			attr(g3, "id", "el_Uh6HOhkAVi");
			attr(svg, "viewBox", "0 0 190 190");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "id", "el_XWLVvD_rP");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, style);
			append(style, t);
			append(svg, g3);
			append(g3, circle);
			append(g3, g2);
			append(g2, g0);
			append(g0, path0);
			append(g2, g1);
			append(g1, path1);
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (404:2) {#if type === 'success'}
function create_if_block_1(ctx) {
	let svg;
	let style;
	let t;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			style = svg_element("style");
			t = text("@-webkit-keyframes kf_el_RzYtw9rUyN_an_gX4OsFPwzz {\n  0% {\n    stroke-dasharray: 473.87;\n  }\n  100% {\n    stroke-dasharray: 473.87;\n  }\n}\n@keyframes kf_el_RzYtw9rUyN_an_gX4OsFPwzz {\n  0% {\n    stroke-dasharray: 473.87;\n  }\n  100% {\n    stroke-dasharray: 473.87;\n  }\n}\n@-webkit-keyframes kf_el_RzYtw9rUyN_an_WfcYZ9pjL {\n  0% {\n    stroke-dashoffset: 473.87;\n  }\n  50% {\n    stroke-dashoffset: 473.87;\n  }\n  100% {\n    stroke-dashoffset: 0;\n  }\n}\n@keyframes kf_el_RzYtw9rUyN_an_WfcYZ9pjL {\n  0% {\n    stroke-dashoffset: 473.87;\n  }\n  50% {\n    stroke-dashoffset: 473.87;\n  }\n  100% {\n    stroke-dashoffset: 0;\n  }\n}\n#el_3OA8Szq_A * {\n  -webkit-animation-duration: 1s;\n  animation-duration: 1s;\n  -webkit-animation-iteration-count: 1;\n  animation-iteration-count: 1;\n  -webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1);\n  animation-timing-function: cubic-bezier(0, 0, 1, 1);\n}\n#el_RzYtw9rUyN {\n  fill: none;\n  stroke: #7ed321;\n  stroke-width: 17;\n  -webkit-animation-fill-mode: forwards, forwards;\n  animation-fill-mode: forwards, forwards;\n  -webkit-animation-name: kf_el_RzYtw9rUyN_an_WfcYZ9pjL,\n    kf_el_RzYtw9rUyN_an_gX4OsFPwzz;\n  animation-name: kf_el_RzYtw9rUyN_an_WfcYZ9pjL,\n    kf_el_RzYtw9rUyN_an_gX4OsFPwzz;\n  -webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1),\n    cubic-bezier(0, 0, 1, 1);\n  animation-timing-function: cubic-bezier(0, 0, 1, 1),\n    cubic-bezier(0, 0, 1, 1);\n}\n      ");
			path = svg_element("path");
			attr(path, "d", "m176.126953 63.8789062-94.4130858 95.4130858-72.87402345-72.8740232\n        27.93945315-27.9394532 44.9345703 44.9345704 94.4130858-94.413086");
			attr(path, "stroke-linecap", "round");
			attr(path, "stroke-linejoin", "round");
			attr(path, "id", "el_RzYtw9rUyN");
			attr(svg, "viewBox", "0 0 185 168");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "id", "el_3OA8Szq_A");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, style);
			append(style, t);
			append(svg, path);
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (481:2) {#if type === 'error'}
function create_if_block$1(ctx) {
	let svg;
	let style;
	let t;
	let g1;
	let path0;
	let g0;
	let circle;
	let path1;

	return {
		c() {
			svg = svg_element("svg");
			style = svg_element("style");
			t = text("@-webkit-keyframes kf_el_IAuv9ut-2-_an_xlDuvYsRc {\n  50% {\n    opacity: 0;\n  }\n  66.67% {\n    opacity: 1;\n  }\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n@keyframes kf_el_IAuv9ut-2-_an_xlDuvYsRc {\n  50% {\n    opacity: 0;\n  }\n  66.67% {\n    opacity: 1;\n  }\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n@-webkit-keyframes kf_el_IAuv9ut-2-_an_29XE36SGo1 {\n  50% {\n    stroke-dasharray: 39.41;\n  }\n  0% {\n    stroke-dasharray: 39.41;\n  }\n  100% {\n    stroke-dasharray: 39.41;\n  }\n}\n@keyframes kf_el_IAuv9ut-2-_an_29XE36SGo1 {\n  50% {\n    stroke-dasharray: 39.41;\n  }\n  0% {\n    stroke-dasharray: 39.41;\n  }\n  100% {\n    stroke-dasharray: 39.41;\n  }\n}\n@-webkit-keyframes kf_el_IAuv9ut-2-_an_xo_EIWruT {\n  50% {\n    stroke-dashoffset: 39.41;\n  }\n  100% {\n    stroke-dashoffset: 0;\n  }\n  0% {\n    stroke-dashoffset: 39.41;\n  }\n}\n@keyframes kf_el_IAuv9ut-2-_an_xo_EIWruT {\n  50% {\n    stroke-dashoffset: 39.41;\n  }\n  100% {\n    stroke-dashoffset: 0;\n  }\n  0% {\n    stroke-dashoffset: 39.41;\n  }\n}\n@-webkit-keyframes kf_el_q_eIK0z3HI_an_045tZJOHl {\n  50% {\n    -webkit-transform: translate(88.50000762939453px, 144.5px)\n      scale(0, 0) translate(-88.50000762939453px, -144.5px);\n    transform: translate(88.50000762939453px, 144.5px) scale(0, 0)\n      translate(-88.50000762939453px, -144.5px);\n  }\n  83.33% {\n    -webkit-transform: translate(88.50000762939453px, 144.5px)\n      scale(0, 0) translate(-88.50000762939453px, -144.5px);\n    transform: translate(88.50000762939453px, 144.5px) scale(0, 0)\n      translate(-88.50000762939453px, -144.5px);\n  }\n  100% {\n    -webkit-transform: translate(88.50000762939453px, 144.5px)\n      scale(1, 1) translate(-88.50000762939453px, -144.5px);\n    transform: translate(88.50000762939453px, 144.5px) scale(1, 1)\n      translate(-88.50000762939453px, -144.5px);\n  }\n  0% {\n    -webkit-transform: translate(88.50000762939453px, 144.5px)\n      scale(0, 0) translate(-88.50000762939453px, -144.5px);\n    transform: translate(88.50000762939453px, 144.5px) scale(0, 0)\n      translate(-88.50000762939453px, -144.5px);\n  }\n}\n@keyframes kf_el_q_eIK0z3HI_an_045tZJOHl {\n  50% {\n    -webkit-transform: translate(88.50000762939453px, 144.5px)\n      scale(0, 0) translate(-88.50000762939453px, -144.5px);\n    transform: translate(88.50000762939453px, 144.5px) scale(0, 0)\n      translate(-88.50000762939453px, -144.5px);\n  }\n  83.33% {\n    -webkit-transform: translate(88.50000762939453px, 144.5px)\n      scale(0, 0) translate(-88.50000762939453px, -144.5px);\n    transform: translate(88.50000762939453px, 144.5px) scale(0, 0)\n      translate(-88.50000762939453px, -144.5px);\n  }\n  100% {\n    -webkit-transform: translate(88.50000762939453px, 144.5px)\n      scale(1, 1) translate(-88.50000762939453px, -144.5px);\n    transform: translate(88.50000762939453px, 144.5px) scale(1, 1)\n      translate(-88.50000762939453px, -144.5px);\n  }\n  0% {\n    -webkit-transform: translate(88.50000762939453px, 144.5px)\n      scale(0, 0) translate(-88.50000762939453px, -144.5px);\n    transform: translate(88.50000762939453px, 144.5px) scale(0, 0)\n      translate(-88.50000762939453px, -144.5px);\n  }\n}\n@-webkit-keyframes kf_el_5BNAI_PBsn_an_aToWhdlG8F {\n  50% {\n    stroke-dasharray: 527.67;\n  }\n  0% {\n    stroke-dasharray: 527.67;\n  }\n  100% {\n    stroke-dasharray: 527.67;\n  }\n}\n@keyframes kf_el_5BNAI_PBsn_an_aToWhdlG8F {\n  50% {\n    stroke-dasharray: 527.67;\n  }\n  0% {\n    stroke-dasharray: 527.67;\n  }\n  100% {\n    stroke-dasharray: 527.67;\n  }\n}\n@-webkit-keyframes kf_el_5BNAI_PBsn_an_tQV_CQebU {\n  50% {\n    stroke-dashoffset: 527.67;\n  }\n  100% {\n    stroke-dashoffset: 0;\n  }\n  0% {\n    stroke-dashoffset: 527.67;\n  }\n}\n@keyframes kf_el_5BNAI_PBsn_an_tQV_CQebU {\n  50% {\n    stroke-dashoffset: 527.67;\n  }\n  100% {\n    stroke-dashoffset: 0;\n  }\n  0% {\n    stroke-dashoffset: 527.67;\n  }\n}\n#el_bYTVKD04y * {\n  -webkit-animation-duration: 1s;\n  animation-duration: 1s;\n  -webkit-animation-iteration-count: 1;\n  animation-iteration-count: 1;\n  -webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1);\n  animation-timing-function: cubic-bezier(0, 0, 1, 1);\n}\n#el_doMgf96Cxx {\n  fill: none;\n  -webkit-transform: translate(1px, -5px);\n  transform: translate(1px, -5px);\n}\n#el_5BNAI_PBsn {\n  stroke: #ff0039;\n  stroke-width: 14;\n  -webkit-animation-fill-mode: forwards, forwards;\n  animation-fill-mode: forwards, forwards;\n  -webkit-animation-name: kf_el_5BNAI_PBsn_an_tQV_CQebU,\n    kf_el_5BNAI_PBsn_an_aToWhdlG8F;\n  animation-name: kf_el_5BNAI_PBsn_an_tQV_CQebU,\n    kf_el_5BNAI_PBsn_an_aToWhdlG8F;\n  -webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1),\n    cubic-bezier(0, 0, 1, 1);\n  animation-timing-function: cubic-bezier(0, 0, 1, 1),\n    cubic-bezier(0, 0, 1, 1);\n}\n#el_q_eIK0z3HI {\n  fill: #ff0042;\n}\n#el_IAuv9ut-2- {\n  stroke: #ff0042;\n  stroke-width: 14;\n  -webkit-animation-fill-mode: forwards, forwards, forwards;\n  animation-fill-mode: forwards, forwards, forwards;\n  -webkit-animation-name: kf_el_IAuv9ut-2-_an_xo_EIWruT,\n    kf_el_IAuv9ut-2-_an_29XE36SGo1, kf_el_IAuv9ut-2-_an_xlDuvYsRc;\n  animation-name: kf_el_IAuv9ut-2-_an_xo_EIWruT,\n    kf_el_IAuv9ut-2-_an_29XE36SGo1, kf_el_IAuv9ut-2-_an_xlDuvYsRc;\n  -webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1),\n    cubic-bezier(0, 0, 1, 1), cubic-bezier(0, 0, 1, 1);\n  animation-timing-function: cubic-bezier(0, 0, 1, 1),\n    cubic-bezier(0, 0, 1, 1), cubic-bezier(0, 0, 1, 1);\n}\n#el_q_eIK0z3HI_an_045tZJOHl {\n  -webkit-animation-fill-mode: forwards;\n  animation-fill-mode: forwards;\n  -webkit-animation-name: kf_el_q_eIK0z3HI_an_045tZJOHl;\n  animation-name: kf_el_q_eIK0z3HI_an_045tZJOHl;\n  -webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1);\n  animation-timing-function: cubic-bezier(0, 0, 1, 1);\n}\n      ");
			g1 = svg_element("g");
			path0 = svg_element("path");
			g0 = svg_element("g");
			circle = svg_element("circle");
			path1 = svg_element("path");
			attr(path0, "d", "m96.9442719 17.8885438 71.8196601 143.6393202c2.469893\n          4.939785.467649 10.946515-4.472136 13.416408-1.388554.694277-2.919685\n          1.055728-4.472136 1.055728h-143.6393201c-5.5228475\n          0-10.00000001-4.477153-10.00000001-10 0-1.552451.36145092-3.083582\n          1.05572809-4.472136l71.81966012-143.6393202c2.4698925-4.939785\n          8.4766229-6.9420284 13.4164079-4.4721359 1.935274.967637 3.5044989\n          2.5368619 4.4721359 4.4721359z");
			attr(path0, "stroke-linejoin", "round");
			attr(path0, "id", "el_5BNAI_PBsn");
			attr(circle, "cx", "88.5");
			attr(circle, "cy", "144.5");
			attr(circle, "r", "7.5");
			attr(circle, "id", "el_q_eIK0z3HI");
			attr(g0, "id", "el_q_eIK0z3HI_an_045tZJOHl");
			attr(g0, "data-animator-group", "true");
			attr(g0, "data-animator-type", "2");
			attr(path1, "d", "m88.5 112.413086v-39.413086");
			attr(path1, "stroke-linecap", "round");
			attr(path1, "stroke-linejoin", "round");
			attr(path1, "id", "el_IAuv9ut-2-");
			attr(g1, "fill-rule", "evenodd");
			attr(g1, "id", "el_doMgf96Cxx");
			attr(svg, "viewBox", "0 0 178 178");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "id", "el_bYTVKD04y");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, style);
			append(style, t);
			append(svg, g1);
			append(g1, path0);
			append(g1, g0);
			append(g0, circle);
			append(g1, path1);
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

function create_fragment$6(ctx) {
	let div;
	let t0;
	let t1;
	let t2;
	let div_class_value;
	let if_block0 = /*type*/ ctx[0] === "hint" && create_if_block_3();
	let if_block1 = /*type*/ ctx[0] === "pending" && create_if_block_2();
	let if_block2 = /*type*/ ctx[0] === "success" && create_if_block_1();
	let if_block3 = /*type*/ ctx[0] === "error" && create_if_block$1();

	return {
		c() {
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			t2 = space();
			if (if_block3) if_block3.c();

			attr(div, "class", div_class_value = "bn-notify-custom bn-notify-notification-status-icon " + (/*$app*/ ctx[1].name
			? `bn-notify-${/*$app*/ ctx[1].name}`
			: "") + " svelte-hqev6r");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append(div, t0);
			if (if_block1) if_block1.m(div, null);
			append(div, t1);
			if (if_block2) if_block2.m(div, null);
			append(div, t2);
			if (if_block3) if_block3.m(div, null);
		},
		p(ctx, [dirty]) {
			if (/*type*/ ctx[0] === "hint") {
				if (if_block0) ; else {
					if_block0 = create_if_block_3();
					if_block0.c();
					if_block0.m(div, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*type*/ ctx[0] === "pending") {
				if (if_block1) ; else {
					if_block1 = create_if_block_2();
					if_block1.c();
					if_block1.m(div, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*type*/ ctx[0] === "success") {
				if (if_block2) ; else {
					if_block2 = create_if_block_1();
					if_block2.c();
					if_block2.m(div, t2);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (/*type*/ ctx[0] === "error") {
				if (if_block3) ; else {
					if_block3 = create_if_block$1();
					if_block3.c();
					if_block3.m(div, null);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}

			if (dirty & /*$app*/ 2 && div_class_value !== (div_class_value = "bn-notify-custom bn-notify-notification-status-icon " + (/*$app*/ ctx[1].name
			? `bn-notify-${/*$app*/ ctx[1].name}`
			: "") + " svelte-hqev6r")) {
				attr(div, "class", div_class_value);
			}
		},
		i: noop$1,
		o: noop$1,
		d(detaching) {
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
		}
	};
}

function instance$5($$self, $$props, $$invalidate) {
	let $app;
	component_subscribe($$self, app, $$value => $$invalidate(1, $app = $$value));
	let { type } = $$props;

	$$self.$set = $$props => {
		if ("type" in $$props) $$invalidate(0, type = $$props.type);
	};

	return [type, $app];
}

class TypeIcon extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-hqev6r-style")) add_css$6();
		init(this, options, instance$5, create_fragment$6, safe_not_equal, { type: 0 });
	}
}

/* src/components/AutoDismiss.svelte generated by Svelte v3.24.0 */

function instance$6($$self, $$props, $$invalidate) {
	let { notification = {
		id: "",
		type: "",
		key: "",
		message: "",
		eventCode: ""
	} } = $$props;

	if (notification.autoDismiss && notification.id) {
		setTimeout(
			() => {
				notifications.remove(notification.id, notification.eventCode);
			},
			notification.autoDismiss
		);
	}

	$$self.$set = $$props => {
		if ("notification" in $$props) $$invalidate(0, notification = $$props.notification);
	};

	return [notification];
}

class AutoDismiss extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$6, null, safe_not_equal, { notification: 0 });
	}
}

/* src/views/Notify.svelte generated by Svelte v3.24.0 */

function add_css$7() {
	var style = element("style");
	style.id = "svelte-1guarhh-style";
	style.textContent = "ul.svelte-1guarhh{display:flex;flex-flow:column nowrap;position:fixed;font-size:16px;padding:0 0.75em;margin:0;list-style-type:none;width:20em;bottom:0;right:0;font-family:'Helvetica Neue';max-height:100vh;overflow-y:scroll;overflow-x:hidden;color:#4a4a4a;background:transparent;scrollbar-width:none;box-sizing:border-box;height:100vh;pointer-events:none;z-index:99999999}@media only screen and (max-width: 450px){ul.svelte-1guarhh{width:100%}}.bn-notify-custom.bn-notify-dark-mode{background:#283944;color:#ffffff;background:rgba(40, 57, 68, 0.9)}.bn-notify-clickable:hover{cursor:pointer}.svelte-1guarhh::-webkit-scrollbar{display:none}li.svelte-1guarhh{position:relative;display:flex;padding:0.75em;font-size:0.889em;font-family:inherit;border-radius:10px;background:#ffffff;box-shadow:0px 2px 10px rgba(0, 0, 0, 0.1);color:inherit;transition:background 300ms ease-in-out, color 300ms ease-in-out;pointer-events:all;background:#ffffff;backdrop-filter:blur(5px);background:rgba(255, 255, 255, 0.9)}div.svelte-1guarhh{position:absolute;top:0.75em;right:0.75em;font-size:inherit;font-family:inherit}";
	append(document.head, style);
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i];
	return child_ctx;
}

// (153:0) {#if $notifications.length > 0}
function create_if_block$2(ctx) {
	let ul;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let ul_class_value;
	let ul_style_value;
	let current;
	let each_value = /*$notifications*/ ctx[6];
	const get_key = ctx => /*notification*/ ctx[10].key;

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	return {
		c() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(ul, "class", ul_class_value = "bn-notify-custom bn-notify-notifications " + (/*$app*/ ctx[5].name
			? `bn-notify-${/*$app*/ ctx[5].name}`
			: "") + " svelte-1guarhh");

			attr(ul, "style", ul_style_value = `${/*positioning*/ ctx[0]} ${/*justifyContent*/ ctx[4]}`);
		},
		m(target, anchor) {
			insert(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*notificationMargin, $app, $notifications, notifications*/ 104) {
				const each_value = /*$notifications*/ ctx[6];
				group_outros();
				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].r();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, ul, fix_and_outro_and_destroy_block, create_each_block, null, get_each_context);
				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].a();
				check_outros();
			}

			if (!current || dirty & /*$app*/ 32 && ul_class_value !== (ul_class_value = "bn-notify-custom bn-notify-notifications " + (/*$app*/ ctx[5].name
			? `bn-notify-${/*$app*/ ctx[5].name}`
			: "") + " svelte-1guarhh")) {
				attr(ul, "class", ul_class_value);
			}

			if (!current || dirty & /*positioning, justifyContent*/ 17 && ul_style_value !== (ul_style_value = `${/*positioning*/ ctx[0]} ${/*justifyContent*/ ctx[4]}`)) {
				attr(ul, "style", ul_style_value);
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}
		}
	};
}

// (157:4) {#each $notifications as notification (notification.key)}
function create_each_block(key_1, ctx) {
	let li;
	let typeicon;
	let t0;
	let notificationcontent;
	let t1;
	let div;
	let closeicon;
	let div_class_value;
	let t2;
	let autodismiss;
	let t3;
	let li_class_value;
	let li_intro;
	let li_outro;
	let rect;
	let stop_animation = noop$1;
	let current;
	let mounted;
	let dispose;

	typeicon = new TypeIcon({
			props: { type: /*notification*/ ctx[10].type }
		});

	notificationcontent = new NotificationContent({
			props: { notification: /*notification*/ ctx[10] }
		});

	closeicon = new CloseIcon({});

	function click_handler(...args) {
		return /*click_handler*/ ctx[7](/*notification*/ ctx[10], ...args);
	}

	autodismiss = new AutoDismiss({
			props: { notification: /*notification*/ ctx[10] }
		});

	function click_handler_1(...args) {
		return /*click_handler_1*/ ctx[8](/*notification*/ ctx[10], ...args);
	}

	return {
		key: key_1,
		first: null,
		c() {
			li = element("li");
			create_component(typeicon.$$.fragment);
			t0 = space();
			create_component(notificationcontent.$$.fragment);
			t1 = space();
			div = element("div");
			create_component(closeicon.$$.fragment);
			t2 = space();
			create_component(autodismiss.$$.fragment);
			t3 = space();

			attr(div, "class", div_class_value = "bn-notify-custom bn-notify-notification-close " + (/*$app*/ ctx[5].name
			? `bn-notify-${/*$app*/ ctx[5].name}`
			: "") + " svelte-1guarhh");

			attr(li, "style", /*notificationMargin*/ ctx[3]);

			attr(li, "class", li_class_value = "bn-notify-custom bn-notify-notification " + (/*$app*/ ctx[5].name
			? `bn-notify-${/*$app*/ ctx[5].name}`
			: "") + " svelte-1guarhh");

			toggle_class(li, "bn-notify-dark-mode", /*$app*/ ctx[5].darkMode);
			toggle_class(li, "bn-notify-clickable", /*notification*/ ctx[10].onclick);
			this.first = li;
		},
		m(target, anchor) {
			insert(target, li, anchor);
			mount_component(typeicon, li, null);
			append(li, t0);
			mount_component(notificationcontent, li, null);
			append(li, t1);
			append(li, div);
			mount_component(closeicon, div, null);
			append(li, t2);
			mount_component(autodismiss, li, null);
			append(li, t3);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "click", click_handler),
					listen(li, "click", click_handler_1)
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const typeicon_changes = {};
			if (dirty & /*$notifications*/ 64) typeicon_changes.type = /*notification*/ ctx[10].type;
			typeicon.$set(typeicon_changes);
			const notificationcontent_changes = {};
			if (dirty & /*$notifications*/ 64) notificationcontent_changes.notification = /*notification*/ ctx[10];
			notificationcontent.$set(notificationcontent_changes);

			if (!current || dirty & /*$app*/ 32 && div_class_value !== (div_class_value = "bn-notify-custom bn-notify-notification-close " + (/*$app*/ ctx[5].name
			? `bn-notify-${/*$app*/ ctx[5].name}`
			: "") + " svelte-1guarhh")) {
				attr(div, "class", div_class_value);
			}

			const autodismiss_changes = {};
			if (dirty & /*$notifications*/ 64) autodismiss_changes.notification = /*notification*/ ctx[10];
			autodismiss.$set(autodismiss_changes);

			if (!current || dirty & /*notificationMargin*/ 8) {
				attr(li, "style", /*notificationMargin*/ ctx[3]);
			}

			if (!current || dirty & /*$app*/ 32 && li_class_value !== (li_class_value = "bn-notify-custom bn-notify-notification " + (/*$app*/ ctx[5].name
			? `bn-notify-${/*$app*/ ctx[5].name}`
			: "") + " svelte-1guarhh")) {
				attr(li, "class", li_class_value);
			}

			if (dirty & /*$app, $app*/ 32) {
				toggle_class(li, "bn-notify-dark-mode", /*$app*/ ctx[5].darkMode);
			}

			if (dirty & /*$app, $notifications*/ 96) {
				toggle_class(li, "bn-notify-clickable", /*notification*/ ctx[10].onclick);
			}
		},
		r() {
			rect = li.getBoundingClientRect();
		},
		f() {
			fix_position(li);
			stop_animation();
			add_transform(li, rect);
		},
		a() {
			stop_animation();
			stop_animation = create_animation(li, rect, flip, { duration: 500 });
		},
		i(local) {
			if (current) return;
			transition_in(typeicon.$$.fragment, local);
			transition_in(notificationcontent.$$.fragment, local);
			transition_in(closeicon.$$.fragment, local);
			transition_in(autodismiss.$$.fragment, local);

			add_render_callback(() => {
				if (li_outro) li_outro.end(1);

				if (!li_intro) li_intro = create_in_transition(li, fly, {
					duration: 1200,
					delay: 300,
					x: /*x*/ ctx[1],
					y: /*y*/ ctx[2],
					easing: elasticOut
				});

				li_intro.start();
			});

			current = true;
		},
		o(local) {
			transition_out(typeicon.$$.fragment, local);
			transition_out(notificationcontent.$$.fragment, local);
			transition_out(closeicon.$$.fragment, local);
			transition_out(autodismiss.$$.fragment, local);
			if (li_intro) li_intro.invalidate();

			li_outro = create_out_transition(li, fly, {
				duration: 400,
				x: /*x*/ ctx[1],
				y: /*y*/ ctx[2],
				easing: quintIn
			});

			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			destroy_component(typeicon);
			destroy_component(notificationcontent);
			destroy_component(closeicon);
			destroy_component(autodismiss);
			if (detaching && li_outro) li_outro.end();
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment$7(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*$notifications*/ ctx[6].length > 0 && create_if_block$2(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*$notifications*/ ctx[6].length > 0) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*$notifications*/ 64) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$2(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function elasticOut(t) {
	return Math.sin(-13 * (t + 1) * Math.PI / 2) * Math.pow(2, -35 * t) + 1;
}

function instance$7($$self, $$props, $$invalidate) {
	let $app;
	let $notifications;
	component_subscribe($$self, app, $$value => $$invalidate(5, $app = $$value));
	component_subscribe($$self, notifications, $$value => $$invalidate(6, $notifications = $$value));
	let smallScreen = window.outerWidth < 450;
	let positioning;
	let x;
	let y;
	let notificationMargin;
	let justifyContent;

	// listen for screen resize events
	window.addEventListener("resize", debounce(
		() => {
			if (window.outerWidth < 450) {
				if (!smallScreen) {
					$$invalidate(9, smallScreen = true);
				}
			} else {
				if (smallScreen) {
					$$invalidate(9, smallScreen = false);
				}
			}
		},
		300
	));

	const click_handler = notification => notifications.remove(notification.id, notification.eventCode);
	const click_handler_1 = notification => notification.onclick && notification.onclick();

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$app, smallScreen, positioning*/ 545) {
			 if ($app.desktopPosition && !smallScreen) {
				$$invalidate(0, positioning = $app.desktopPosition === "bottomRight"
				? "bottom: 0; right: 0;"
				: $app.desktopPosition === "bottomLeft"
					? "left: 0; right: unset;"
					: $app.desktopPosition === "topRight"
						? "top: 0;"
						: "top: 0; bottom: unset; left: 0; right: unset;");

				$$invalidate(1, x = positioning && positioning.includes("left") ? -321 : 321);
				$$invalidate(2, y = 0);

				if ($app.desktopPosition.includes("top")) {
					$$invalidate(4, justifyContent = "justify-content: unset;");
					$$invalidate(3, notificationMargin = "margin: 0.75rem 0 0 0;");
				} else {
					$$invalidate(4, justifyContent = "justify-content: flex-end;");
					$$invalidate(3, notificationMargin = "margin: 0 0 0.75rem 0;");
				}
			}
		}

		if ($$self.$$.dirty & /*$app, smallScreen*/ 544) {
			 if ($app.mobilePosition && smallScreen) {
				$$invalidate(0, positioning = $app.mobilePosition === "top"
				? "top: 0; bottom: unset;"
				: "bottom: 0; top: unset;");

				$$invalidate(1, x = 0);

				if ($app.mobilePosition === "top") {
					$$invalidate(2, y = -50);
					$$invalidate(4, justifyContent = "justify-content: unset;");
					$$invalidate(3, notificationMargin = "margin: 0.75rem 0 0 0;");
				} else {
					$$invalidate(2, y = 50);
					$$invalidate(4, justifyContent = "justify-content: flex-end;");
					$$invalidate(3, notificationMargin = "margin: 0 0 0.75rem 0;");
				}
			}
		}

		if ($$self.$$.dirty & /*$app, smallScreen*/ 544) {
			 if (!$app.desktopPosition && !$app.mobilePosition) {
				$$invalidate(1, x = smallScreen ? 0 : 321);
				$$invalidate(2, y = smallScreen ? 50 : 0);
				$$invalidate(3, notificationMargin = "margin: 0 0 0.75rem 0;");
				$$invalidate(4, justifyContent = "justify-content: flex-end;");
				$$invalidate(0, positioning = "bottom: 0; right: 0;");
			}
		}
	};

	return [
		positioning,
		x,
		y,
		notificationMargin,
		justifyContent,
		$app,
		$notifications,
		click_handler,
		click_handler_1
	];
}

class Notify extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-1guarhh-style")) add_css$7();
		init(this, options, instance$7, create_fragment$7, safe_not_equal, {});
	}
}

function eventToType(eventCode) {
    switch (eventCode) {
        case 'txSent':
        case 'txPool':
        case 'txSpeedUp':
        case 'txCancel':
            return 'pending';
        case 'txRequest':
        case 'txRepeat':
        case 'txAwaitingApproval':
        case 'txConfirmReminder':
        case 'txStallPending':
        case 'txStallConfirmed':
            return 'hint';
        case 'txError':
        case 'txSendFail':
        case 'txFailed':
        case 'txDropped':
        case 'nsfFail':
        case 'txUnderpriced':
            return 'error';
        case 'txConfirmed':
            return 'success';
        default:
            return 'hint';
    }
}
function typeToDismissTimeout(type) {
    switch (type) {
        case 'success':
        case 'hint':
            return 4000;
        default:
            return 0;
    }
}

// subscribe to the formatter store
let formatter;
Bt.subscribe((store) => (formatter = store));
function createNotification(transactionDetails, customization = {}) {
    const notificationObject = transactionDetails.system === 'bitcoin'
        ? createBitcoinNotificationObject(transactionDetails, customization)
        : createEthereumNotificationObject(transactionDetails, customization);
    notifications.add(notificationObject);
}
function createBitcoinNotificationObject(transactionDetails, customization) {
    const { id, txid, startTime, eventCode, watchedAddress, inputs, outputs } = transactionDetails;
    const type = eventToType(eventCode);
    const key = `${id}-${(typeof customization === 'object' && customization.eventCode) || eventCode}`;
    const { direction, value } = getBitcoinDirectionValue(inputs, outputs, watchedAddress);
    const formatterOptions = watchedAddress
        ? {
            messageId: `watched['${eventCode}']`,
            values: {
                verb: eventCode === 'txConfirmed'
                    ? direction === 'incoming'
                        ? 'received'
                        : 'sent'
                    : direction === 'incoming'
                        ? 'receiving'
                        : 'sending',
                formattedValue: value,
                asset: 'BTC',
                preposition: '',
                counterpartyShortened: ''
            }
        }
        : {
            messageId: `transaction['${eventCode}']`,
            values: { value, asset: 'BTC' }
        };
    const internationalizedMessage = formatter(formatterOptions.messageId, {
        values: formatterOptions.values
    });
    const noMessageAvailable = internationalizedMessage === formatterOptions.messageId;
    const message = noMessageAvailable
        ? defaultNotifyMessages.en[watchedAddress ? 'watched' : 'transaction'][eventCode || '']
        : internationalizedMessage;
    let notificationObject = {
        id: id || txid,
        type,
        key,
        startTime,
        eventCode,
        message,
        autoDismiss: typeToDismissTimeout((typeof customization === 'object' && customization.type) || type)
    };
    if (typeof customization === 'object') {
        notificationObject = { ...notificationObject, ...customization };
    }
    return notificationObject;
}
function createEthereumNotificationObject(transactionDetails, customization) {
    const { id, hash, startTime, eventCode, direction, counterparty, value, asset } = transactionDetails;
    const type = eventToType(eventCode);
    const key = `${id}-${(typeof customization === 'object' && customization.eventCode) || eventCode}`;
    const counterpartyShortened = counterparty &&
        counterparty.substring(0, 4) +
            '...' +
            counterparty.substring(counterparty.length - 4);
    const formattedValue = new BigNumber(value || 0)
        .div(new BigNumber('1000000000000000000'))
        .toString(10);
    const formatterOptions = counterparty && value
        ? {
            messageId: `watched['${eventCode}']`,
            values: {
                verb: eventCode === 'txConfirmed'
                    ? direction === 'incoming'
                        ? 'received'
                        : 'sent'
                    : direction === 'incoming'
                        ? 'receiving'
                        : 'sending',
                formattedValue,
                preposition: direction === 'incoming' ? 'from' : 'to',
                counterpartyShortened,
                asset
            }
        }
        : {
            messageId: `transaction['${eventCode}']`,
            values: { formattedValue, asset }
        };
    const internationalizedMessage = formatter(formatterOptions.messageId, {
        values: formatterOptions.values
    });
    const noMessageAvailable = internationalizedMessage === formatterOptions.messageId;
    const message = noMessageAvailable
        ? defaultNotifyMessages.en[counterparty ? 'watched' : 'transaction'][eventCode || '']
        : internationalizedMessage;
    let notificationObject = {
        id: id || hash,
        type,
        key,
        startTime,
        eventCode,
        message,
        autoDismiss: typeToDismissTimeout((typeof customization === 'object' && customization.type) || type)
    };
    if (typeof customization === 'object') {
        notificationObject = { ...notificationObject, ...customization };
    }
    return notificationObject;
}
function getBitcoinDirectionValue(inputs, outputs, watchedAddress) {
    if (!watchedAddress)
        return { value: null, direction: '' };
    const finder = (i) => i.address === watchedAddress;
    const input = inputs && inputs.find(finder);
    const output = outputs && outputs.find(finder);
    return {
        direction: output ? 'incoming' : 'outgoing',
        value: output ? output.value : input && input.value
    };
}

const validInitKeys = [
    'dappId',
    'networkId',
    'system',
    'transactionHandler',
    'name',
    'mobilePosition',
    'desktopPosition',
    'darkMode',
    'txApproveReminderTimeout',
    'txStallPendingTimeout',
    'txStallConfirmedTimeout',
    'notifyMessages',
    'clientLocale'
];
const validNotificationKeys = [
    'eventCode',
    'type',
    'message',
    'autoDismiss',
    'onclick'
];
const validTransactionKeys = [
    'sendTransaction',
    'estimateGas',
    'gasPrice',
    'balance',
    'contractCall',
    'txDetails'
];
function invalidParams(params, validParams, functionName) {
    const invalid = Object.keys(params);
    if (invalid.length > 0) {
        throw new Error(`${invalid[0]} is not a valid parameter for ${functionName}, must be one of the following valid parameters: ${validParams.join(', ')}`);
    }
}
function validateType({ name, value, type, optional, customValidation }) {
    if (!optional && typeof value === 'undefined') {
        throw new Error(`"${name}" is required`);
    }
    if (typeof value !== 'undefined' &&
        (type === 'array' ? Array.isArray(type) : typeof value !== type)) {
        throw new Error(`"${name}" must be of type: ${type}, received type: ${typeof value} from value: ${value}`);
    }
    if (typeof value !== 'undefined' && customValidation) {
        customValidation(value);
    }
}
function validateInit(init) {
    validateType({ name: 'init', value: init, type: 'object' });
    const { dappId, system, networkId, transactionHandler, name, apiUrl, ...otherParams } = init;
    validateType({ name: 'dappId', value: dappId, type: 'string' });
    validateType({
        name: 'system',
        value: system,
        type: 'string',
        optional: true
    });
    validateType({ name: 'networkId', value: networkId, type: 'number' });
    validateType({ name: 'name', value: name, type: 'string', optional: true });
    validateType({
        name: 'apiUrl',
        value: apiUrl,
        type: 'string',
        optional: true
    });
    validateType({
        name: 'transactionHandler',
        value: transactionHandler,
        type: 'function',
        optional: true
    });
    validateConfig(otherParams);
}
function stringOrNumber(val) {
    return typeof val === 'string' || typeof val === 'number';
}
function validateTransactionOptions(options) {
    validateType({ name: 'transaction options', value: options, type: 'object' });
    const { sendTransaction, estimateGas, gasPrice, balance, contractCall, txDetails, ...otherParams } = options;
    invalidParams(otherParams, validTransactionKeys, 'Transaction Options');
    validateType({
        name: 'sendTransaction',
        value: sendTransaction,
        type: 'function',
        optional: true
    });
    validateType({
        name: 'estimateGas',
        value: estimateGas,
        type: 'function',
        optional: true
    });
    validateType({
        name: 'gasPrice',
        value: gasPrice,
        type: 'function',
        optional: true
    });
    validateType({
        name: 'balance',
        value: balance,
        type: 'string',
        optional: true
    });
    validateType({
        name: 'contractCall',
        value: contractCall,
        type: 'object',
        optional: true
    });
    if (contractCall) {
        const { methodName, params, ...otherParams } = contractCall;
        invalidParams(otherParams, ['methodName', 'params'], 'contractCall');
        validateType({
            name: 'methodName',
            value: methodName,
            type: 'string',
            optional: true
        });
        validateType({
            name: 'params',
            value: params,
            type: 'array',
            optional: true
        });
    }
    validateType({
        name: 'txDetails',
        value: txDetails,
        type: 'object',
        optional: true
    });
    if (txDetails) {
        const { to, value, from, ...otherParams } = txDetails;
        invalidParams(otherParams, ['to', 'value', 'from'], 'txDetails');
        validateType({
            name: 'to',
            value: to,
            type: 'string',
            optional: true,
            customValidation: isAddress
        });
        if (typeof value !== 'undefined' && !stringOrNumber(value)) {
            throw new Error(`"value" must be of type: string | number, received type: ${typeof value} from value: ${value}`);
        }
        validateType({
            name: 'from',
            value: from,
            type: 'string',
            optional: true,
            customValidation: isAddress
        });
    }
}
function validateNotificationObject(notification) {
    validateType({
        name: 'notification',
        value: notification,
        type: 'object'
    });
    if (typeof notification !== 'object')
        return;
    const { eventCode, type, message, autoDismiss, onclick, ...otherParams } = notification;
    invalidParams(otherParams, validNotificationKeys, 'notification');
    validateType({
        name: 'eventCode',
        value: eventCode,
        type: 'string',
        optional: true
    });
    validateType({
        name: 'type',
        value: type,
        type: 'string',
        optional: true,
        customValidation: validNotificationType
    });
    validateType({
        name: 'message',
        value: message,
        type: 'string'
    });
    validateType({
        name: 'autoDismiss',
        value: autoDismiss,
        type: 'number',
        optional: true
    });
    validateType({
        name: 'onclick',
        value: onclick,
        type: 'function',
        optional: true
    });
}
function validateConfig(config) {
    validateType({ name: 'config', value: config, type: 'object' });
    const { mobilePosition, desktopPosition, darkMode, notifyMessages, clientLocale, txApproveReminderTimeout, txStallPendingTimeout, txStallConfirmedTimeout, ...otherParams } = config;
    invalidParams(otherParams, validInitKeys, 'config / initialize');
    validateType({
        name: 'mobilePosition',
        value: mobilePosition,
        type: 'string',
        optional: true,
        customValidation: validMobilePosition
    });
    validateType({
        name: 'desktopPosition',
        value: desktopPosition,
        type: 'string',
        optional: true,
        customValidation: validDesktopPosition
    });
    validateType({
        name: 'darkMode',
        value: darkMode,
        type: 'boolean',
        optional: true
    });
    validateType({
        name: 'notifyMessages',
        value: notifyMessages,
        type: 'object',
        optional: true
    });
    if (notifyMessages) {
        Object.keys(notifyMessages).forEach(locale => {
            validateType({
                name: locale,
                value: notifyMessages[locale],
                type: 'object'
            });
            const { transaction, watched, time, ...otherParams } = notifyMessages[locale];
            invalidParams(otherParams, ['transaction', 'watched', 'time'], locale);
            validateType({
                name: `notifyMessages.${locale}.transaction`,
                value: transaction,
                type: 'object',
                optional: true
            });
            validateType({
                name: `notifyMessages.${locale}.watched`,
                value: watched,
                type: 'object',
                optional: true
            });
            validateType({
                name: `notifyMessages.${locale}.time`,
                value: time,
                type: 'object',
                optional: true
            });
        });
    }
    validateType({
        name: 'clientLocale',
        value: clientLocale,
        type: 'string',
        optional: true
    });
    validateType({
        name: 'txApproveReminderTimeout',
        value: txApproveReminderTimeout,
        type: 'number',
        optional: true
    });
    validateType({
        name: 'txStallPendingTimeout',
        value: txStallPendingTimeout,
        type: 'number',
        optional: true
    });
    validateType({
        name: 'txStallConfirmedTimeout',
        value: txStallConfirmedTimeout,
        type: 'number',
        optional: true
    });
}
function validNotificationType(type) {
    switch (type) {
        case 'hint':
        case 'pending':
        case 'error':
        case 'success':
            return;
        default:
            throw new Error(`${type} is not a valid notification type, must be one of: 'hint', 'pending', 'error' or 'success'.`);
    }
}
function validMobilePosition(position) {
    switch (position) {
        case 'top':
        case 'bottom':
            return;
        default:
            throw new Error(`${position} is not a valid mobile notification position, must be one of: 'top' or 'bottom'.`);
    }
}
function validDesktopPosition(position) {
    switch (position) {
        case 'bottomLeft':
        case 'bottomRight':
        case 'topLeft':
        case 'topRight':
            return;
        default:
            throw new Error(`${position} is not a valid desktop notification position, must be one of: 'bottomLeft', 'bottomRight', 'topLeft' or 'topRight'.`);
    }
}
function isAddress(address) {
    if (!/^(0x)?[0-9a-fA-F]{40}$/.test(address)) {
        throw new Error(`${address} is not a valid ethereum address.`);
    }
}

let blocknative;
function getBlocknative(options) {
    if (!blocknative && options) {
        blocknative = new BlocknativeSdk(options);
    }
    return blocknative;
}

let transactionQueue;
transactions.subscribe((store) => (transactionQueue = store));
function handlePreFlightEvent(preflightEvent) {
    const { eventCode, contractCall, balance, txDetails, emitter, status } = preflightEvent;
    const blocknative = getBlocknative();
    blocknative.event({
        categoryCode: contractCall ? 'activeContract' : 'activeTransaction',
        eventCode,
        transaction: txDetails,
        wallet: { balance },
        contract: contractCall
    });
    const transaction = {
        ...txDetails,
        eventCode,
        status,
        contractCall
    };
    const emitterResult = emitter.emit(transaction);
    if (emitterResult) {
        validateNotificationObject(emitterResult);
    }
    handleTransactionEvent({
        transaction: transaction,
        emitterResult
    });
}
function handleTransactionEvent(event) {
    const { transaction, emitterResult } = event;
    transactions.updateQueue(transaction);
    // create notification if dev hasn't opted out and not connected to a local network
    if (emitterResult !== false && !localNetwork(get_store_value(app).networkId)) {
        const transactionObj = transactionQueue.find((tx) => tx.id === transaction.id);
        if (transactionObj) {
            createNotification(transactionObj, emitterResult);
        }
    }
}
function duplicateTransactionCandidate(transaction, contract) {
    let duplicate = transactionQueue.find((tx) => {
        if (contract && typeof tx.contractCall === 'undefined')
            return false;
        const sameMethod = contract
            ? contract.methodName ===
                (tx.contractCall && tx.contractCall.methodName)
            : true;
        const sameParams = contract
            ? argsEqual(contract.params, tx.contractCall && tx.contractCall.params)
            : true;
        const sameVal = tx.value == transaction.value;
        const sameTo = contract
            ? sameMethod
            : tx.to &&
                tx.to.toLowerCase() === transaction.to &&
                transaction.to.toLowerCase();
        return sameMethod && sameParams && sameVal && sameTo;
    });
    if (duplicate &&
        (duplicate.status === 'confirmed' || duplicate.status === 'failed')) {
        duplicate = false;
    }
    return duplicate;
}
function preflightTransaction(options, emitter) {
    return new Promise((resolve, reject) => {
        // wrap in set timeout to put to the end of the event queue
        setTimeout(async () => {
            const { sendTransaction, estimateGas, gasPrice, balance, contractCall, txDetails } = options;
            const blocknative = getBlocknative();
            //=== if `balance` or `estimateGas` or `gasPrice` is not provided, then sufficient funds check is disabled === //
            //=== if `txDetails` is not provided, then duplicate transaction check is disabled === //
            //== if dev doesn't want notify to intiate the transaction and `sendTransaction` is not provided, then transaction rejected notification is disabled ==//
            //=== to disable hints for `txAwaitingApproval`, `txConfirmReminder` or any other notification, then return false from listener functions ==//
            const [gas, price] = await gasEstimates(estimateGas, gasPrice);
            const id = uuid();
            const value = new BigNumber((txDetails && txDetails.value) || 0);
            const calculated = {
                value: value.toString(10),
                gas: gas && gas.toString(10),
                gasPrice: price && price.toString(10)
            };
            const txObject = txDetails
                ? {
                    ...txDetails,
                    ...calculated,
                    id
                }
                : { ...calculated, id };
            // check sufficient balance if required parameters are available
            if (balance && gas && price) {
                const transactionCost = gas.times(price).plus(value);
                // if transaction cost is greater than the current balance
                if (transactionCost.gt(new BigNumber(balance))) {
                    const eventCode = 'nsfFail';
                    handlePreFlightEvent({
                        eventCode,
                        contractCall,
                        balance,
                        txDetails: txObject,
                        emitter
                    });
                    return reject('User has insufficient funds');
                }
            }
            // check if it is a duplicate transaction
            if (txDetails &&
                duplicateTransactionCandidate({ to: txDetails.to, value: txDetails.value }, contractCall)) {
                const eventCode = 'txRepeat';
                handlePreFlightEvent({
                    eventCode,
                    contractCall,
                    balance,
                    txDetails: txObject,
                    emitter
                });
            }
            const { txApproveReminderTimeout, txStallPendingTimeout, txStallConfirmedTimeout } = get_store_value(app);
            // check previous transactions awaiting approval
            if (transactionQueue.find(tx => tx.status === 'awaitingApproval')) {
                const eventCode = 'txAwaitingApproval';
                handlePreFlightEvent({
                    eventCode,
                    contractCall,
                    balance,
                    txDetails: txObject,
                    emitter
                });
            }
            // confirm reminder after timeout
            setTimeout(() => {
                const awaitingApproval = transactionQueue.find(tx => tx.id === id && tx.status === 'awaitingApproval');
                if (awaitingApproval) {
                    const eventCode = 'txConfirmReminder';
                    handlePreFlightEvent({
                        eventCode,
                        contractCall,
                        balance,
                        txDetails: txObject,
                        emitter
                    });
                }
            }, txApproveReminderTimeout);
            handlePreFlightEvent({
                eventCode: 'txRequest',
                status: 'awaitingApproval',
                contractCall,
                balance,
                txDetails: txObject,
                emitter
            });
            // if not provided with sendTransaction function, resolve with id so dev can initiate transaction
            // dev will need to call notify.hash(txHash, id) with this id to link up the preflight with the postflight notifications
            if (!sendTransaction) {
                return resolve(id);
            }
            // get result and handle errors
            let hash;
            try {
                hash = await sendTransaction();
            }
            catch (error) {
                const { eventCode, errorMsg } = extractMessageFromError(error);
                handlePreFlightEvent({
                    eventCode,
                    status: 'failed',
                    contractCall,
                    balance,
                    txDetails: txObject,
                    emitter
                });
                return reject(errorMsg);
            }
            if (hash && typeof hash === 'string') {
                const serverEmitter = blocknative.transaction(hash, id).emitter;
                serverEmitter.on('all', (transaction) => {
                    const result = emitter.emit(transaction);
                    return result;
                });
                // Check for pending stall status
                setTimeout(() => {
                    const transaction = transactionQueue.find((tx) => tx.id === id);
                    if (transaction &&
                        transaction.status === 'sent' &&
                        blocknative._connected) {
                        const eventCode = 'txStallPending';
                        handlePreFlightEvent({
                            eventCode,
                            contractCall,
                            balance,
                            txDetails: txObject,
                            emitter
                        });
                    }
                }, txStallPendingTimeout);
                // Check for confirmed stall status
                setTimeout(() => {
                    const transaction = transactionQueue.find(tx => tx.id === id);
                    if (transaction &&
                        transaction.status === 'pending' &&
                        blocknative._connected) {
                        const eventCode = 'txStallConfirmed';
                        handlePreFlightEvent({
                            eventCode,
                            contractCall,
                            balance,
                            txDetails: txObject,
                            emitter
                        });
                    }
                }, txStallConfirmedTimeout);
                resolve(id);
            }
            else {
                reject('sendTransaction function must resolve to a transaction hash that is of type String.');
            }
        }, 10);
    });
}
function gasEstimates(gasFunc, gasPriceFunc) {
    if (!gasFunc || !gasPriceFunc) {
        return Promise.resolve([]);
    }
    const gasProm = gasFunc();
    if (!gasProm.then) {
        throw new Error('The `estimateGas` function must return a Promise');
    }
    const gasPriceProm = gasPriceFunc();
    if (!gasPriceProm.then) {
        throw new Error('The `gasPrice` function must return a Promise');
    }
    return Promise.all([gasProm, gasPriceProm])
        .then(([gasResult, gasPriceResult]) => {
        if (typeof gasResult !== 'string') {
            throw new Error(`The Promise returned from calling 'estimateGas' must resolve with a value of type 'string'. Received a value of: ${gasResult} with a type: ${typeof gasResult}`);
        }
        if (typeof gasPriceResult !== 'string') {
            throw new Error(`The Promise returned from calling 'gasPrice' must resolve with a value of type 'string'. Received a value of: ${gasPriceResult} with a type: ${typeof gasPriceResult}`);
        }
        return [new BigNumber(gasResult), new BigNumber(gasPriceResult)];
    })
        .catch(error => {
        throw new Error(`There was an error getting gas estimates: ${error}`);
    });
}

var version = "1.3.0";

let notify;
function init$1(options) {
    if (notify) {
        console.warn('notify has already been initialized');
        notify.$destroy();
    }
    validateInit(options);
    const { dappId, system, networkId, transactionHandler, name, apiUrl, clientLocale } = options;
    const transactionHandlers = [handleTransactionEvent];
    if (transactionHandler) {
        transactionHandlers.push(transactionHandler);
    }
    const blocknative = getBlocknative({
        dappId,
        networkId,
        transactionHandlers,
        name: name || 'Notify',
        apiUrl,
        system
    });
    // save config to app store
    app.update((store) => ({
        ...store,
        ...options,
        version,
        clientLocale: clientLocale ||
            Ct({
                fallback: 'en',
                navigator: true
            })
    }));
    // initialize App
    notify = new Notify({
        target: document.body
    });
    app.subscribe((store) => {
        const { notifyMessages, clientLocale } = store;
        // set the dictionary for i18n
        Nt.set(notifyMessages);
        const availableLocale = notifyMessages[clientLocale] || notifyMessages[clientLocale.slice(0, 2)];
        Tt.set(availableLocale ? clientLocale : 'en');
    });
    return {
        hash,
        transaction,
        account,
        unsubscribe,
        notification,
        config
    };
    function account(address) {
        try {
            const result = blocknative.account(address);
            return result;
        }
        catch (error) {
            throw new Error(error);
        }
    }
    function hash(hash, id) {
        try {
            const result = blocknative.transaction(hash, id);
            return result;
        }
        catch (error) {
            throw new Error(error);
        }
    }
    function transaction(options) {
        validateTransactionOptions(options);
        const emitter = createEmitter();
        const result = preflightTransaction(options, emitter).catch(err => err);
        return {
            emitter,
            result
        };
    }
    function unsubscribe(addressOrHash) {
        blocknative.unsubscribe(addressOrHash);
    }
    function notification(notificationObject) {
        validateNotificationObject(notificationObject);
        let key = 0;
        const id = uuid();
        const startTime = Date.now();
        const { eventCode = `customNotification${key++}` } = notificationObject;
        const dismiss = () => notifications.remove(id, eventCode);
        function update(notificationUpdate) {
            validateNotificationObject(notificationUpdate);
            const { eventCode = `customNotification${key++}` } = notificationUpdate;
            createNotification({ id, startTime, eventCode }, notificationUpdate);
            return {
                dismiss,
                update
            };
        }
        createNotification({ id, startTime, eventCode }, notificationObject);
        return {
            dismiss,
            update
        };
    }
    function config(options) {
        validateConfig(options);
        const { notifyMessages, ...otherOptions } = options;
        app.update((store) => {
            return {
                ...store,
                ...otherOptions,
                notifyMessages: notifyMessages
                    ? { ...store.notifyMessages, ...notifyMessages }
                    : store.notifyMessages
            };
        });
    }
}

export default init$1;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
