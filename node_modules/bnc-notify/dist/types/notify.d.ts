interface InitOptions extends ConfigOptions {
    dappId: string;
    networkId: number;
    transactionHandler?: TransactionHandler;
    name?: string;
    apiUrl?: string;
    system?: System;
}
interface TransactionHandler {
    (transaction: TransactionEvent): void;
}
interface TransactionEvent {
    emitterResult: void | boolean | CustomNotificationObject;
    transaction: TransactionData;
}
type System = "bitcoin" | "ethereum";
type TransactionEventCode = "txSent" | "txPool" | "txConfirmed" | "txSpeedUp" | "txCancel" | "txFailed" | "txRequest" | "nsfFail" | "txRepeat" | "txAwaitingApproval" | "txConfirmReminder" | "txSendFail" | "txError" | "txUnderPriced" | "all";
interface TransactionData {
    asset?: string;
    blockHash?: string;
    blockNumber?: number;
    contractCall?: ContractObject;
    counterparty?: string;
    eventCode?: string;
    from?: string;
    gas?: string;
    gasPrice?: string;
    hash?: string;
    txid?: string;
    id?: string;
    input?: string;
    monitorId?: string;
    monitorVersion?: string;
    nonce?: number;
    r?: string;
    s?: string;
    status?: string;
    to?: string;
    transactionIndex?: number;
    v?: string;
    value?: string | number;
    startTime?: number;
    watchedAddress?: string;
    originalHash?: string;
    direction?: string;
    system?: string;
    inputs?: BitcoinInputOutput[];
    outputs?: BitcoinInputOutput[];
}
type NotificationType = "pending" | "success" | "error" | "hint";
interface CustomNotificationObject {
    type?: NotificationType;
    message?: string;
    autoDismiss?: number;
    onclick?: (event: any) => void;
    eventCode?: string;
}
interface BitcoinInputOutput {
    address: string;
    value: string;
}
interface NotificationObject {
    id?: string;
    type: NotificationType;
    key: string;
    startTime?: number;
    eventCode?: string;
    message: string;
    autoDismiss?: number;
}
interface ContractObject {
    contractAddress?: string;
    contractType?: string;
    methodName: string;
    params: object;
}
interface AppStore {
    version: string;
    dappId: string;
    name?: string;
    networkId: number;
    nodeSynced: boolean;
    mobilePosition: "bottom" | "top";
    desktopPosition: "bottomLeft" | "bottomRight" | "topLeft" | "topRight";
    darkMode: boolean;
    txApproveReminderTimeout: number;
    txStallPendingTimeout: number;
    txStallConfirmedTimeout: number;
    clientLocale: string;
    notifyMessages: NotifyMessages;
}
interface NotifyMessages {
    [key: string]: LocaleMessages;
}
interface LocaleMessages {
    transaction: {
        [key: string]: string;
    };
    watched: {
        [key: string]: string;
    };
    time: {
        [key: string]: string;
    };
}
interface TransactionOptions {
    sendTransaction: () => Promise<string>;
    estimateGas: () => Promise<string>;
    gasPrice: () => Promise<string>;
    balance: string;
    contractCall: ContractObject;
    txDetails: {
        to?: string;
        value: string;
        from?: string;
    };
}
interface PreflightEvent {
    eventCode: string;
    contractCall?: ContractObject;
    balance: string;
    txDetails?: {
        to?: string;
        from?: string;
        value: string | number;
    };
    emitter: Emitter;
    status?: string;
}
interface UpdateNotification {
    (notificationObject: CustomNotificationObject): {
        dismiss: () => void;
        update: UpdateNotification;
    };
}
interface ConfigOptions {
    mobilePosition?: "bottom" | "top";
    desktopPosition?: "bottomLeft" | "bottomRight" | "topLeft" | "topRight";
    darkMode?: boolean;
    txApproveReminderTimeout?: number;
    txStallPendingTimeout?: number;
    txStallConfirmedTimeout?: number;
    notifyMessages?: NotifyMessages;
    clientLocale?: string;
}
interface Hash {
    (hash: string, id?: string): never | {
        details: TransactionLog;
        emitter: Emitter;
    };
}
interface Transaction {
    (options: TransactionOptions): {
        result: Promise<string>;
        emitter: Emitter;
    };
}
interface Account {
    (address: string): never | {
        details: {
            address: string;
        };
        emitter: Emitter;
    };
}
interface Unsubscribe {
    (addressOrHash: string): void;
}
interface Notification {
    (notificationObject: CustomNotificationObject): {
        dismiss: () => void;
        update: UpdateNotification;
    };
}
interface Config {
    (options: ConfigOptions): void;
}
interface API {
    hash: Hash;
    transaction: Transaction;
    account: Account;
    unsubscribe: Unsubscribe;
    notification: Notification;
    config: Config;
}
interface TransactionLog {
    hash: string;
    id: string;
    startTime: number;
    status: string;
    from?: string;
    to?: string;
    value?: number | string;
    gas?: string;
    gasPrice?: string;
    nonce?: number;
}
interface EmitterListener {
    (state: TransactionData): boolean | void | CustomNotificationObject;
}
interface Emitter {
    listeners: {
        [key: string]: EmitterListener;
    };
    on: (eventCode: TransactionEventCode, listener: EmitterListener) => void;
    emit: (state: TransactionData) => boolean | void | CustomNotificationObject;
}
interface NotificationDetails {
    id: string;
    hash?: string;
    startTime: number;
    eventCode: string;
    direction?: string;
    counterparty?: string;
    value?: string;
    asset?: string;
}
interface WritableStore {
    set: (newValue: any) => void;
    update: (newValue: any) => void;
    subscribe: (callback: (store: any) => any) => () => void;
}
interface TransactionStore {
    subscribe: (callback: (store: any) => any) => void;
    updateQueue: (transaction: TransactionData) => void;
    add: (transaction: TransactionData) => void;
}
interface NotificationStore {
    subscribe: (callback: (store: any) => any) => void;
    add: (notification: NotificationObject) => void;
    remove: (id: string, eventCode: string) => void;
    update: (updater: (store: any) => any) => void;
}
declare function init(options: InitOptions): API;
export type { init as default, InitOptions, TransactionHandler, TransactionEvent, System, TransactionEventCode, TransactionData, NotificationType, CustomNotificationObject, BitcoinInputOutput, NotificationObject, ContractObject, AppStore, NotifyMessages, LocaleMessages, TransactionOptions, PreflightEvent, UpdateNotification, ConfigOptions, Hash, Transaction, Account, Unsubscribe, Notification, Config, API, TransactionLog, EmitterListener, Emitter, NotificationDetails, WritableStore, TransactionStore, NotificationStore };
